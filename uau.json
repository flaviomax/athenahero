[
    {
        "Query": "SELECT\n        recipient_id AS user_id,\n        date_diff('day', ui.created_at, ui.approved_at) AS delay_invite_pair\n        FROM raw.users_invitations ui\n        WHERE\n        approved_at IS NOT NULL  -- Get approved users only\n        ORDER BY user_id",
        "QueryExecutionContext": {},
        "QueryExecutionId": "6a87499a-b024-4370-a6f9-75d350631d34",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/6a87499a-b024-4370-a6f9-75d350631d34.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 54001664,
            "EngineExecutionTimeInMillis": 2168,
            "QueryPlanningTimeInMillis": 136,
            "QueryQueueTimeInMillis": 121,
            "ServiceProcessingTimeInMillis": 11,
            "TotalExecutionTimeInMillis": 2300
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:37.186000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:34.886000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"daily_customers_1597507978_1963212\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/daily_customers_1597507978_1963212'\n            ) as \n        with dates as (\n            select\n                date_trunc('day', requested_at at time zone 'America/Sao_Paulo') as dmy\n            from\n                raw.spreadsheets_leads\n            group by\n                date_trunc('day', requested_at at time zone 'America/Sao_Paulo')\n        ), full_contracts_smartphone as (\n            select\n                qsc.id as contract_id,\n                qsc.user_id,\n                qsc.imei as imei_primary,\n                qsc.imei_secondary,\n                qsc.deductible_percentage,\n                qsc.created_at at time zone 'America/Sao_Paulo' as contract_created_at,\n                qsc.payment_subscription_id,\n                qsc.paired_at at time zone 'America/Sao_Paulo' as activated_at,\n                case when qsc.claimed_at is not null then qsc.claimed_at at time zone 'America/Sao_Paulo'\n                    else qsc.suspended_at at time zone 'America/Sao_Paulo' end as suspended_at,\n                case when qsc.claimed_at is not null then 'claim'\n                    else qsc.suspend_reason end as suspend_reason,\n                date_trunc('day', coalesce(qsc.inactive_at, cast(qsc.inactive_on as timestamp)) at time zone 'America/Sao_Paulo') as inactive_at,\n                qsc.claimed_at at time zone 'America/Sao_Paulo' as claimed_at,\n                qsc.reactivate_pause_on,\n                cast(cast(substr(qic.certificate_uid, 13) as integer) as varchar) as certificate_id,\n                qic.item_uid,\n                lower(qic.item_manufacturer) as item_manufacturer,\n                qic.item_model,\n                qic.customer_cpf_cnpj,\n                qic.customer_full_name,\n                qic.customer_email,\n                qic.customer_phone,\n                qicc.starts_at at time zone 'America/Sao_Paulo' as cycle_starts_at,\n                qicc.ends_at at time zone 'America/Sao_Paulo' as cycle_ends_at,\n                qicc.premium_value_cents,\n                qicc.insured_value_cents\n            from\n                raw.quotes_smartphone_contracts qsc\n            join\n                raw.quotes_insurance_certificates qic\n            on\n                qsc.id = qic.smartphone_contract_id\n                and qic.current = True\n            left join\n                raw.quotes_insurance_certificate_cycles qicc\n            on\n                cast(cast(substr(qic.certificate_uid, 13) as integer) as varchar) = qicc.certificate_id\n            where\n                paired_at is not null\n        ), raw_daily_active_contracts as (\n            select\n                *,\n                dense_rank() over (partition by user_id order by activated_at) rank_cycle\n            from (\n                select\n                    *,\n                    row_number() over (partition by d.dmy, fsc.user_id order by fsc.contract_created_at desc) as rn\n                from\n                    dates d\n                join\n                    full_contracts_smartphone fsc\n                on\n                    d.dmy >= date_trunc('day', fsc.activated_at)\n                    and (fsc.inactive_at is null or d.dmy <= date_trunc('day', fsc.inactive_at))\n                    and d.dmy >= date_trunc('day', fsc.cycle_starts_at)\n                    and (fsc.cycle_ends_at is null or d.dmy <= date_trunc('day', fsc.cycle_ends_at))) a\n            where\n                rn = 1\n        ), daily_customers_base as (\n            select\n                rdac.*,\n                case when rdac.suspended_at is not null then\n                    case when date_trunc('day', rdac.suspended_at) > rdac.dmy and date_trunc('day', rdac.inactive_at) > rdac.dmy then null\n                        when date_trunc('day', rdac.inactive_at) = rdac.dmy then rdac.suspend_reason\n                        when date_trunc('day', rdac.suspended_at) < date_trunc('day', rdac.inactive_at) then 'awaiting_' || rdac.suspend_reason\n                        else rdac.suspend_reason end\n                    else null end as churn_status,\n                row_number() over (partition by rdac.dmy, rdac.certificate_id order by rdac.contract_created_at desc) as rank_last_contract_for_certificate\n            from\n                raw_daily_active_contracts rdac\n        ), pipefy_claims as (\n            select\n                user_id as pc_user_id,\n                modelo_memoria_aparelho as pc_model_memory,\n                plano as pc_plan,\n                aparelho_possui_2_imeis as pc_device_has_2_imeis,\n                cidade_da_ocorrencia as pc_claim_city,\n                banco_do_membro as pc_bank,\n                tipo_ocorrencia as pc_claim_type,\n                claim_score as pc_claim_score,\n                resultado_claim_score as pc_claim_score_result,\n                date_trunc('day', data_de_abertura_do_sinistro) as pc_claim_opening_day,\n                status_final_sinistro as pc_final_status,\n                last_fraud_classification as pc_last_fraud_classification,\n                simple_fraud_classification as pc_simple_fraud_classification,\n                is_possible_fraud as pc_is_possible_fraud\n            from trusted.risk_pipefy_claims\n        ), daily_customers_pipefy as (\n            select\n                *\n            from daily_customers_base fs\n            left join pipefy_claims pc\n                on fs.user_id = pc.pc_user_id\n                and cast(substr(cast(fs.dmy as varchar), 1, 23) as timestamp) = cast(pc.pc_claim_opening_day as timestamp)\n        )\n\n        select\n            cast(substr(cast(dmy as varchar), 1, 23) as timestamp) as dmy,\n            contract_id,\n            user_id,\n            imei_primary,\n            imei_secondary,\n            cast(substr(cast(contract_created_at as varchar), 1, 23) as timestamp) as contract_created_at,\n            payment_subscription_id,\n            cast(substr(cast(activated_at as varchar), 1, 23) as timestamp) as activated_at,\n            cast(substr(cast(inactive_at as varchar), 1, 23) as timestamp) as inactive_at,\n            cast(substr(cast(cast(reactivate_pause_on as timestamp) as varchar), 1, 23) as timestamp) as reactivate_pause_on,\n            certificate_id,\n            item_uid,\n            item_manufacturer,\n            item_model,\n            customer_cpf_cnpj,\n            customer_full_name,\n            customer_email,\n            customer_phone,\n            cast(substr(cast(cycle_starts_at as varchar), 1, 23) as timestamp) as cycle_starts_at,\n            cast(substr(cast(cycle_ends_at as varchar), 1, 23) as timestamp) as cycle_ends_at,\n            premium_value_cents,\n            insured_value_cents,\n            churn_status,\n            rank_cycle,\n            deductible_percentage,\n            'smartphone' as product,\n            min(cast(substr(cast(activated_at as varchar), 1, 23) as timestamp)) over (partition by user_id) as first_activated_at,\n            row_number() over (partition by user_id order by dmy) days_active,\n\n            -- Pipefy Claims columns\n            pc_model_memory,\n            pc_plan,\n            pc_device_has_2_imeis,\n            pc_claim_city,\n            pc_bank,\n            pc_claim_type,\n            pc_claim_score,\n            pc_claim_score_result,\n            pc_claim_opening_day,\n            pc_final_status,\n            pc_last_fraud_classification,\n            pc_simple_fraud_classification,\n            pc_is_possible_fraud\n        from\n            daily_customers_pipefy\n        where\n            rank_last_contract_for_certificate=1\n            and (churn_status is null or not (churn_status = 'expired' and date_trunc('day', activated_at) = date_trunc('day', dmy)))",
        "QueryExecutionContext": {},
        "QueryExecutionId": "4fba745e-b62f-486b-bdb4-8e874845a75e",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/4fba745e-b62f-486b-bdb4-8e874845a75e"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/4fba745e-b62f-486b-bdb4-8e874845a75e-manifest.csv",
            "DataScannedInBytes": 413309140,
            "EngineExecutionTimeInMillis": 23961,
            "QueryPlanningTimeInMillis": 2191,
            "QueryQueueTimeInMillis": 366,
            "TotalExecutionTimeInMillis": 24175
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:13:22.534000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:12:58.359000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  with initial as (\r\n      select\r\n          acon.user_id,\r\n          ev.publisher_id as contract_id,\r\n          adri.full_name,\r\n          ev.name as event, \r\n          ev.ts as event_at,\r\n          acon.state as contract_state,\r\n          lj.insured_value_cents,\r\n          lj.premium_value_cents,\r\n          lj.canceled_reason,\r\n          lj.canceled_at,\r\n          acer.make as make_acer,\r\n          acer.model as model_acer,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at,\r\n          user_email,\r\n          acon.quote_id as id_for_join,\r\n          row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\r\n          row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\r\n          row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\r\n      from\r\n          raw.quotes_events as ev\r\n      left join \r\n          raw.quotes_auto_contracts as acon\r\n      on\r\n          ev.publisher_id = acon.id\r\n      left join \r\n          raw.quotes_auto_certificates as acer \r\n      on \r\n          acon.id = acer.contract_id\r\n      left join \r\n          raw.quotes_auto_drivers as adri\r\n      on\r\n          acon.id = adri.contract_id\r\n      left join (\r\n          select\r\n              *\r\n          from (\r\n              select \r\n                  *, \r\n                  row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle \r\n              from  \r\n                  raw.quotes_auto_certificates as acer\r\n              left join\r\n                  raw.quotes_auto_certificate_cycles as acc         \r\n              on \r\n                  acer.id = acc.certificate_id ) \r\n          where \r\n              rn_cycle = 1) lj\r\n      on         \r\n       acon.id = lj.contract_id \r\n      where \r\n          NOT EXISTS (SELECT email as test_emails_count FROM trusted.pier_testers pt where pt.full_name = adri.full_name)\r\n          and user_email not like '%+test%' \r\n          and user_email not like '%tester%' \r\n          and user_email not like '%@pier.digital(opens in new tab)' \r\n      group by \r\n          user_id, \r\n          publisher_id, \r\n          full_name, \r\n          name, \r\n          ts, \r\n          acon.state, \r\n          insured_value_cents,\r\n          premium_value_cents, \r\n          lj.canceled_reason, \r\n          lj.canceled_at, \r\n          acer.make, \r\n          acer.model,\r\n          emitted_at, \r\n          user_email,\r\n          acon.quote_id,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at    \r\n      order by\r\n          contract_state asc,\r\n          user_id asc,\r\n          rank_by_user asc,\r\n          rank_by_event asc\r\n  ), \r\n  more_info as (\r\n      select \r\n          qaq.id as quote_id, \r\n          qaq.created_at,\r\n          driver_name, \r\n          license_plate, \r\n          qai.model,\r\n          name as make,\r\n          qai.model_year,\r\n          qai.fabrication_year,\r\n          qai.current_market_value_cents,\r\n          driver_gender, \r\n          driver_birthdate, \r\n          replace(home_zipcode, '-','') as home_zipcode,\r\n          row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\r\n      from \r\n          raw.quotes_auto_quotes qaq\r\n      left join \r\n          raw.quotes_auto_items qai\r\n      on \r\n          qaq.item_id = qai.id\r\n      left join\r\n          raw.quotes_auto_makes qam\r\n      on\r\n          qai.make_id = qam.id\r\n  ),\r\n  trusted_auto_final_join as (\r\n      select \r\n          *,\r\n          split(city, '/') as city_state_array\r\n      from \r\n          initial \r\n      left join \r\n          more_info\r\n          on initial.id_for_join = more_info.quote_id\r\n      left join \r\n          transient.cep_correio cep\r\n          on more_info.home_zipcode = cep.cep\r\n      order by event_at \r\n  ),\r\n  trusted_auto as (\r\n      select \r\n          user_id,\r\n          contract_id,\r\n          coalesce(full_name, driver_name) as full_name,\r\n          user_email,\r\n          event,\r\n          date_add('hour', -3, event_at) as event_at,\r\n          contract_state,\r\n          coalesce( make_acer, make) as make,\r\n          coalesce(model_acer, model) as model,\r\n          license_plate,\r\n          model_year,\r\n          fabrication_year,\r\n          insured_value_cents,\r\n          premium_value_cents,\r\n          current_market_value_cents,\r\n          driver_birthdate,\r\n          driver_gender,\r\n          home_zipcode,\r\n          trusted_auto_final_join.city_state_array[1] as city,\r\n          trusted_auto_final_join.city_state_array[2] as state,\r\n          neighborhood,\r\n          emitted_at,\r\n          emitted_remote_at,\r\n          canceled_at,\r\n          canceled_remote_at,\r\n          canceled_reason,\r\n          rank_by_event,\r\n          rank_by_user,\r\n          rank_by_user_desc\r\n      from \r\n          trusted_auto_final_join\r\n  ),\r\n  mp_quote_data as (\r\n      select \r\n          * \r\n      from \r\n          (select \r\n              user_distinct_id as id2,\r\n              event as signup_event,\r\n              user_pier_id as user_id, \r\n              coalesce(user_properties.email, event_properties.email) as email,\r\n              cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\r\n              event_properties.utm_campaign as utm_campaign,\r\n              event_properties.utm_source as utm_source,\r\n              event_properties.utm_content as utm_content,\r\n              event_properties.utm_medium as utm_medium,\r\n              event_properties.utm_term as utm_term,\r\n              event_properties.last_utm_source, \r\n              event_properties.last_utm_medium, \r\n              event_properties.last_utm_campaign, \r\n              event_properties.last_utm_content, \r\n              event_properties.last_utm_term,\r\n              event_properties.platform,\r\n              row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\r\n          from \r\n              trusted.mixpanel_general\r\n          where \r\n              event = 'UserSignup With Email Confirmed' \r\n              or event = 'UserSignup With email Confirmed'\r\n              or event = 'UserSignup With Facebook Confirmed'\r\n              or event = 'UserSignup With facebook Confirmed'\r\n              or event = '[Auto][APP] User SignUp With Email Button Clicked'\r\n          ) where rn = 1 \r\n  ), \r\n  web_sources as (\r\n      select \r\n          mqd.email,\r\n          mqd.user_id,\r\n          mqd.signup_event,\r\n          mqd.signup_at,\r\n          mqd.platform,\r\n          coalesce(last_utm_campaign, utm_campaign) as campaign,\r\n          coalesce(last_utm_source, utm_source) as source,\r\n          coalesce(last_utm_content, utm_content) as content,\r\n          coalesce(last_utm_medium, utm_medium) as medium,\r\n          coalesce(last_utm_term, utm_term) as term\r\n      from \r\n          mp_quote_data mqd\r\n  \r\n  ),\r\n  adjust_sources as (\r\n      select \r\n          ads.user_pier_id,\r\n          ads.network_name,\r\n          ads.campaign_name,\r\n          ads.adgroup_name,\r\n          ads.creative_name,\r\n          ads.device_manufacturer,\r\n          ads.installed_at\r\n      from \r\n          raw.vw_mixpanel_adjust_sources ads\r\n      where rn_uadid_asc = 1\r\n  ),\r\n  \r\n  final_sources_platform as (\r\n  select \r\n      ta.*,\r\n      case \r\n          when ws.platform is null AND qcc.user_id is not null then 'Cross Sell' \r\n          when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\r\n          else ws.platform END as platform,\r\n      ws.signup_event,\r\n      ws.signup_at,\r\n      ws.campaign,\r\n      ws.source,\r\n      ws.content,\r\n      ws.medium,\r\n      ws.term,\r\n      ads.network_name,\r\n      ads.campaign_name,\r\n      ads.adgroup_name,\r\n      ads.creative_name,\r\n      ads.device_manufacturer,\r\n      ads.installed_at\r\n  from \r\n      trusted_auto ta\r\n  left join \r\n      web_sources ws\r\n      on ta.user_id = ws.user_id\r\n      or ta.user_email = ws.email\r\n  left join \r\n      adjust_sources ads\r\n      on ta.user_id = ads.user_pier_id\r\n  left join\r\n      trusted.quotes_customer_contracts qcc  \r\n      on ta.user_id = qcc.user_id\r\n  ), \r\n  final_with_channels as (\r\n  select \r\n      *, \r\n           case \r\n          when platform = 'app' then 'App'\r\n          when platform =  'Cross Sell' then  'Cross Sell' \r\n          when medium = 'cpc' or medium = 'brand'  or medium = 'ocpm' or medium = 'bex' then 'Paid' \r\n          when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\r\n          when medium = 'referral' OR medium = 'referral' then 'Referral'\r\n          else 'organic' End as channel\r\n  from \r\n      final_sources_platform \r\n  ), \r\n  initial_referring_domain as (\r\n      select \r\n          * \r\n      from (\r\n          select \r\n              *,\r\n              row_number () over (partition by user_pier_id) as rn \r\n          from (\r\n              select \r\n                  distinct user_pier_id, \r\n                  user_distinct_id,\r\n                  event_properties._initial_referrer,\r\n                  event_properties._initial_referring_domain\r\n              from \r\n                  trusted.mixpanel_general\r\n              where\r\n                 event = 'Landing Page Screen Viewed' and\r\n                 user_pier_id is not null))\r\n      where rn = 1\r\n  ), \r\n  final_with_referrer as (\r\n  select \r\n      tae.*,\r\n      ird._initial_referrer as initial_referrer,\r\n      ird._initial_referring_domain as initial_referring_domain\r\n  from \r\n      final_with_channels as tae\r\n  left join \r\n      initial_referring_domain as ird\r\n  on tae.user_id = ird.user_pier_id\r\n  )\r\n  select * from final_with_referrer\n) \"Custom SQL Query\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "e85efa24-56da-49f9-98d0-10a9e9180216",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/e85efa24-56da-49f9-98d0-10a9e9180216.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 1582,
            "QueryQueueTimeInMillis": 69,
            "ServiceProcessingTimeInMillis": 39,
            "TotalExecutionTimeInMillis": 1690
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:36:50.571000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:36:48.881000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"unique lpvs\".\"Auto\" AS \"Auto\",\n  \"unique lpvs\".\"Institucional\" AS \"Institucional\",\n  \"unique lpvs\".\"Smartphone\" AS \"Smartphone\",\n  \"unique lpvs\".\"day\" AS \"day\"\nFROM (\n  With base as (\r\n  select\r\n      row_number() OVER (PARTITION BY properties.distinct_id,\r\n                                                  date_trunc('day',cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP))) as rn,\r\n      mix.properties.distinct_id,\r\n      event,\r\n      properties.product,\r\n      cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as event_at\r\n  from\r\n      raw.mixpanel mix\r\n  where\r\n      event = 'Landing Page Viewed' or\r\n      event = 'Landing Page Screen Viewed' \r\n  ),\r\n  \r\n  semi as (select \r\n      date_trunc('day', event_at) as day,\r\n      event,\r\n      product,\r\n      count(distinct_id) as LPVs\r\n  from \r\n      base\r\n  where rn = 1 \r\n  group by \r\n      date_trunc('day', event_at),\r\n      product,\r\n      event\r\n  ),\r\n  final as (\r\n  select \r\n      day,\r\n      case when event = 'Landing Page Screen Viewed'  and product = 'general' Then LPVs ELSe 0 END as Institucional,\r\n      case when event = 'Landing Page Screen Viewed'  and product = 'auto' Then LPVs else 0 end as Auto,\r\n      case when event = 'Landing Page Viewed'  Then LPVs else 0 end as Smartphone\r\n  from semi \r\n  order by day desc\r\n  )\r\n  select \r\n      day,\r\n      sum(Institucional) as Institucional,\r\n      sum(Auto) as Auto,\r\n      Sum(Smartphone) as Smartphone\r\n  from \r\n      final\r\n  group by day\n) \"unique lpvs\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "b14c7a7c-a9f3-404c-bdfa-94d2ca846210",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/b14c7a7c-a9f3-404c-bdfa-94d2ca846210.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 1426168214,
            "EngineExecutionTimeInMillis": 32472,
            "QueryPlanningTimeInMillis": 1129,
            "QueryQueueTimeInMillis": 288,
            "TotalExecutionTimeInMillis": 32730
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:32:25.641000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:31:52.911000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table raw.\"full_1597503729_9618404\" with\n            (\n                format='parquet',\n                external_location='s3://pier-data-lake-raw-geolocation/full_1597503729_9618404'\n            ) as \n            select\n                user_id,\n                device_id,\n                cast(from_iso8601_timestamp(loc.timestamp) as timestamp) as device_timestamp_utc,\n                loc.coords.speed as speed,\n                loc.coords.latitude as latitude,\n                loc.coords.longitude as longitude,\n                loc.coords.floor as floor,\n                loc.coords.accuracy as accuracy,\n                loc.coords.altitude_accuracy as altitude_accuracy,\n                loc.coords.altitude as altitude,\n                loc.coords.heading as heading,\n                loc.is_moving as is_moving,\n                loc.odometer as odometer,\n                loc.uuid as event_uuid,\n                loc.activity.type as activity_type,\n                loc.activity.confidence as activity_confidence,\n                loc.battery.level as battery_level,\n                loc.battery.is_charging as battery_is_charging,\n                loc.extras\n            from\n                transient.geolocation\n            cross join\n                unnest(location) as t(loc)",
        "QueryExecutionContext": {},
        "QueryExecutionId": "4ea02a82-096b-4dad-b5f2-b80ae0fe2e4c",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/4ea02a82-096b-4dad-b5f2-b80ae0fe2e4c"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/4ea02a82-096b-4dad-b5f2-b80ae0fe2e4c-manifest.csv",
            "DataScannedInBytes": 27487350279,
            "EngineExecutionTimeInMillis": 36517,
            "QueryPlanningTimeInMillis": 2098,
            "QueryQueueTimeInMillis": 240,
            "TotalExecutionTimeInMillis": 36712
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:46.769000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:10.057000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"smartphone_payments_1597507681_1524007\" with\n            (\n                format='parquet',\n                external_location='s3://pier-data-lake-trusted-quotes/smartphone_payments_1597507681_1524007'\n            ) as select\n    distinct qsc.user_id as user_id,\n    coalesce(up.full_name_from_cpf, concat(up.first_name, up.last_name)) as full_name, \n    up.cpf as cpf,\n    uu.email as email,\n    qpip.price_month as plan_price_month,\n    qsc.suspended_at as suspended_at,\n    qsc.suspend_reason as suspend_reason,\n    qpcc.starts_on as starts_on,\n    qpcc.ends_on as ends_on,\n    qicc.premium_value_cents/100.0 as premium_value,\n    qicc.emitted_remote_at as emitted_remote_at,\n    qicc.starts_at as certificate_cycle_starts_at,\n    qicc.ends_at as certificate_cycle_ends_at,\n    qicc.canceled_locally_at as canceled_locally,\n    qicc.canceled_remote_at as canceled_remote_at,\n    qicc.premium_value_pro_rata_cents/100.0 as premium_value_pro_rata,\n    coalesce(day(pc.paid_at), qps.day_of_charge) as day_of_charge,\n    qpcc.invoiced_amount as cycle_value,\n    pc.paid_at as invoice_paid_at,\n    pi.created_at as created_at,\n    pi.id as invoice_id,\n    pi.status as invoice_status,\n    pi.amount as invoice_amount,\n    coalesce(pi.amount, 0) - qicc.premium_value_cents/100.0 + coalesce(qicc.premium_value_pro_rata_cents, 0)/100.0 as deficit\nfrom\n    raw.quotes_smartphone_contracts qsc\n    \nleft join\n    raw.users_profiles up\non\n    qsc.user_id = up.user_id\nleft join\n    raw.users_users uu\non\n    qsc.user_id = uu.id\n    \nleft join\n    (\n        select\n            *,\n            case\n                when starts_on = ends_on then date_add('month', 1, starts_on)\n                else ends_on\n            end as fake_ends_on\n        from\n            raw.quotes_plan_contract_cycles\n    ) qpcc\non\n    qsc.id = qpcc.smartphone_contract_id\n    \nleft join\n    raw.quotes_plan_internal_plans qpip\non\n    qsc.plan_visible_plan_id = qpip.visible_plan_id\n    and date(qpip.starts_at) <= date(qpcc.starts_on)\n    and date(qpip.ends_at) >= date(qpcc.starts_on)\n    and date(qpip.ends_at) >= date('2019-01-01')\n    \nleft join\n    raw.pay_invoice_items pii\non\n    pii.id = qpcc.invoice_item_identifier\n\nleft join\n    raw.quotes_insurance_certificates qic\non\n    qsc.id = qic.smartphone_contract_id\nleft join\n    raw.quotes_insurance_certificate_cycles qicc\non\n    qic.id = cast(qicc.certificate_id as integer)\n    and date(qicc.emitted_at) >= date(qpcc.starts_on)\n    and date(qicc.emitted_at) < date(qpcc.fake_ends_on)\n    \nleft join\n    (\n    select\n        user_id,\n        day_of_charge,\n        date(created_at) as starts_at,\n        case\n            when lag(created_at) over (partition by user_id order by created_at desc) is null then date('2050-01-01')\n            else date(lag(created_at) over (partition by user_id order by created_at desc) - interval '1' day)\n        end as ends_at\n    from\n        raw.quotes_plan_subscriptions\n    ) qps\non\n    qsc.user_id = qps.user_id\n    and date(qps.starts_at) <= date(qpcc.starts_on)\n    and date(qps.ends_at) >= date(qpcc.starts_on)\n    \nleft join\n    raw.pay_charges pc\non\n    pii.invoice_id = pc.invoice_id\n    and pc.result = 'success'\n    \nleft join\n    raw.pay_invoices pi\non\n    pc.invoice_id = pi.id\n    \nwhere\n    life_cycle_stage = 'contract'\n    and qsc.paired_at is not null\n\norder by\n    qsc.user_id,\n    starts_on,\n    ends_on",
        "QueryExecutionContext": {},
        "QueryExecutionId": "cacd8a4e-ba50-47fa-a166-fc922f832ede",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/cacd8a4e-ba50-47fa-a166-fc922f832ede"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/cacd8a4e-ba50-47fa-a166-fc922f832ede-manifest.csv",
            "DataScannedInBytes": 820210805,
            "EngineExecutionTimeInMillis": 8348,
            "QueryPlanningTimeInMillis": 1783,
            "QueryQueueTimeInMillis": 12328,
            "TotalExecutionTimeInMillis": 20645
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:21.991000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:01.346000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"Custom SQL Query\".\"adgroup_name\" AS \"adgroup_name\",\n  \"Custom SQL Query\".\"campaign\" AS \"campaign\",\n  \"Custom SQL Query\".\"campaign_name\" AS \"campaign_name\",\n  \"Custom SQL Query\".\"canceled_at\" AS \"canceled_at\",\n  \"Custom SQL Query\".\"canceled_reason\" AS \"canceled_reason\",\n  \"Custom SQL Query\".\"canceled_remote_at\" AS \"canceled_remote_at\",\n  \"Custom SQL Query\".\"channel\" AS \"channel\",\n  \"Custom SQL Query\".\"city\" AS \"city\",\n  \"Custom SQL Query\".\"content\" AS \"content\",\n  \"Custom SQL Query\".\"contract_id\" AS \"contract_id\",\n  \"Custom SQL Query\".\"contract_state\" AS \"contract_state\",\n  \"Custom SQL Query\".\"creative_name\" AS \"creative_name\",\n  \"Custom SQL Query\".\"current_market_value_cents\" AS \"current_market_value_cents\",\n  \"Custom SQL Query\".\"device_manufacturer\" AS \"device_manufacturer\",\n  \"Custom SQL Query\".\"driver_birthdate\" AS \"driver_birthdate\",\n  \"Custom SQL Query\".\"driver_gender\" AS \"driver_gender\",\n  \"Custom SQL Query\".\"emitted_at\" AS \"emitted_at\",\n  \"Custom SQL Query\".\"emitted_remote_at\" AS \"emitted_remote_at\",\n  \"Custom SQL Query\".\"event\" AS \"event\",\n  \"Custom SQL Query\".\"event_at\" AS \"event_at\",\n  \"Custom SQL Query\".\"fabrication_year\" AS \"fabrication_year\",\n  \"Custom SQL Query\".\"full_name\" AS \"full_name\",\n  \"Custom SQL Query\".\"home_zipcode\" AS \"home_zipcode\",\n  \"Custom SQL Query\".\"initial_referrer\" AS \"initial_referrer\",\n  \"Custom SQL Query\".\"initial_referring_domain\" AS \"initial_referring_domain\",\n  \"Custom SQL Query\".\"installed_at\" AS \"installed_at\",\n  \"Custom SQL Query\".\"insured_value_cents\" AS \"insured_value_cents\",\n  \"Custom SQL Query\".\"license_plate\" AS \"license_plate\",\n  \"Custom SQL Query\".\"make\" AS \"make\",\n  \"Custom SQL Query\".\"medium\" AS \"medium\",\n  \"Custom SQL Query\".\"model\" AS \"model\",\n  \"Custom SQL Query\".\"model_year\" AS \"model_year\",\n  \"Custom SQL Query\".\"neighborhood\" AS \"neighborhood\",\n  \"Custom SQL Query\".\"network_name\" AS \"network_name\",\n  \"Custom SQL Query\".\"platform\" AS \"platform\",\n  \"Custom SQL Query\".\"premium_value_cents\" AS \"premium_value_cents\",\n  \"Custom SQL Query\".\"rank_by_event\" AS \"rank_by_event\",\n  \"Custom SQL Query\".\"rank_by_user\" AS \"rank_by_user\",\n  \"Custom SQL Query\".\"rank_by_user_desc\" AS \"rank_by_user_desc\",\n  \"Custom SQL Query\".\"signup_at\" AS \"signup_at\",\n  \"Custom SQL Query\".\"signup_event\" AS \"signup_event\",\n  \"Custom SQL Query\".\"source\" AS \"source\",\n  \"Custom SQL Query\".\"state\" AS \"state\",\n  \"Custom SQL Query\".\"term\" AS \"term\",\n  \"Custom SQL Query\".\"user_email\" AS \"user_email\",\n  \"Custom SQL Query\".\"user_id\" AS \"user_id\"\nFROM (\n  with initial as (\r\n      select\r\n          acon.user_id,\r\n          ev.publisher_id as contract_id,\r\n          adri.full_name,\r\n          ev.name as event, \r\n          ev.ts as event_at,\r\n          acon.state as contract_state,\r\n          lj.insured_value_cents,\r\n          lj.premium_value_cents,\r\n          lj.canceled_reason,\r\n          lj.canceled_at,\r\n          acer.make as make_acer,\r\n          acer.model as model_acer,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at,\r\n          user_email,\r\n          acon.quote_id as id_for_join,\r\n          row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\r\n          row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\r\n          row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\r\n      from\r\n          raw.quotes_events as ev\r\n      left join \r\n          raw.quotes_auto_contracts as acon\r\n      on\r\n          ev.publisher_id = acon.id\r\n      left join \r\n          raw.quotes_auto_certificates as acer \r\n      on \r\n          acon.id = acer.contract_id\r\n      left join \r\n          raw.quotes_auto_drivers as adri\r\n      on\r\n          acon.id = adri.contract_id\r\n      left join (\r\n          select\r\n              *\r\n          from (\r\n              select \r\n                  *, \r\n                  row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle \r\n              from  \r\n                  raw.quotes_auto_certificates as acer\r\n              left join\r\n                  raw.quotes_auto_certificate_cycles as acc         \r\n              on \r\n                  acer.id = acc.certificate_id ) \r\n          where \r\n              rn_cycle = 1) lj\r\n      on         \r\n       acon.id = lj.contract_id \r\n      where \r\n          NOT EXISTS (SELECT email as test_emails_count FROM trusted.pier_testers pt where pt.full_name = adri.full_name)\r\n          and user_email not like '%+test%' \r\n          and user_email not like '%tester%' \r\n          and user_email not like '%@pier.digital(opens in new tab)' \r\n      group by \r\n          user_id, \r\n          publisher_id, \r\n          full_name, \r\n          name, \r\n          ts, \r\n          acon.state, \r\n          insured_value_cents,\r\n          premium_value_cents, \r\n          lj.canceled_reason, \r\n          lj.canceled_at, \r\n          acer.make, \r\n          acer.model,\r\n          emitted_at, \r\n          user_email,\r\n          acon.quote_id,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at    \r\n      order by\r\n          contract_state asc,\r\n          user_id asc,\r\n          rank_by_user asc,\r\n          rank_by_event asc\r\n  ), \r\n  more_info as (\r\n      select \r\n          qaq.id as quote_id, \r\n          qaq.created_at,\r\n          driver_name, \r\n          license_plate, \r\n          qai.model,\r\n          name as make,\r\n          qai.model_year,\r\n          qai.fabrication_year,\r\n          qai.current_market_value_cents,\r\n          driver_gender, \r\n          driver_birthdate, \r\n          replace(home_zipcode, '-','') as home_zipcode,\r\n          row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\r\n      from \r\n          raw.quotes_auto_quotes qaq\r\n      left join \r\n          raw.quotes_auto_items qai\r\n      on \r\n          qaq.item_id = qai.id\r\n      left join\r\n          raw.quotes_auto_makes qam\r\n      on\r\n          qai.make_id = qam.id\r\n  ),\r\n  trusted_auto_final_join as (\r\n      select \r\n          *,\r\n          split(city, '/') as city_state_array\r\n      from \r\n          initial \r\n      left join \r\n          more_info\r\n          on initial.id_for_join = more_info.quote_id\r\n      left join \r\n          transient.cep_correio cep\r\n          on more_info.home_zipcode = cep.cep\r\n      order by event_at \r\n  ),\r\n  trusted_auto as (\r\n      select \r\n          user_id,\r\n          contract_id,\r\n          coalesce(full_name, driver_name) as full_name,\r\n          user_email,\r\n          event,\r\n          date_add('hour', -3, event_at) as event_at,\r\n          contract_state,\r\n          coalesce( make_acer, make) as make,\r\n          coalesce(model_acer, model) as model,\r\n          license_plate,\r\n          model_year,\r\n          fabrication_year,\r\n          insured_value_cents,\r\n          premium_value_cents,\r\n          current_market_value_cents,\r\n          driver_birthdate,\r\n          driver_gender,\r\n          home_zipcode,\r\n          trusted_auto_final_join.city_state_array[1] as city,\r\n          trusted_auto_final_join.city_state_array[2] as state,\r\n          neighborhood,\r\n          emitted_at,\r\n          emitted_remote_at,\r\n          canceled_at,\r\n          canceled_remote_at,\r\n          canceled_reason,\r\n          rank_by_event,\r\n          rank_by_user,\r\n          rank_by_user_desc\r\n      from \r\n          trusted_auto_final_join\r\n  ),\r\n  mp_quote_data as (\r\n      select \r\n          * \r\n      from \r\n          (select \r\n              user_distinct_id as id2,\r\n              event as signup_event,\r\n              user_pier_id as user_id, \r\n              coalesce(user_properties.email, event_properties.email) as email,\r\n              cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\r\n              event_properties.utm_campaign as utm_campaign,\r\n              event_properties.utm_source as utm_source,\r\n              event_properties.utm_content as utm_content,\r\n              event_properties.utm_medium as utm_medium,\r\n              event_properties.utm_term as utm_term,\r\n              event_properties.last_utm_source, \r\n              event_properties.last_utm_medium, \r\n              event_properties.last_utm_campaign, \r\n              event_properties.last_utm_content, \r\n              event_properties.last_utm_term,\r\n              event_properties.platform,\r\n              row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\r\n          from \r\n              trusted.mixpanel_general\r\n          where \r\n              event = 'UserSignup With Email Confirmed' \r\n              or event = 'UserSignup With email Confirmed'\r\n              or event = 'UserSignup With Facebook Confirmed'\r\n              or event = 'UserSignup With facebook Confirmed'\r\n              or event = '[Auto][APP] User SignUp With Email Button Clicked'\r\n          ) where rn = 1 \r\n  ), \r\n  web_sources as (\r\n      select \r\n          mqd.email,\r\n          mqd.user_id,\r\n          mqd.signup_event,\r\n          mqd.signup_at,\r\n          mqd.platform,\r\n          coalesce(last_utm_campaign, utm_campaign) as campaign,\r\n          coalesce(last_utm_source, utm_source) as source,\r\n          coalesce(last_utm_content, utm_content) as content,\r\n          coalesce(last_utm_medium, utm_medium) as medium,\r\n          coalesce(last_utm_term, utm_term) as term\r\n      from \r\n          mp_quote_data mqd\r\n  \r\n  ),\r\n  adjust_sources as (\r\n      select \r\n          ads.user_pier_id,\r\n          ads.network_name,\r\n          ads.campaign_name,\r\n          ads.adgroup_name,\r\n          ads.creative_name,\r\n          ads.device_manufacturer,\r\n          ads.installed_at\r\n      from \r\n          raw.vw_mixpanel_adjust_sources ads\r\n      where rn_uadid_asc = 1\r\n  ),\r\n  \r\n  final_sources_platform as (\r\n  select \r\n      ta.*,\r\n      case \r\n          when ws.platform is null AND qcc.user_id is not null then 'Cross Sell' \r\n          when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\r\n          else ws.platform END as platform,\r\n      ws.signup_event,\r\n      ws.signup_at,\r\n      ws.campaign,\r\n      ws.source,\r\n      ws.content,\r\n      ws.medium,\r\n      ws.term,\r\n      ads.network_name,\r\n      ads.campaign_name,\r\n      ads.adgroup_name,\r\n      ads.creative_name,\r\n      ads.device_manufacturer,\r\n      ads.installed_at\r\n  from \r\n      trusted_auto ta\r\n  left join \r\n      web_sources ws\r\n      on ta.user_id = ws.user_id\r\n      or ta.user_email = ws.email\r\n  left join \r\n      adjust_sources ads\r\n      on ta.user_id = ads.user_pier_id\r\n  left join\r\n      trusted.quotes_customer_contracts qcc  \r\n      on ta.user_id = qcc.user_id\r\n  ), \r\n  final_with_channels as (\r\n  select \r\n      *, \r\n           case \r\n          when platform = 'app' then 'App'\r\n          when platform =  'Cross Sell' then  'Cross Sell' \r\n          when medium = 'cpc' or medium = 'brand'  or medium = 'ocpm' or medium = 'bex' then 'Paid' \r\n          when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\r\n          when medium = 'referral' OR medium = 'referral' then 'Referral'\r\n          else 'organic' End as channel\r\n  from \r\n      final_sources_platform \r\n  ), \r\n  initial_referring_domain as (\r\n      select \r\n          * \r\n      from (\r\n          select \r\n              *,\r\n              row_number () over (partition by user_pier_id) as rn \r\n          from (\r\n              select \r\n                  distinct user_pier_id, \r\n                  user_distinct_id,\r\n                  event_properties._initial_referrer,\r\n                  event_properties._initial_referring_domain\r\n              from \r\n                  trusted.mixpanel_general\r\n              where\r\n                 event = 'Landing Page Screen Viewed' and\r\n                 user_pier_id is not null))\r\n      where rn = 1\r\n  ), \r\n  final_with_referrer as (\r\n  select \r\n      tae.*,\r\n      ird._initial_referrer as initial_referrer,\r\n      ird._initial_referring_domain as initial_referring_domain\r\n  from \r\n      final_with_channels as tae\r\n  left join \r\n      initial_referring_domain as ird\r\n  on tae.user_id = ird.user_pier_id\r\n  )\r\n  select * from final_with_referrer\n) \"Custom SQL Query\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "2edbefd4-00c7-401a-a737-620a43dcafab",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/2edbefd4-00c7-401a-a737-620a43dcafab.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 9107535881,
            "EngineExecutionTimeInMillis": 80935,
            "QueryPlanningTimeInMillis": 3399,
            "QueryQueueTimeInMillis": 354,
            "TotalExecutionTimeInMillis": 81217
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:34:36.283000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:33:15.066000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  SELECT *\r\n  FROM(SELECT  id, \r\n              status,\r\n              emails_sent,\r\n              date_parse(send_time, '%Y-%m-%dT%H:%i:%sZ') as send_time,\r\n              date_parse(create_time, '%Y-%m-%dT%H:%i:%sZ') as create_time,\r\n              settings.template_id AS template_id,\r\n              settings.fb_comments AS fb_comments,\r\n              settings.preview_text AS preview_text,\r\n              settings.authenticate AS authenticate,\r\n              settings.inline_css AS inline_css,\r\n              settings.folder_id AS folder_id,\r\n              settings.reply_to AS reply_to,\r\n              settings.subject_line AS subject_line,\r\n              settings.auto_footer AS auto_footer,\r\n              settings.timewarp AS timewarp,\r\n              settings.to_name AS to_name,\r\n              settings.title AS title,\r\n              settings.drag_and_drop AS drag_and_drop,\r\n              settings.auto_tweet AS auto_tweet,\r\n              settings.use_conversation AS use_conversation,\r\n              settings.from_name AS from_name,\r\n              report_summary.unique_opens AS unique_opens,\r\n              report_summary.ecommerce.total_revenue AS total_revenue,\r\n              report_summary.ecommerce.total_spent AS total_spent,\r\n              report_summary.ecommerce.total_orders AS total_orders,\r\n              report_summary.clicks AS clicks,\r\n              report_summary.subscriber_clicks AS subscriber_clicks,\r\n              report_summary.opens AS total_opens,\r\n              report_summary.open_rate AS open_rate,\r\n              report_summary.click_rate AS click_rate,\r\n              tracking.goal_tracking AS goal_tracking,\r\n              tracking.html_clicks AS html_clicks,\r\n              tracking.ecomm360 AS ecomm360,\r\n              tracking.clicktale AS clicktale,\r\n              tracking.opens AS opens,\r\n              tracking.google_analytics AS google_analytics,\r\n              tracking.text_clicks AS text_clicks,\r\n              resendable,\r\n              needs_block_refresh,\r\n              long_archive_url,\r\n              archive_url,\r\n              web_id,\r\n              type,\r\n              content_type,\r\n              delivery_status.enabled as delivery_status,\r\n              row_number() over (partition by id order by report_summary.open_rate desc) as rn\r\n      FROM raw.vendors_mailchimp_campaigns\r\n  )\r\n  WHERE rn = 1\n) \"Consulta SQL personalizada\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "601a2d00-7018-4366-a5b4-d7419a89e904",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/601a2d00-7018-4366-a5b4-d7419a89e904.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 247,
            "QueryQueueTimeInMillis": 73,
            "ServiceProcessingTimeInMillis": 30,
            "TotalExecutionTimeInMillis": 350
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:35.294000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:34.944000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"smartphone_leads_1597507681_6360433\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/smartphone_leads_1597507681_6360433'\n            ) as with\n    leads_profiles as (\n        select\n            spd.id as invitation_id,\n            ru.user_id as user_id_profile,\n            spd.email as lead_email,\n            replace(replace(spd.cpf, '.', ''),'-','') as cpf,\n            coalesce(spd.situacao_cadastral_name, ru.full_name_from_cpf) as situacao_cadastral_name,\n            spd.created_at as lead_requested_at,\n            spd.status,\n            row_number() over (partition by spd.cpf order by spd.created_at) as rn_cpf,\n            spd.request_ip_city,\n            spd.request_ip_region,\n            spd.device_model,\n            spd.device_memory,\n            spd.plan_name,\n            COALESCE(sst.score / 1000, spd.credit_score) as credit_score,\n            sse.score as emailage_score\n        from\n            raw.spreadsheets_leads spd\n            left join\n                raw.users_profiles ru\n            on replace(replace(spd.cpf, '.', ''),'-','') = ru.cpf\n            left join\n                raw.scores_score_transunion3d sst\n            on regexp_replace(spd.cpf, '\\.|-') = regexp_replace(sst.cpf, '\\.|-')\n            left join\n                raw.scores_score_emailage sse\n            on spd.email = sse.email\n    ),\n\n    personal_info as (\n        select\n            *\n        from (\n            select\n                sco.score_history[1].datanascimento as data_nascimento,\n                sco.score_history[1].sexo as sexo,\n                row_number () over (partition by cpf order by created_at desc) as rn_pers,\n                cpf\n            from\n                raw.scores_score_personalinformation sco )\n        where\n            rn_pers = 1\n    ),\n\n    leads_key_info as (\n        select\n            lp.invitation_id,\n            lp.user_id_profile,\n            lp.lead_email,\n            lp.cpf,\n            lp.situacao_cadastral_name,\n            lp.lead_requested_at,\n            lp.status,\n            lp.rn_cpf,\n            lp.request_ip_city,\n            lp.request_ip_region,\n            lp.device_model,\n            lp.device_memory,\n            lp.plan_name,\n            lp.credit_score,\n            lp.emailage_score,\n            pi.data_nascimento,\n            pi.sexo\n        from\n            leads_profiles lp\n        left join\n            personal_info pi on\n            lp.cpf = pi.cpf\n    ),\n\n    mixpanel_utm_info as (\n    select\n        *,\n        row_number () over (partition by user_id_mix order by event_at) as rn_uid\n    from (\n        select\n            coalesce(user_pier_id, event_properties._user_id) as user_id_mix,\n            coalesce(user_properties._email, event_properties.email) as email,\n            event_properties.utm_campaign,\n            event_properties.utm_content,\n            event_properties.utm_medium,\n            event_properties.utm_source,\n            event_properties.utm_term,\n            cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as event_at\n        from\n            trusted.mixpanel_general\n        where\n            event = 'Invitation Requested')\n    ),\n\n    all_uid_matches as (\n        select\n            ki.invitation_id,\n            ki.user_id_profile,\n            ki.lead_email,\n            ki.cpf,\n            ki.situacao_cadastral_name,\n            ki.lead_requested_at,\n            ki.status,\n            ki.data_nascimento,\n            ki.sexo,\n            ki.rn_cpf,\n            ki.request_ip_city,\n            ki.request_ip_region,\n            ki.device_model,\n            ki.device_memory,\n            ki.plan_name,\n            ki.credit_score,\n            ki.emailage_score,\n            mi.user_id_mix,\n            mi.email,\n            mi.rn_uid,\n            mi.utm_campaign,\n            mi.utm_content,\n            mi.utm_medium,\n            mi.utm_source,\n            mi.utm_term,\n            mi.event_at\n        from\n            leads_key_info ki\n        left join\n            mixpanel_utm_info mi\n        on\n            ki.user_id_profile = mi.user_id_mix\n            and ki.rn_cpf = mi.rn_uid\n    ),\n\n    uid_not_found as (\n        select\n            user_id_profile,\n            1 as rn\n        from\n            all_uid_matches\n        where\n            user_id_mix is null\n        group by\n            user_id_profile\n    ),\n\n    uid_not_found_utms as (\n        select\n            user_id_profile,\n            user_id_mix,\n            email,\n            utm_campaign,\n            utm_content,\n            utm_medium,\n            utm_source,\n            utm_term,\n            event_at,\n            rn_uid\n        from\n            uid_not_found inf\n        left join\n            mixpanel_utm_info uinf\n            on inf.user_id_profile = uinf.user_id_mix\n            and inf.rn = uinf.rn_uid\n    ),\n\n    found_uid as (\n        select\n            aum.invitation_id,\n            aum.user_id_profile,\n            aum.lead_email,\n            aum.cpf,\n            aum.situacao_cadastral_name,\n            aum.lead_requested_at,\n            aum.status,\n            aum.data_nascimento,\n            aum.sexo,\n            aum.rn_cpf,\n            aum.request_ip_city,\n            aum.request_ip_region,\n            aum.device_model,\n            aum.device_memory,\n            aum.plan_name,\n            aum.credit_score,\n            aum.emailage_score,\n            mi.user_id_mix,\n            mi.email,\n            mi.rn_uid,\n            mi.utm_campaign,\n            mi.utm_content,\n            mi.utm_medium,\n            mi.utm_source,\n            mi.utm_term,\n            mi.event_at\n    from\n        all_uid_matches aum\n    left join\n        uid_not_found_utms mi\n        on aum.user_id_profile = mi.user_id_profile\n    where\n        aum.user_id_mix is null\n    ),\n\n    union_uid as (\n        select * from all_uid_matches where user_id_mix is not null\n    union distinct\n        select * from found_uid where user_id_mix is not null\n    ),\n\n    rn_mail as (\n    select\n        lki.*,\n        row_number() over (partition by lki.lead_email order by lki.lead_requested_at) as rn_mail\n    from\n        leads_key_info lki\n    left join\n        union_uid uid\n    on lki.invitation_id = uid.invitation_id\n    where\n        uid.invitation_id is null\n    ),\n\n    mixpanel_email_rank as (\n        select\n            user_id_mix,\n            email,\n            utm_campaign,\n            utm_content,\n            utm_medium,\n            utm_source,\n            utm_term,\n            event_at,\n            rn_uid,\n            row_number () over (partition by email order by event_at) as rn_email_mix\n        from\n            mixpanel_utm_info utm\n        right join\n            rn_mail rn\n        on\n            utm.email = rn.lead_email\n        where\n            lead_email is not null and rn_mail = 1\n    ),\n\n    email_sources as (\n        select\n            aum.invitation_id,\n            aum.user_id_profile,\n            aum.lead_email,\n            aum.cpf,\n            aum.situacao_cadastral_name,\n            aum.lead_requested_at,\n            aum.status,\n            aum.data_nascimento,\n            aum.sexo,\n            aum.rn_cpf,\n            aum.request_ip_city,\n            aum.request_ip_region,\n            aum.device_model,\n            aum.device_memory,\n            aum.plan_name,\n            aum.credit_score,\n            aum.emailage_score,\n            mi.user_id_mix,\n            mi.email,\n            mi.rn_uid,\n            mi.utm_campaign,\n            mi.utm_content,\n            mi.utm_medium,\n            mi.utm_source,\n            mi.utm_term,\n            mi.event_at\n        from\n            rn_mail aum\n        left join\n            mixpanel_email_rank mi\n            on\n            aum.lead_email = mi.email\n            and aum.rn_mail = mi.rn_email_mix\n    ),\n\n    final_union as (\n        select * from email_sources\n    Union all\n        select * from union_uid\n    ),\n\n    geo_home AS (\n        SELECT * FROM (\n            SELECT\n                user_id,\n                ROUND(latitude, 3) AS lat,\n                ROUND(longitude, 3) AS long,\n                row_number() OVER (partition BY user_id ORDER BY sum(seconds_to_next) DESC) AS rn,\n                sum(seconds_to_next) AS time_in_point\n            FROM (\n                SELECT\n                    latitude,\n                    longitude,\n                    user_id,\n                    device_timestamp_utc,\n                    activity_type,\n                    speed,\n                    COALESCE(date_diff('second', device_timestamp_utc, LEAD(device_timestamp_utc, 1)\n                        OVER (ORDER BY device_timestamp_utc)), 0) AS seconds_to_next\n                FROM raw.geolocation_full\n                ORDER BY seconds_to_next DESC\n            ) AS geo\n            WHERE seconds_to_next < 24 * 60 * 60\n            GROUP BY\n                user_id,\n                ROUND(latitude, 3),\n                ROUND(longitude, 3)\n        )\n        WHERE rn = 1\n    ),\n\n    geo_users AS (\n        SELECT\n            qcc.user_id,\n            qcc.state,\n            qcc.city,\n            qcc.bairro,\n            home.lat  AS home_latitude,\n            home.long AS home_longitude\n        FROM trusted.quotes_customer_contracts AS qcc\n        INNER JOIN geo_home home\n            ON qcc.user_id = home.user_id\n        GROUP BY\n            qcc.user_id,\n            qcc.state,\n            qcc.city,\n            qcc.bairro,\n            home.lat,\n            home.long\n    ),\n\n    geo_cities AS (\n       SELECT DISTINCT \"properties\".\"_city\" \"city\"\n       FROM\n         raw.mixpanel\n       WHERE ((\"properties\".\"_city\" IS NOT NULL) AND (\"properties\".\"_city\" <> ''))\n    ),\n\n    geography AS (\n       SELECT *\n       FROM\n         (\n          SELECT\n            \"city\"\n          , \"first_value\"(\"properties\".\"_region\") OVER (PARTITION BY \"city\" ORDER BY \"sum\"(1) DESC) \"state\"\n          , \"first_value\"(\"properties\".\"mp_country_code\") OVER (PARTITION BY \"city\" ORDER BY \"sum\"(1) DESC) \"country\"\n          FROM\n          (\n                geo_cities\n            INNER JOIN\n                raw.mixpanel\n            ON ((((\"properties\".\"_city\" = \"city\") AND (\"properties\".\"mp_country_code\" IS NOT NULL)) AND (\"properties\".\"_region\" IS NOT NULL)) AND (\"properties\".\"mp_country_code\" = 'BR'))\n          )\n          GROUP BY \"city\", \"properties\".\"_region\", \"properties\".\"mp_country_code\"\n       )\n       GROUP BY \"city\", \"state\", \"country\"\n    ),\n\n    geography_brazilian_cities as (\n        SELECT\n          \"wkt\"\n        , \"name\" \"city\"\n        , \"state\"\n        , \"country\"\n        FROM\n          (raw.brazilian_cities bc\n        LEFT JOIN geography geo ON (\"geo\".\"city\" = \"bc\".\"name\"))\n    ),\n\n    geocities AS (\n        SELECT\n            rsl.id AS lead_id,\n            users.user_id,\n            users.state AS ifaro_state,\n            users.city AS ifaro_city,\n            users.bairro AS ifaro_neighborhood,\n            users.home_latitude,\n            users.home_longitude,\n            REGEXP_REPLACE(\n                NORMALIZE(TRIM(LOWER(home_c.city)), NFD),\n                '[\\u0300-\\u036f]', '') AS geo_city,\n            home_c.state      AS geo_state,\n            home_c.country    AS geo_country,\n            request_ip_city   AS ip_city,\n            request_ip_region AS ip_state\n        FROM geo_users users\n        JOIN geography_brazilian_cities AS home_c\n            ON ST_Contains(ST_Polygon(home_c.wkt), ST_Point(home_longitude, home_latitude))\n        RIGHT JOIN raw.spreadsheets_leads AS rsl\n            ON rsl.member_id = users.user_id\n    ),\n\n    trusted_leads as (\n        select\n            invitation_id,\n            user_id_profile as User_id_ok,\n            lead_email,\n            situacao_cadastral_name, --COALESCE(situacao_cadastral_name, full_name, name) AS name,\n            cpf,\n            credit_score,\n            emailage_score,\n            sexo,\n            data_nascimento as birthdate,\n            DATE_DIFF('year', DATE_PARSE(data_nascimento, '%d/%m/%Y'), NOW()) AS age,\n            LOWER(COALESCE(geo_city, ifaro_city, ip_city, request_ip_city)) AS cidade,\n            LOWER(COALESCE(geo_state, ifaro_state, ip_state, request_ip_region)) AS estado,\n            LOWER(ifaro_neighborhood) AS bairro,\n            device_model,\n            device_memory,\n            plan_name,\n            utm_campaign,\n            utm_source,\n            utm_content,\n            utm_medium,\n            utm_term,\n            CASE\n                WHEN utm_medium = 'cpc' OR utm_medium = 'brand'  OR utm_medium = 'ocpm' OR utm_medium = 'bex' THEN 'Paid'\n                WHEN utm_medium = 'social' OR utm_medium = 'email' OR utm_medium = 'blog' THEN 'B&C'\n                WHEN utm_medium = 'referral' OR utm_source = 'referral' THEN 'Referral'\n                WHEN utm_medium IS NULL AND utm_source = 'pier_app' THEN 'Paid'\n                ELSE 'organic' END AS channel,\n                lead_requested_at AS requested_at,\n            status,\n            rn_cpf as rn\n        from\n            final_union fu\n        left join\n            geocities geo\n        on fu.user_id_profile = geo.user_id\n    )\n\n    select * from trusted_leads",
        "QueryExecutionContext": {},
        "QueryExecutionId": "4da29fc7-8141-4ef3-a1c8-9879b3116345",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/4da29fc7-8141-4ef3-a1c8-9879b3116345"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/4da29fc7-8141-4ef3-a1c8-9879b3116345-manifest.csv",
            "DataScannedInBytes": 49103235259,
            "EngineExecutionTimeInMillis": 246469,
            "QueryPlanningTimeInMillis": 6441,
            "QueryQueueTimeInMillis": 6413,
            "TotalExecutionTimeInMillis": 252793
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:12:14.515000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:01.722000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "WITH last_cycle AS (\n            SELECT\n                qcy.user_id,\n                COALESCE(qcy.time_of_claim, NOW()) AS last_active_time\n            FROM (\n                SELECT\n                    *,\n                    -- Invert cycle number to get the last cycle only\n                    ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY cycle_number DESC) AS inverted_cycle_number\n                FROM trusted.quotes_customer_cycles\n            ) qcy\n            WHERE inverted_cycle_number = 1\n        )\n\n        , device_changed AS (\n            SELECT\n                user_pier_id AS \"user_id\",\n                CAST(\"substr\"(CAST(\"from_unixtime\"(CAST(\"m\".\"event_properties\".\"time\" AS double)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) AS \"event_at\"\n            FROM trusted.mixpanel_general m\n            WHERE m.event = 'Device Changed'\n        )\n\n        , device_changed_last_3_days AS (\n            -- Over the last 3 days (before his claim, or before NOW()), how many times the user looked the terms?\n            SELECT\n                lc.user_id,\n                COUNT(dc.event_at) AS times_changed -- Count the non-null event_at\n            FROM last_cycle lc\n            LEFT JOIN device_changed dc\n                ON lc.user_id = dc.user_id\n            WHERE\n                dc.event_at IS NULL OR DATE_DIFF('day', lc.last_active_time, dc.event_at) < 3\n            GROUP BY lc.user_id\n        )\n\n        SELECT * FROM device_changed_last_3_days",
        "QueryExecutionContext": {},
        "QueryExecutionId": "006f254b-76e0-4aaa-aa1e-27b7eec7ea6c",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/006f254b-76e0-4aaa-aa1e-27b7eec7ea6c.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 2926550020,
            "EngineExecutionTimeInMillis": 62812,
            "QueryPlanningTimeInMillis": 1171,
            "QueryQueueTimeInMillis": 280,
            "TotalExecutionTimeInMillis": 63053
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:09:50.191000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:47.138000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"payment_cycles_1597507681_3321407\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/payment_cycles_1597507681_3321407'\n            ) as with first_contracts as (\n    select\n        user_id,\n        if(deductible_percentage = 0, 'premium', 'economic') as plan, ic.item_model,\n        cast(substr(cast(greatest(qsc.paired_at,qsc.created_at) AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as starts_at,\n        cast(substr(cast(suspended_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as ends_at,\n        suspend_reason, plan_visible_plan_id\n    from\n        raw.quotes_smartphone_contracts as qsc\n    left join\n        raw.quotes_insurance_certificates ic\n    on\n        qsc.id = ic.smartphone_contract_id\n    where\n        (suspend_reason <> 'never_activated' or suspend_reason is null)\n        and paired_at is not null\n        and ic.current = true\n),\n\npipe as (\n    select\n        row_number() over (partition by qsc.user_id, qsc.starts_at order by pip.starts_at desc) as rn,\n        qsc.*, pip.starts_at as begin_charge, pip.ends_at as end_charge,\n        pip.insured_value, pip.price_month as premium_value\n    from\n        first_contracts as qsc\n    join\n        raw.quotes_plan_internal_plans as pip\n    on pip.visible_plan_id = qsc.plan_visible_plan_id\n       and qsc.starts_at <= pip.ends_at and (pip.starts_at <= qsc.ends_at or qsc.ends_at is null)\n),\n\npayments as (\n    select\n        user_id,\n        plan,\n        item_model,\n        greatest(starts_at, begin_charge) as starts_at, if(rn = 1, ends_at, end_charge) as ends_at,\n        if(rn = 1, suspend_reason, 'tabela_pipe') as change_reason,\n        insured_value, premium_value\n    from pipe\n)\n\nselect\n    row_number() over (partition by user_id order by starts_at) as cycle_number,\n    *\nfrom\n    payments\norder by\n    user_id, starts_at",
        "QueryExecutionContext": {},
        "QueryExecutionId": "9ced23d9-8252-4edd-97e6-17838322be1e",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/9ced23d9-8252-4edd-97e6-17838322be1e"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/9ced23d9-8252-4edd-97e6-17838322be1e-manifest.csv",
            "DataScannedInBytes": 81740676,
            "EngineExecutionTimeInMillis": 5408,
            "QueryPlanningTimeInMillis": 744,
            "QueryQueueTimeInMillis": 37607,
            "TotalExecutionTimeInMillis": 42952
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:44.515000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:01.563000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"customer_contracts_1597507678_8797827\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/customer_contracts_1597507678_8797827'\n            ) as with contracts as (\n    select\n        sc.*,\n        dvc.device_type,\n        split(dvc.name, ' - Plano')[1] as device_name,\n        replace(replace(replace(replace(dvc.model_identifier_list, '{'), '}'),'\",\"',';'),'\"') as model_identifier_list,\n        ic.item_manufacturer,\n        ic.item_model,\n        pip.insured_value*100 as insured_value_cents,\n        pip.price_month*100 as premium_value_cents,\n        ic.certificate_uid,\n        ic.starts_at as certificate_starts_at,\n        pip.starts_at as plan_starts_at,\n        cast(substr(cast(ic.emitted_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as emitted_at,\n        coalesce(up.full_name_from_cpf, concat(up.first_name, ' ', up.last_name)) as customer_full_name,\n        up.cpf as customer_cpf_cnpj,\n        uu.email as customer_email,\n        row_number() over (partition by sc.user_id order by sc.created_at desc,ic.starts_at desc,pip.starts_at desc) as rn\n    from\n        raw.quotes_smartphone_contracts sc\n    left join (\n        select\n            row_number() over (partition by ic.id order by icc.starts_at) as rn_ic,\n            icc.*,\n            ic.smartphone_contract_id,\n            ic.certificate_uid,\n            ic.item_manufacturer,\n            ic.item_model,\n            ic.previous_certificate_uid\n        from\n            raw.quotes_insurance_certificates ic\n        left join\n            raw.quotes_insurance_certificate_cycles icc\n        on\n            icc.certificate_id = cast(ic.id as varchar(20))\n        where\n            ic.current = true\n        ) ic\n    on\n        sc.id = ic.smartphone_contract_id\n        and rn_ic = 1\n    left join\n        raw.quotes_plan_internal_plans pip\n    on\n        sc.plan_visible_plan_id = pip.visible_plan_id\n    left join\n    (\n        select\n            pvp.id,\n            pvp.name,\n            dvt.model_identifier_list,\n            dvt.name as device_type\n        from\n            raw.quotes_plan_visible_plans as pvp\n        left join\n            raw.quotes_plan_device_type_variations as dtv\n        on\n            dtv.id = pvp.device_type_variation_id\n        left join\n            raw.quotes_plan_device_types as dvt\n        on\n            dvt.id = dtv.device_type_id\n    ) as dvc\n    on\n        sc.plan_visible_plan_id = dvc.id\n    left join\n        raw.users_profiles up\n    on\n        sc.user_id = up.user_id\n    left join\n        raw.users_users uu\n    on\n        sc.user_id = uu.id\n    where\n        suspend_reason is null\n        or substr(suspend_reason, 1, 5) <> 'wrong'\n),\n\nlast_contract as (\n    select\n        user_id,\n        case\n            when certificate_uid is not null\n                 and emitted_at is not null\n                 and (suspend_reason is null\n                 or (suspend_reason <> 'claim' and suspend_reason <> 'claim_after_churn' and current_date < inactive_on)) then true\n            else\n                 false\n        end as active,\n        certificate_uid,\n        deductible_percentage,\n        device_type,\n        device_name,\n        insured_value_cents,\n        premium_value_cents,\n        item_manufacturer,\n        item_model,\n        model_identifier_list,\n        customer_cpf_cnpj,\n        customer_full_name,\n        customer_email,\n        suspend_reason,\n        cast(substr(cast(suspended_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as suspended_at,\n        inactive_on,\n        imei,\n        imei_secondary,\n        cast(substr(cast(created_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as current_contract_started_at\n    from\n        contracts\n    where\n        rn = 1\n),\n\nchurns as (\n    select\n        user_id,\n        suspend_reason as last_churn_reason,\n        cast(substr(cast(suspended_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as last_churn_at\n    from (\n        select\n            *,\n            row_number() over (partition by user_id order by created_at desc, plan_starts_at desc) as rn2\n        from\n            contracts\n        where\n            suspend_reason is not null\n            and substr(suspend_reason, 1, 6) <> 'change') a\n    where rn2 = 1\n),\n\nreactivations as (\n    select\n        user_id,\n        emitted_at as last_reactivation_at\n    from (\n        select\n            con.*,\n            row_number() over (partition by con.user_id order by con.emitted_at, con.plan_starts_at desc) as rn3\n        from\n            contracts con\n        join\n            churns chu\n        on\n            con.emitted_at > chu.last_churn_at\n            and con.user_id = chu.user_id) a\n    where\n        rn3 = 1\n),\n\nclaims as (\n    select\n        user_id,\n        cast(substr(cast(claimed_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as last_claimed_at,\n        insured_value_cents as last_claim_value\n    from (\n        select\n            con.* ,\n            row_number() over (partition by con.user_id order by con.claimed_at desc, con.plan_starts_at desc) as rn4\n        from\n            contracts con\n        where\n            claimed_at is not null ) a\n    where\n        rn4 = 1\n),\n\nfirst_contract as (\n    select\n        a.user_id,\n        cast(substr(cast(a.paid_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as paid_first_time_at,\n        cast(substr(cast(a.paired_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as paired_first_time_at,\n        cast(substr(cast(sl.requested_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as requested_invite_at,\n        cast(substr(cast(sl.invited_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as invited_at\n    from (\n        select\n            user_id,\n            min(paid_at) as paid_at,\n            min(paired_at) as paired_at\n        from\n            contracts\n        group by\n            user_id ) a\n    left join\n        (\n            select\n                member_id,\n                min(requested_at) requested_at,\n                min(invited_at) invited_at\n            from\n                raw.spreadsheets_leads\n            group by\n                member_id\n        ) sl\n    on\n        a.user_id = sl.member_id\n),\n\ninvitations as (\n    select\n        sender_id as user_id,\n        count(recipient_id) as invitations_sent,\n        count(approved_at) as invitations_sent_approved\n    from\n        raw.users_invitations\n    group by\n        sender_id\n),\n\nfriendships as (\n    select\n        user_id,\n        count(friend_id) as friends_in_base\n    from\n        raw.users_friendships\n    group by\n        user_id\n\n)\n\nselect\n    lc.*,\n    chu.last_churn_reason,\n    chu.last_churn_at,\n    se.score as emailage_score,\n    td.score as cpf_score,\n    if(element_at(pi.score_history, -1).datanascimento <> '', date_parse(element_at(pi.score_history, -1).datanascimento, '%d/%m/%Y'), null) as birthdate,\n    cast(if(element_at(pi.score_history, -1).idade <> '', replace(element_at(pi.score_history, -1).idade, ',', ''), null) as smallint) as age,\n    if(element_at(pi.score_history, -1).sexo <> '', element_at(pi.score_history, -1).sexo, null) as sex,\n    if(cardinality(element_at(pi.score_history, -1).enderecos) > 0,\n        if(element_at(element_at(pi.score_history, -1).enderecos, -1).uf <> '',\n        element_at(element_at(pi.score_history, -1).enderecos, -1).uf, null),null) as state,\n    if(cardinality(element_at(pi.score_history, -1).enderecos) > 0,\n        if(element_at(element_at(pi.score_history, -1).enderecos, -1).cidade <> '',\n        element_at(element_at(pi.score_history, -1).enderecos, -1).cidade, null),null) as city,\n    if(cardinality(element_at(pi.score_history, -1).enderecos) > 0,\n        if(element_at(element_at(pi.score_history, -1).enderecos, -1).bairro <> '',\n        element_at(element_at(pi.score_history, -1).enderecos, -1).bairro, null),null) as bairro,\n    fc.paid_first_time_at,\n    fc.paired_first_time_at,\n    fc.requested_invite_at,\n    fc.invited_at,\n    coalesce(inv.invitations_sent, 0) as invitations_sent,\n    coalesce(inv.invitations_sent_approved, 0) as invitations_sent_approved,\n    coalesce(fri.friends_in_base, 0) as friends_in_base,\n    rea.last_reactivation_at,\n    cla.last_claimed_at,\n    cla.last_claim_value\nfrom\n    last_contract lc\nleft join\n    raw.scores_score_emailage se\non\n    lc.customer_email = se.email\nleft join\n    raw.scores_score_transunion3d td\non\n    lc.customer_cpf_cnpj = td.cpf\nleft join\n    raw.scores_score_personalinformation pi\non\n    lc.customer_cpf_cnpj = pi.cpf\nleft join\n    churns as chu\non\n    lc.user_id = chu.user_id\nleft join\n    first_contract fc\non\n    lc.user_id = fc.user_id\nleft join\n    invitations inv\non\n    lc.user_id = inv.user_id\nleft join\n    friendships fri\non\n    lc.user_id = fri.user_id\nleft join\n    reactivations rea\non\n    lc.user_id = rea.user_id\nleft join\n    claims cla\non\n    lc.user_id = cla.user_id",
        "QueryExecutionContext": {},
        "QueryExecutionId": "06c978f1-0163-4ed3-909a-8c2e7d970f53",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/06c978f1-0163-4ed3-909a-8c2e7d970f53"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/06c978f1-0163-4ed3-909a-8c2e7d970f53-manifest.csv",
            "DataScannedInBytes": 2142879448,
            "EngineExecutionTimeInMillis": 16325,
            "QueryPlanningTimeInMillis": 7472,
            "QueryQueueTimeInMillis": 661,
            "TotalExecutionTimeInMillis": 16746
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:16.281000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:07:59.535000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"Custom SQL Query\".\"adgroup_name\" AS \"adgroup_name\",\n  \"Custom SQL Query\".\"campaign\" AS \"campaign\",\n  \"Custom SQL Query\".\"campaign_name\" AS \"campaign_name\",\n  \"Custom SQL Query\".\"canceled_at\" AS \"canceled_at\",\n  \"Custom SQL Query\".\"canceled_reason\" AS \"canceled_reason\",\n  \"Custom SQL Query\".\"canceled_remote_at\" AS \"canceled_remote_at\",\n  \"Custom SQL Query\".\"channel\" AS \"channel\",\n  \"Custom SQL Query\".\"city\" AS \"city\",\n  \"Custom SQL Query\".\"content\" AS \"content\",\n  \"Custom SQL Query\".\"contract_id\" AS \"contract_id\",\n  \"Custom SQL Query\".\"contract_state\" AS \"contract_state\",\n  \"Custom SQL Query\".\"creative_name\" AS \"creative_name\",\n  \"Custom SQL Query\".\"current_market_value_cents\" AS \"current_market_value_cents\",\n  \"Custom SQL Query\".\"device_manufacturer\" AS \"device_manufacturer\",\n  \"Custom SQL Query\".\"driver_birthdate\" AS \"driver_birthdate\",\n  \"Custom SQL Query\".\"driver_gender\" AS \"driver_gender\",\n  \"Custom SQL Query\".\"emitted_at\" AS \"emitted_at\",\n  \"Custom SQL Query\".\"emitted_remote_at\" AS \"emitted_remote_at\",\n  \"Custom SQL Query\".\"event\" AS \"event\",\n  \"Custom SQL Query\".\"event_at\" AS \"event_at\",\n  \"Custom SQL Query\".\"fabrication_year\" AS \"fabrication_year\",\n  \"Custom SQL Query\".\"full_name\" AS \"full_name\",\n  \"Custom SQL Query\".\"home_zipcode\" AS \"home_zipcode\",\n  \"Custom SQL Query\".\"initial_referrer\" AS \"initial_referrer\",\n  \"Custom SQL Query\".\"initial_referring_domain\" AS \"initial_referring_domain\",\n  \"Custom SQL Query\".\"installed_at\" AS \"installed_at\",\n  \"Custom SQL Query\".\"insured_value_cents\" AS \"insured_value_cents\",\n  \"Custom SQL Query\".\"license_plate\" AS \"license_plate\",\n  \"Custom SQL Query\".\"make\" AS \"make\",\n  \"Custom SQL Query\".\"medium\" AS \"medium\",\n  \"Custom SQL Query\".\"model\" AS \"model\",\n  \"Custom SQL Query\".\"model_year\" AS \"model_year\",\n  \"Custom SQL Query\".\"neighborhood\" AS \"neighborhood\",\n  \"Custom SQL Query\".\"network_name\" AS \"network_name\",\n  \"Custom SQL Query\".\"platform\" AS \"platform\",\n  \"Custom SQL Query\".\"premium_value_cents\" AS \"premium_value_cents\",\n  \"Custom SQL Query\".\"rank_by_event\" AS \"rank_by_event\",\n  \"Custom SQL Query\".\"rank_by_user\" AS \"rank_by_user\",\n  \"Custom SQL Query\".\"rank_by_user_desc\" AS \"rank_by_user_desc\",\n  \"Custom SQL Query\".\"signup_at\" AS \"signup_at\",\n  \"Custom SQL Query\".\"signup_event\" AS \"signup_event\",\n  \"Custom SQL Query\".\"source\" AS \"source\",\n  \"Custom SQL Query\".\"state\" AS \"state\",\n  \"Custom SQL Query\".\"term\" AS \"term\",\n  \"Custom SQL Query\".\"user_email\" AS \"user_email\",\n  \"Custom SQL Query\".\"user_id\" AS \"user_id\"\nFROM (\n  with initial as (\r\n      select\r\n          acon.user_id,\r\n          ev.publisher_id as contract_id,\r\n          adri.full_name,\r\n          ev.name as event, \r\n          ev.ts as event_at,\r\n          acon.state as contract_state,\r\n          lj.insured_value_cents,\r\n          lj.premium_value_cents,\r\n          lj.canceled_reason,\r\n          lj.canceled_at,\r\n          acer.make as make_acer,\r\n          acer.model as model_acer,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at,\r\n          user_email,\r\n          acon.quote_id as id_for_join,\r\n          row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\r\n          row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\r\n          row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\r\n      from\r\n          raw.quotes_events as ev\r\n      left join \r\n          raw.quotes_auto_contracts as acon\r\n      on\r\n          ev.publisher_id = acon.id\r\n      left join \r\n          raw.quotes_auto_certificates as acer \r\n      on \r\n          acon.id = acer.contract_id\r\n      left join \r\n          raw.quotes_auto_drivers as adri\r\n      on\r\n          acon.id = adri.contract_id\r\n      left join (\r\n          select\r\n              *\r\n          from (\r\n              select \r\n                  *, \r\n                  row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle \r\n              from  \r\n                  raw.quotes_auto_certificates as acer\r\n              left join\r\n                  raw.quotes_auto_certificate_cycles as acc         \r\n              on \r\n                  acer.id = acc.certificate_id ) \r\n          where \r\n              rn_cycle = 1) lj\r\n      on         \r\n       acon.id = lj.contract_id \r\n      where \r\n          NOT EXISTS (SELECT email as test_emails_count FROM trusted.pier_testers pt where pt.full_name = adri.full_name)\r\n          and user_email not like '%+test%' \r\n          and user_email not like '%tester%' \r\n          and user_email not like '%@pier.digital(opens in new tab)' \r\n      group by \r\n          user_id, \r\n          publisher_id, \r\n          full_name, \r\n          name, \r\n          ts, \r\n          acon.state, \r\n          insured_value_cents,\r\n          premium_value_cents, \r\n          lj.canceled_reason, \r\n          lj.canceled_at, \r\n          acer.make, \r\n          acer.model,\r\n          emitted_at, \r\n          user_email,\r\n          acon.quote_id,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at    \r\n      order by\r\n          contract_state asc,\r\n          user_id asc,\r\n          rank_by_user asc,\r\n          rank_by_event asc\r\n  ), \r\n  more_info as (\r\n      select \r\n          qaq.id as quote_id, \r\n          qaq.created_at,\r\n          driver_name, \r\n          license_plate, \r\n          qai.model,\r\n          name as make,\r\n          qai.model_year,\r\n          qai.fabrication_year,\r\n          qai.current_market_value_cents,\r\n          driver_gender, \r\n          driver_birthdate, \r\n          replace(home_zipcode, '-','') as home_zipcode,\r\n          row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\r\n      from \r\n          raw.quotes_auto_quotes qaq\r\n      left join \r\n          raw.quotes_auto_items qai\r\n      on \r\n          qaq.item_id = qai.id\r\n      left join\r\n          raw.quotes_auto_makes qam\r\n      on\r\n          qai.make_id = qam.id\r\n  ),\r\n  trusted_auto_final_join as (\r\n      select \r\n          *,\r\n          split(city, '/') as city_state_array\r\n      from \r\n          initial \r\n      left join \r\n          more_info\r\n          on initial.id_for_join = more_info.quote_id\r\n      left join \r\n          transient.cep_correio cep\r\n          on more_info.home_zipcode = cep.cep\r\n      order by event_at \r\n  ),\r\n  trusted_auto as (\r\n      select \r\n          user_id,\r\n          contract_id,\r\n          coalesce(full_name, driver_name) as full_name,\r\n          user_email,\r\n          event,\r\n          date_add('hour', -3, event_at) as event_at,\r\n          contract_state,\r\n          coalesce( make_acer, make) as make,\r\n          coalesce(model_acer, model) as model,\r\n          license_plate,\r\n          model_year,\r\n          fabrication_year,\r\n          insured_value_cents,\r\n          premium_value_cents,\r\n          current_market_value_cents,\r\n          driver_birthdate,\r\n          driver_gender,\r\n          home_zipcode,\r\n          trusted_auto_final_join.city_state_array[1] as city,\r\n          trusted_auto_final_join.city_state_array[2] as state,\r\n          neighborhood,\r\n          emitted_at,\r\n          emitted_remote_at,\r\n          canceled_at,\r\n          canceled_remote_at,\r\n          canceled_reason,\r\n          rank_by_event,\r\n          rank_by_user,\r\n          rank_by_user_desc\r\n      from \r\n          trusted_auto_final_join\r\n  ),\r\n  mp_quote_data as (\r\n      select \r\n          * \r\n      from \r\n          (select \r\n              user_distinct_id as id2,\r\n              event as signup_event,\r\n              user_pier_id as user_id, \r\n              coalesce(user_properties.email, event_properties.email) as email,\r\n              cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\r\n              event_properties.utm_campaign as utm_campaign,\r\n              event_properties.utm_source as utm_source,\r\n              event_properties.utm_content as utm_content,\r\n              event_properties.utm_medium as utm_medium,\r\n              event_properties.utm_term as utm_term,\r\n              event_properties.last_utm_source, \r\n              event_properties.last_utm_medium, \r\n              event_properties.last_utm_campaign, \r\n              event_properties.last_utm_content, \r\n              event_properties.last_utm_term,\r\n              event_properties.platform,\r\n              row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\r\n          from \r\n              trusted.mixpanel_general\r\n          where \r\n              event = 'UserSignup With Email Confirmed' \r\n              or event = 'UserSignup With email Confirmed'\r\n              or event = 'UserSignup With Facebook Confirmed'\r\n              or event = 'UserSignup With facebook Confirmed'\r\n              or event = '[Auto][APP] User SignUp With Email Button Clicked'\r\n          ) where rn = 1 \r\n  ), \r\n  web_sources as (\r\n      select \r\n          mqd.email,\r\n          mqd.user_id,\r\n          mqd.signup_event,\r\n          mqd.signup_at,\r\n          mqd.platform,\r\n          coalesce(last_utm_campaign, utm_campaign) as campaign,\r\n          coalesce(last_utm_source, utm_source) as source,\r\n          coalesce(last_utm_content, utm_content) as content,\r\n          coalesce(last_utm_medium, utm_medium) as medium,\r\n          coalesce(last_utm_term, utm_term) as term\r\n      from \r\n          mp_quote_data mqd\r\n  \r\n  ),\r\n  adjust_sources as (\r\n      select \r\n          ads.user_pier_id,\r\n          ads.network_name,\r\n          ads.campaign_name,\r\n          ads.adgroup_name,\r\n          ads.creative_name,\r\n          ads.device_manufacturer,\r\n          ads.installed_at\r\n      from \r\n          raw.vw_mixpanel_adjust_sources ads\r\n      where rn_uadid_asc = 1\r\n  ),\r\n  \r\n  final_sources_platform as (\r\n  select \r\n      ta.*,\r\n      case \r\n          when ws.platform is null AND qcc.user_id is not null then 'Cross Sell' \r\n          when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\r\n          else ws.platform END as platform,\r\n      ws.signup_event,\r\n      ws.signup_at,\r\n      ws.campaign,\r\n      ws.source,\r\n      ws.content,\r\n      ws.medium,\r\n      ws.term,\r\n      ads.network_name,\r\n      ads.campaign_name,\r\n      ads.adgroup_name,\r\n      ads.creative_name,\r\n      ads.device_manufacturer,\r\n      ads.installed_at\r\n  from \r\n      trusted_auto ta\r\n  left join \r\n      web_sources ws\r\n      on ta.user_id = ws.user_id\r\n      or ta.user_email = ws.email\r\n  left join \r\n      adjust_sources ads\r\n      on ta.user_id = ads.user_pier_id\r\n  left join\r\n      trusted.quotes_customer_contracts qcc  \r\n      on ta.user_id = qcc.user_id\r\n  ), \r\n  final_with_channels as (\r\n  select \r\n      *, \r\n           case \r\n          when platform = 'app' then 'App'\r\n          when platform =  'Cross Sell' then  'Cross Sell' \r\n          when medium = 'cpc' or medium = 'brand'  or medium = 'ocpm' or medium = 'bex' then 'Paid' \r\n          when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\r\n          when medium = 'referral' OR medium = 'referral' then 'Referral'\r\n          else 'organic' End as channel\r\n  from \r\n      final_sources_platform \r\n  ), \r\n  initial_referring_domain as (\r\n      select \r\n          * \r\n      from (\r\n          select \r\n              *,\r\n              row_number () over (partition by user_pier_id) as rn \r\n          from (\r\n              select \r\n                  distinct user_pier_id, \r\n                  user_distinct_id,\r\n                  event_properties._initial_referrer,\r\n                  event_properties._initial_referring_domain\r\n              from \r\n                  trusted.mixpanel_general\r\n              where\r\n                 event = 'Landing Page Screen Viewed' and\r\n                 user_pier_id is not null))\r\n      where rn = 1\r\n  ), \r\n  final_with_referrer as (\r\n  select \r\n      tae.*,\r\n      ird._initial_referrer as initial_referrer,\r\n      ird._initial_referring_domain as initial_referring_domain\r\n  from \r\n      final_with_channels as tae\r\n  left join \r\n      initial_referring_domain as ird\r\n  on tae.user_id = ird.user_pier_id\r\n  )\r\n  select * from final_with_referrer\n) \"Custom SQL Query\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "12edfe5c-e27e-47c2-8613-bff1468988e5",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/12edfe5c-e27e-47c2-8613-bff1468988e5.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 9107558375,
            "EngineExecutionTimeInMillis": 83922,
            "QueryPlanningTimeInMillis": 3695,
            "QueryQueueTimeInMillis": 305,
            "TotalExecutionTimeInMillis": 84156
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:38:15.960000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:36:51.804000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"quotes_customer_co\".\"active\" AS \"active\",\n  \"quotes_customer_co\".\"age\" AS \"age\",\n  \"quotes_customer_co\".\"bairro\" AS \"bairro\",\n  \"quotes_customer_co\".\"birthdate\" AS \"birthdate\",\n  \"quotes_customer_co\".\"certificate_uid\" AS \"certificate_uid\",\n  \"quotes_customer_co\".\"city\" AS \"city\",\n  \"quotes_customer_co\".\"cpf_score\" AS \"cpf_score\",\n  \"quotes_customer_co\".\"current_contract_started_at\" AS \"current_contract_started_at\",\n  \"quotes_customer_co\".\"customer_cpf_cnpj\" AS \"customer_cpf_cnpj\",\n  \"quotes_customer_co\".\"customer_email\" AS \"customer_email\",\n  \"quotes_customer_co\".\"customer_full_name\" AS \"customer_full_name\",\n  \"quotes_customer_co\".\"deductible_percentage\" AS \"deductible_percentage\",\n  \"quotes_customer_co\".\"device_name\" AS \"device_name\",\n  \"quotes_customer_co\".\"device_type\" AS \"device_type\",\n  \"quotes_customer_co\".\"emailage_score\" AS \"emailage_score\",\n  \"quotes_customer_co\".\"friends_in_base\" AS \"friends_in_base\",\n  \"quotes_customer_co\".\"imei\" AS \"imei\",\n  \"quotes_customer_co\".\"imei_secondary\" AS \"imei_secondary\",\n  \"quotes_customer_co\".\"inactive_on\" AS \"inactive_on\",\n  \"quotes_customer_co\".\"insured_value_cents\" AS \"insured_value_cents\",\n  \"quotes_customer_co\".\"invitations_sent\" AS \"invitations_sent\",\n  \"quotes_customer_co\".\"invitations_sent_approved\" AS \"invitations_sent_approved\",\n  \"quotes_customer_co\".\"invited_at\" AS \"invited_at\",\n  \"quotes_customer_co\".\"item_manufacturer\" AS \"item_manufacturer\",\n  \"quotes_customer_co\".\"item_model\" AS \"item_model\",\n  \"quotes_customer_co\".\"last_churn_at\" AS \"last_churn_at\",\n  \"quotes_customer_co\".\"last_churn_reason\" AS \"last_churn_reason\",\n  \"quotes_customer_co\".\"last_claim_value\" AS \"last_claim_value\",\n  \"quotes_customer_co\".\"last_claimed_at\" AS \"last_claimed_at\",\n  \"quotes_customer_co\".\"last_reactivation_at\" AS \"last_reactivation_at\",\n  \"quotes_customer_co\".\"model_identifier_list\" AS \"model_identifier_list\",\n  \"quotes_customer_co\".\"paid_first_time_at\" AS \"paid_first_time_at\",\n  \"quotes_customer_co\".\"paired_first_time_at\" AS \"paired_first_time_at\",\n  \"quotes_customer_co\".\"premium_value_cents\" AS \"premium_value_cents\",\n  \"quotes_customer_co\".\"requested_invite_at\" AS \"requested_invite_at\",\n  \"quotes_customer_co\".\"sex\" AS \"sex\",\n  \"quotes_customer_co\".\"state\" AS \"state\",\n  \"quotes_customer_co\".\"suspend_reason\" AS \"suspend_reason\",\n  \"quotes_customer_co\".\"suspended_at\" AS \"suspended_at\",\n  \"quotes_customer_co\".\"user_id\" AS \"user_id\"\nFROM \"trusted\".\"quotes_customer_contracts\" \"quotes_customer_co\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "659a899a-21be-4341-873d-456a9c1c9014",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/659a899a-21be-4341-873d-456a9c1c9014.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 9342812,
            "EngineExecutionTimeInMillis": 3237,
            "QueryPlanningTimeInMillis": 878,
            "QueryQueueTimeInMillis": 202,
            "TotalExecutionTimeInMillis": 3436
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:31:49.758000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:31:46.322000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  select\n      distinct qsc.user_id,\n      coalesce(up.full_name_from_cpf, concat(up.first_name, up.last_name)) as full_name, \n      up.cpf as cpf,\n      uu.email as email,\n      qpip.price_month as plan_price_month,\n      qsc.suspended_at as suspended_at,\n      qsc.suspend_reason as suspend_reason,\n      qicc.emitted_at as XXX,\n      qpcc.starts_on as starts_on,\n      qpcc.ends_on as ends_on,\n      qicc.premium_value_cents/100.0 as premium_value,\n      qicc.emitted_remote_at as emitted_remote_at,\n      qicc.starts_at as certificate_cycle_starts_at,\n      qicc.ends_at as certificate_cycle_ends_at,\n      qicc.canceled_locally_at as canceled_locally,\n      qicc.canceled_remote_at as canceled_remote_at,\n      qicc.premium_value_pro_rata_cents/100.0 as premium_value_pro_rata,\n      coalesce(day(pc.paid_at), qps.day_of_charge) as day_of_charge,\n      qpcc.invoiced_amount as cycle_value,\n      pc.paid_at as invoice_paid_at,\n      pi.created_at as created_at,\n      pi.id as invoice_id,\n      pi.status as invoice_status,\n      pi.amount as invoice_amount,\n      coalesce(pi.amount, 0) - qicc.premium_value_cents/100.0 + coalesce(qicc.premium_value_pro_rata_cents, 0)/100.0 as deficit\n  from\n      raw.quotes_smartphone_contracts qsc\n      \n  left join\n      raw.users_profiles up\n  on\n      qsc.user_id = up.user_id\n  left join\n      raw.users_users uu\n  on\n      qsc.user_id = uu.id\n      \n  left join\n      (\n          select\n              *,\n              case\n                  when starts_on = ends_on then date_add('month', 1, starts_on)\n                  else ends_on\n              end as fake_ends_on\n          from\n              raw.quotes_plan_contract_cycles\n      ) qpcc\n  on\n      qsc.id = qpcc.smartphone_contract_id\n      \n  left join\n      raw.quotes_plan_internal_plans qpip\n  on\n      qsc.plan_visible_plan_id = qpip.visible_plan_id\n      and date(qpip.starts_at) <= date(qpcc.starts_on)\n      and date(qpip.ends_at) >= date(qpcc.starts_on)\n      and date(qpip.ends_at) >= date('2019-01-01')\n      \n  left join\n      raw.pay_invoice_items pii\n  on\n      pii.id = qpcc.invoice_item_identifier\n      \n  \n  left join\n      raw.quotes_insurance_certificates qic\n  on\n      qsc.id = qic.smartphone_contract_id\n  left join\n      raw.quotes_insurance_certificate_cycles qicc\n  on\n      qic.id = cast(qicc.certificate_id as integer)\n      and date(qicc.emitted_at) >= date(qpcc.starts_on)\n      and date(qicc.emitted_at) < date(qpcc.fake_ends_on)\n      \n  left join\n      (\n      select\n          user_id,\n          day_of_charge,\n          date(created_at) as starts_at,\n          case\n              when lag(created_at) over (partition by user_id order by created_at desc) is null then date('2050-01-01')\n              else date(lag(created_at) over (partition by user_id order by created_at desc) - interval '1' day)\n          end as ends_at\n      from\n          raw.quotes_plan_subscriptions\n      ) qps\n  on\n      qsc.user_id = qps.user_id\n      and date(qps.starts_at) <= date(qpcc.starts_on)\n      and date(qps.ends_at) >= date(qpcc.starts_on)\n      \n  left join\n      raw.pay_charges pc\n  on\n      pii.invoice_id = pc.invoice_id\n      and pc.result = 'success'\n      \n  left join\n      raw.pay_invoices pi\n  on\n      pc.invoice_id = pi.id\n      \n  where\n      life_cycle_stage = 'contract'\n      and qsc.paired_at is not null\n  \n  order by\n      qsc.user_id,\n      starts_on,\n      ends_on\n) \"Custom SQL Query\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "26abf9ac-9816-470a-89bc-85e23cea5021",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/26abf9ac-9816-470a-89bc-85e23cea5021.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 1277,
            "QueryQueueTimeInMillis": 68,
            "ServiceProcessingTimeInMillis": 32,
            "TotalExecutionTimeInMillis": 1377
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:34.343000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:32.966000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "with wallet as\n        (select qpc.*,\n            qcy_min.first_activation,\n            time_of_activation,\n            coalesce(time_of_claim,time_of_out) as time_of_out,\n            out_reason,\n            churned,\n            claimed\n        from trusted.quotes_payment_cycles as qpc\n        left join trusted.quotes_customer_cycles as qcy on qpc.user_id = qcy.user_id\n        and starts_at >= time_of_activation\n        and ( starts_at <= time_of_out\n            or time_of_out is null)\n        left join\n            (select user_id,\n                min(time_of_activation) as first_activation\n            from trusted.quotes_customer_cycles\n            group by user_id) as qcy_min on qcy_min.user_id = qcy.user_id),\n        all_months as\n        (select reference_month,\n            max(months_after) as months_after_array\n        from\n            (select date_trunc('month', time_of_activation) as reference_month,\n                sequence(0, date_diff('month',time_of_activation,now())) as months_after\n            from trusted.quotes_customer_cycles as qcy\n            group by date_trunc('month', time_of_activation),\n                    date_diff('month',time_of_activation,now()))\n        group by reference_month\n        ),\n        cohort_grid as\n        (select m.reference_month,\n            t.months_after,\n            date_add('month',t.months_after,m.reference_month) as portifolio_month\n        from all_months as m\n        cross join unnest(m.months_after_array) as t (months_after)),\n        grid_fill as\n            (select cg.*,\n                count(distinct user_id) as actives,\n                count(distinct if(churned=1\n                                and time_of_out = ends_at\n                                and date_diff('month', first_activation, time_of_out) = cg.months_after,user_id,null)) as churns,\n                count(distinct if(claimed=1\n                                and time_of_out = ends_at\n                                and date_diff('month', first_activation, time_of_out) = cg.months_after,user_id,null)) as claims,\n                sum(if(claimed=1\n                    and time_of_out = ends_at\n                    and date_diff('month', first_activation, time_of_out) = cg.months_after,insured_value,0)) as claims_value,\n                avg(premium_value) as avg_ticket_value\n            from cohort_grid as cg\n            join wallet on date_trunc('month', first_activation) = cg.reference_month\n            and date_diff('month', first_activation, starts_at) <= cg.months_after\n            and (ends_at is null\n                or date_diff('month', first_activation, ends_at) >= cg.months_after)\n            group by\n                cg.reference_month,\n                cg.months_after,\n                cg.portifolio_month\n            order by\n                cg.reference_month desc, cg.months_after),\n        activations as\n            (select reference_month,\n                    actives as activations\n            from grid_fill\n            where months_after = 0),\n        upper_triangle_simple as\n            (select gf.reference_month,\n                    gf.months_after,\n                    gf.portifolio_month,\n                    gf.avg_ticket_value as avg_ticket_value,\n                    activations.activations,\n                    gf.claims_value/cast(0.9313*gf.avg_ticket_value*gf.actives as double) as obs_LR,\n                    gf.claims as obs_Claims,\n                    sum(gfs.claims_value)/cast(0.9313*sum(gfs.avg_ticket_value*gfs.actives) as double) as agg_LR,\n                    sum(gfs.claims)/cast(activations.activations as double) as agg_Frequency,\n                    (gf.actives-coalesce(gf.churns,0))/cast(activations.activations as double) AS Retention\n            from grid_fill as gf\n            left join activations on activations.reference_month = gf.reference_month\n            left join grid_fill as gfs on gf.reference_month = gfs.reference_month\n            and gf.months_after >= gfs.months_after\n            where gf.reference_month >= cast('2018-07-01' as date)\n                and gf.portifolio_month between cast('2018-11-01' as date) and date_add('month',-1, date_trunc('month',now()))\n            group by\n                gf.reference_month,\n                gf.months_after,\n                gf.portifolio_month,\n                gf.avg_ticket_value,\n                activations.activations,\n                gf.actives,\n                gf.churns,\n                gf.claims,\n                gf.claims_value\n            order by gf.reference_month desc,\n                gf.months_after),\n        upper_triangle as (\n            select up.*,\n                (coalesce(upb.Retention, 1) - up.Retention) / coalesce(upb.Retention, 1) as obs_Churn\n            from upper_triangle_simple as up\n            left join upper_triangle_simple as upb on upb.reference_month = up.reference_month\n            and up.months_after = upb.months_after + 1),\n        increments as (\n            select av2.months_after,\n                coalesce(avg(av2.agg_Frequency-av3.agg_Frequency), 0) as agg_F_sum,\n                coalesce(avg(av2.agg_LR-av3.agg_LR), 0) as agg_LR_sum,\n                coalesce(avg(av2.Retention-av1.Retention),1) as Retention_sum,\n                coalesce(avg(av2.obs_Claims-av3.obs_Claims),0) as obs_F_sum,\n                coalesce(avg(av2.obs_LR-av3.obs_LR),0) as obs_LR_sum,\n                coalesce(avg(av2.avg_ticket_value/cast(av3.avg_ticket_value as double)),1) as Ticket_inc\n            from upper_triangle as av2\n            left join upper_triangle as av1 on av2.months_after = av1.months_after + 1\n                and av1.reference_month = av2.reference_month\n            left join upper_triangle as av3 on av2.months_after = av3.months_after + 1\n                and av3.reference_month = av2.reference_month\n                and av3.portifolio_month between date_add('month',-3, date_trunc('month', date_trunc('month',now()))) and date_add('month',-2, date_trunc('month', date_trunc('month',now())))\n            group by av2.months_after),\n        ghost_months as (\n            select reference_month,\n                max(months_after) as months_after_array\n            from (\n                select date_trunc('month', time_of_activation) as reference_month,\n                    sequence(1 + date_diff('month',time_of_activation, date_trunc('month',now())), date_diff('month',cast('2018-07-01' as date), date_trunc('month',now()))) as months_after\n                from trusted.quotes_customer_cycles as qcy\n                where time_of_activation >= cast('2018-07-01' as date)\n                group by date_trunc('month', time_of_activation),\n                    date_diff('month',time_of_activation, date_trunc('month',now())))\n            group by reference_month),\n        ghost_grid as\n            (select m.reference_month,\n                t.months_after,\n                date_add('month',t.months_after,m.reference_month) as portifolio_month\n            from ghost_months as m\n            cross join unnest(m.months_after_array) as t (months_after)),\n        running_sum as (\n            select gd.reference_month,\n                gd.months_after,\n                gd.fm,\n                coalesce(SUM(inc.agg_F_sum),0) as agg_F_sum,\n                coalesce(SUM(inc.agg_LR_sum),0) as agg_LR_sum,\n                coalesce(SUM(inc.Retention_sum),0) as Retention_sum,\n                coalesce(SUM(inc.obs_F_sum),1) as obs_F_sum,\n                coalesce(SUM(inc.obs_LR_sum),1) as obs_LR_sum,\n                coalesce(exp(SUM(ln(inc.Ticket_inc))),1) as Ticket_inc\n            from\n                (select g1.reference_month,\n                        g1.months_after, min(g2.months_after) as fm\n                from ghost_grid as g1\n                join ghost_grid as g2 on g2.reference_month = g1.reference_month\n                group by g1.reference_month,g1.months_after) as gd\n            left join increments as inc on inc.months_after between gd.fm and gd.months_after\n            group by gd.reference_month,\n                    gd.months_after,\n                    gd.fm),\n        lower_triangle as (\n            select gd.*,\n                activations.activations,\n                NULL as agg_Frequency,\n                NULL as agg_LR,\n                NULL as Retention,\n                NULL as obs_Claims,\n                NULL as obs_LR,\n                NULL as avg_ticket_value,\n                NULL as obs_Churn\n            from ghost_grid as gd\n            left join upper_triangle as ut on ut.reference_month = gd.reference_month\n            and ut.portifolio_month = date_add('month',-1, date_trunc('month', date_trunc('month',now())))\n            left join running_sum as rp on rp.months_after = gd.months_after\n            and rp.reference_month = gd.reference_month\n            left join activations on activations.reference_month = gd.reference_month),\n        rectangle as (\n            (select cast(reference_month as date) as reference_month,\n                months_after,\n                portifolio_month,\n                activations,\n                agg_Frequency,\n                agg_LR,\n                Retention,\n                obs_Claims,\n                obs_LR,\n                avg_ticket_value,\n                obs_Churn,\n                'Upper' as triangle\n            from upper_triangle)\n        union (select cast(reference_month as date) as reference_month,\n                    months_after,\n                    portifolio_month,\n                    activations,\n                    agg_Frequency,\n                    agg_LR,\n                    Retention,\n                    obs_Claims,obs_LR,\n                    avg_ticket_value,\n                    obs_Churn,\n                    'Lower' as triangle\n                from lower_triangle))\n\n        select r1.*,\n            SUM(r2.activations*r2.Retention*0.9313*r2.avg_ticket_value)*(1-r1.agg_LR) as Margin\n        from rectangle as r1\n        left join rectangle as r2 on r1.reference_month = r2.reference_month\n        and r1.months_after >= r2.months_after\n        where r1.months_after <= date_diff('month', cast('2018-07-01' as date), date_trunc('month',now())) - 1\n        group by r1.reference_month,\n                r1.months_after,\n                r1.portifolio_month,\n                r1.activations,\n                r1.agg_Frequency,\n                r1.agg_LR,\n                r1.Retention,\n                r1.avg_ticket_value,\n                r1.obs_Claims,\n                r1.obs_LR,\n                r1.obs_Churn,\n                r1.triangle\n        order by r1.reference_month,\n                r1.months_after",
        "QueryExecutionContext": {},
        "QueryExecutionId": "b8de383e-6c3f-471b-874b-93269cc2fa23",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/b8de383e-6c3f-471b-874b-93269cc2fa23.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 332515721,
            "EngineExecutionTimeInMillis": 35960,
            "QueryPlanningTimeInMillis": 24791,
            "QueryQueueTimeInMillis": 324,
            "TotalExecutionTimeInMillis": 36202
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:20:13.199000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:19:36.997000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"Custom SQL Query\".\"XXX\" AS \"XXX\",\n  \"Custom SQL Query\".\"canceled_locally\" AS \"canceled_locally\",\n  \"Custom SQL Query\".\"canceled_remote_at\" AS \"canceled_remote_at\",\n  \"Custom SQL Query\".\"certificate_cycle_ends_at\" AS \"certificate_cycle_ends_at\",\n  \"Custom SQL Query\".\"certificate_cycle_starts_at\" AS \"certificate_cycle_starts_at\",\n  \"Custom SQL Query\".\"cpf\" AS \"cpf\",\n  \"Custom SQL Query\".\"created_at\" AS \"created_at\",\n  \"Custom SQL Query\".\"cycle_value\" AS \"cycle_value\",\n  \"Custom SQL Query\".\"day_of_charge\" AS \"day_of_charge\",\n  \"Custom SQL Query\".\"deficit\" AS \"deficit\",\n  \"Custom SQL Query\".\"email\" AS \"email\",\n  \"Custom SQL Query\".\"emitted_remote_at\" AS \"emitted_remote_at\",\n  \"Custom SQL Query\".\"ends_on\" AS \"ends_on\",\n  \"Custom SQL Query\".\"full_name\" AS \"full_name\",\n  \"Custom SQL Query\".\"invoice_amount\" AS \"invoice_amount\",\n  \"Custom SQL Query\".\"invoice_id\" AS \"invoice_id\",\n  \"Custom SQL Query\".\"invoice_paid_at\" AS \"invoice_paid_at\",\n  \"Custom SQL Query\".\"invoice_status\" AS \"invoice_status\",\n  \"Custom SQL Query\".\"plan_price_month\" AS \"plan_price_month\",\n  \"Custom SQL Query\".\"premium_value\" AS \"premium_value\",\n  \"Custom SQL Query\".\"premium_value_pro_rata\" AS \"premium_value_pro_rata\",\n  \"Custom SQL Query\".\"starts_on\" AS \"starts_on\",\n  \"Custom SQL Query\".\"suspend_reason\" AS \"suspend_reason\",\n  \"Custom SQL Query\".\"suspended_at\" AS \"suspended_at\",\n  \"Custom SQL Query\".\"user_id\" AS \"user_id\"\nFROM (\n  select\n      distinct qsc.user_id,\n      coalesce(up.full_name_from_cpf, concat(up.first_name, up.last_name)) as full_name, \n      up.cpf as cpf,\n      uu.email as email,\n      qpip.price_month as plan_price_month,\n      qsc.suspended_at as suspended_at,\n      qsc.suspend_reason as suspend_reason,\n      qicc.emitted_at as XXX,\n      qpcc.starts_on as starts_on,\n      qpcc.ends_on as ends_on,\n      qicc.premium_value_cents/100.0 as premium_value,\n      qicc.emitted_remote_at as emitted_remote_at,\n      qicc.starts_at as certificate_cycle_starts_at,\n      qicc.ends_at as certificate_cycle_ends_at,\n      qicc.canceled_locally_at as canceled_locally,\n      qicc.canceled_remote_at as canceled_remote_at,\n      qicc.premium_value_pro_rata_cents/100.0 as premium_value_pro_rata,\n      coalesce(day(pc.paid_at), qps.day_of_charge) as day_of_charge,\n      qpcc.invoiced_amount as cycle_value,\n      pc.paid_at as invoice_paid_at,\n      pi.created_at as created_at,\n      pi.id as invoice_id,\n      pi.status as invoice_status,\n      pi.amount as invoice_amount,\n      coalesce(pi.amount, 0) - qicc.premium_value_cents/100.0 + coalesce(qicc.premium_value_pro_rata_cents, 0)/100.0 as deficit\n  from\n      raw.quotes_smartphone_contracts qsc\n      \n  left join\n      raw.users_profiles up\n  on\n      qsc.user_id = up.user_id\n  left join\n      raw.users_users uu\n  on\n      qsc.user_id = uu.id\n      \n  left join\n      (\n          select\n              *,\n              case\n                  when starts_on = ends_on then date_add('month', 1, starts_on)\n                  else ends_on\n              end as fake_ends_on\n          from\n              raw.quotes_plan_contract_cycles\n      ) qpcc\n  on\n      qsc.id = qpcc.smartphone_contract_id\n      \n  left join\n      raw.quotes_plan_internal_plans qpip\n  on\n      qsc.plan_visible_plan_id = qpip.visible_plan_id\n      and date(qpip.starts_at) <= date(qpcc.starts_on)\n      and date(qpip.ends_at) >= date(qpcc.starts_on)\n      and date(qpip.ends_at) >= date('2019-01-01')\n      \n  left join\n      raw.pay_invoice_items pii\n  on\n      pii.id = qpcc.invoice_item_identifier\n      \n  \n  left join\n      raw.quotes_insurance_certificates qic\n  on\n      qsc.id = qic.smartphone_contract_id\n  left join\n      raw.quotes_insurance_certificate_cycles qicc\n  on\n      qic.id = cast(qicc.certificate_id as integer)\n      and date(qicc.emitted_at) >= date(qpcc.starts_on)\n      and date(qicc.emitted_at) < date(qpcc.fake_ends_on)\n      \n  left join\n      (\n      select\n          user_id,\n          day_of_charge,\n          date(created_at) as starts_at,\n          case\n              when lag(created_at) over (partition by user_id order by created_at desc) is null then date('2050-01-01')\n              else date(lag(created_at) over (partition by user_id order by created_at desc) - interval '1' day)\n          end as ends_at\n      from\n          raw.quotes_plan_subscriptions\n      ) qps\n  on\n      qsc.user_id = qps.user_id\n      and date(qps.starts_at) <= date(qpcc.starts_on)\n      and date(qps.ends_at) >= date(qpcc.starts_on)\n      \n  left join\n      raw.pay_charges pc\n  on\n      pii.invoice_id = pc.invoice_id\n      and pc.result = 'success'\n      \n  left join\n      raw.pay_invoices pi\n  on\n      pc.invoice_id = pi.id\n      \n  where\n      life_cycle_stage = 'contract'\n      and qsc.paired_at is not null\n  \n  order by\n      qsc.user_id,\n      starts_on,\n      ends_on\n) \"Custom SQL Query\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "a00fa523-a025-4f3c-93bf-a7d295943b4c",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/a00fa523-a025-4f3c-93bf-a7d295943b4c.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 819749432,
            "EngineExecutionTimeInMillis": 12342,
            "QueryPlanningTimeInMillis": 2675,
            "QueryQueueTimeInMillis": 259,
            "TotalExecutionTimeInMillis": 12559
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:47.295000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:34.736000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"auto_quotes_info_1597507679_3406317\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/auto_quotes_info_1597507679_3406317'\n            ) as with cep_correio_unique as (\n    select \n        *\n    from (\n        select\n            *,\n            substr(cep, 1, 5) as cep5,\n            row_number() over (partition by substr(replace(cep, '-', ''), 1, 5)) as rn\n        from \n            raw.cep2020_cep_tabela_integrada\n    )\n    where \n        rn = 1\n),\nquotes_incomplete as (\n    select\n        -- Datas\n        qaq.id,\n        qaq.created_at,\n        qaq.updated_at,\n        date_trunc('day', qaq.created_at) as trunc_day,\n        date_format(date_trunc('day', qaq.created_at), '%Y-%m-%d') as formatday_created_at,\n        \n        -- Infos estaticas\n        qaq.driver_identification,\n        qaq.driver_name,\n        qaq.proposed_premium_cents,\n        qaq.license_plate,\n        date_diff('year', qaq.driver_birthdate, qaq.created_at) as idade,\n        qaq.driver_gender as sexo,\n        driver_birthdate as birthdate,\n        qai.fipe_code,\n        qai.model_year,\n        susep_auto.grupo,\n        susep_auto.cod_grupo,\n        qai.current_market_value_cents / 100.0 as insured_value,\n        qai.model as model_name, \n        qam.name as maker,\n        replace(qaq.work_zipcode, '-', '') as cep,\n        cco.cidade || '/' || cco.uf as city,\n        cco.uf,\n        qaq.is_new,\n        qaq.is_modified,\n        qaq.is_auctioned,\n        qaq.waitlist_email,\n        \n        -- Maquina de estados\n        qaq.current_step,\n        split(replace(replace(refusal_reasons, '{', ''), '}', ''), ',')[1] as status, -- gambiarra master pra ter um status novamente\n        (case when (qaq.driver_identification is null or qaq.work_zipcode is null) then false else true end) as completed_quote,\n        \n        -- Variaveis heuristicas\n        (proposed_premium_cents = 0) as h_proposed_premium_iszero,\n        (case when (qaq.driver_gender is null or qaq.driver_birthdate is null) then true else false end) as h_fail_to_enrich_cpf,\n        (case when (qaq.driver_birthdate is not null and date_diff('year', qaq.driver_birthdate, qaq.created_at) >= 18) then false else true end) as h_not_legal_age,\n        \n        -- Nova lista de flags do backend\n        strpos(refusal_reasons, 'brand_new_car')       > 0 as rr_brand_new_car,\n        strpos(refusal_reasons, 'fail_to_enrich_cpf')  > 0 as rr_fail_to_enrich_cpf,\n        strpos(refusal_reasons, 'invalid_zipcode')     > 0 as rr_invalid_zipcode,\n        strpos(refusal_reasons, 'model_not_covered')   > 0 as rr_model_not_covered,\n        strpos(refusal_reasons, 'zipcode_not_covered') > 0 as rr_zipcode_not_covered,\n        refusal_reasons\n    \n    from \n        raw.quotes_auto_quotes qaq\n    left join \n            raw.quotes_auto_items qai\n            on qaq.item_id = qai.id\n    left join \n        raw.quotes_auto_makes qam\n        on qai.make_id = qam.id\n    left join \n        cep_correio_unique as cco\n        on cco.cep5 = substr(replace(qaq.work_zipcode, '-', ''), 1, 5)\n    left join \n        raw.susep_auto2_vei as susep_auto\n        on qai.fipe_code = susep_auto.codigo\n    where\n        qaq.created_at > cast('2020-03-16 18:00' as timestamp)\n),\n\nquotes_with_status as (\n    select \n        *,\n        case \n            when completed_quote then (\n                case \n                    when rr_brand_new_car then 'r1_brand_new_car'\n                    when (rr_fail_to_enrich_cpf or h_fail_to_enrich_cpf) then 'r2_fail_to_enrich_cpf'\n                    when h_not_legal_age then 'r3_not_legal_age'\n                    when rr_invalid_zipcode then 'r4_invalid_zipcode'\n                    when (rr_model_not_covered or h_proposed_premium_iszero) then 'r5_model_not_covered'\n                    when rr_zipcode_not_covered then 'r6_zipcode_not_covered'\n                    else 'approved'\n                end\n            ) \n            else (\n                case\n                    when cep is null then 'i1_cep_dropout'\n                    when driver_identification is null then 'i2_incomplete_cpf_dropout'\n                    else 'error'\n                end\n            )\n        end as status_funnel\n    from \n        quotes_incomplete\n),\n\nexclude as (\n    select \n        distinct id \n    from \n        quotes_with_status\n    where \n        driver_identification in (select key from raw.pier_tester_list where kind='cpf')\n)\n\nselect \n    -- Datas\n    id,\n    created_at,\n    updated_at,\n    trunc_day,\n    formatday_created_at,\n    \n    -- Infos estaticas\n    driver_identification,\n    driver_name,\n    proposed_premium_cents,\n    license_plate,\n    idade,\n    sexo,\n    birthdate,\n    fipe_code,\n    model_year,\n    grupo,\n    cod_grupo,\n    insured_value,\n    model_name, \n    maker,\n    cep,\n    city,\n    uf,\n    is_auctioned,\n    waitlist_email,\n    \n    -- status\n    completed_quote,\n    refusal_reasons,\n    status_funnel,\n    status_funnel='approved' as approved,\n    \n    -- Row_number para remover casos duplicados por CPF dentro de um mesmo dia\n    case\n        when driver_identification is null then 1\n        else row_number() over (  \n            partition by \n                trunc_day, \n                driver_identification \n            order by \n                status_funnel='approved' desc, \n                proposed_premium_cents desc, \n                created_at desc\n        ) end as rn_day\nfrom \n    quotes_with_status\nwhere \n    id not in (select * from exclude)\norder by \n    created_at",
        "QueryExecutionContext": {},
        "QueryExecutionId": "cab8c0f3-77f3-4239-97a3-6232393df610",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/cab8c0f3-77f3-4239-97a3-6232393df610"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/cab8c0f3-77f3-4239-97a3-6232393df610-manifest.csv",
            "DataScannedInBytes": 120189291,
            "EngineExecutionTimeInMillis": 7770,
            "QueryPlanningTimeInMillis": 2775,
            "QueryQueueTimeInMillis": 366,
            "TotalExecutionTimeInMillis": 8040
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:07.783000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:07:59.743000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "WITH last_cycle AS (\n            SELECT\n                qcy.user_id,\n                COALESCE(qcy.time_of_claim, NOW()) AS last_active_time\n            FROM (\n                SELECT\n                    *,\n                    -- Invert cycle number to get the last cycle only\n                    ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY cycle_number DESC) AS inverted_cycle_number\n                FROM trusted.quotes_customer_cycles\n            ) qcy\n            WHERE inverted_cycle_number = 1\n        )\n\n        , faq_viewed AS (\n            SELECT\n                user_pier_id AS \"user_id\",\n                CAST(\"substr\"(CAST(\"from_unixtime\"(CAST(\"m\".\"event_properties\".\"time\" AS double)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) AS \"event_at\"\n            FROM trusted.mixpanel_general m\n            WHERE m.event = 'FAQ Question Read'\n        )\n\n        , faq_viewed_last_3_days AS (\n            -- Over the last 3 days (before his claim, or before NOW()), how many times the user read the FAQ?\n            SELECT\n                lc.user_id,\n                COUNT(fv.event_at) AS faq_viewed -- Count the non-null event_at\n            FROM last_cycle lc\n            LEFT JOIN faq_viewed fv\n                ON lc.user_id = fv.user_id\n            WHERE\n                fv.event_at IS NULL OR DATE_DIFF('day', lc.last_active_time, fv.event_at) < 3\n            GROUP BY lc.user_id\n        )\n\n        SELECT * FROM faq_viewed_last_3_days",
        "QueryExecutionContext": {},
        "QueryExecutionId": "07a6ae94-5d3f-474f-850f-8532c9d2e604",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/07a6ae94-5d3f-474f-850f-8532c9d2e604.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 2926529050,
            "EngineExecutionTimeInMillis": 60570,
            "QueryPlanningTimeInMillis": 333,
            "QueryQueueTimeInMillis": 103,
            "ServiceProcessingTimeInMillis": 19,
            "TotalExecutionTimeInMillis": 60692
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:11:52.089000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:10:51.397000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table raw.\"full_1597510925_6984787\" with\n            (\n                format='parquet',\n                external_location='s3://pier-data-lake-raw-geolocation/full_1597510925_6984787'\n            ) as \n            select\n                user_id,\n                device_id,\n                cast(from_iso8601_timestamp(loc.timestamp) as timestamp) as device_timestamp_utc,\n                loc.coords.speed as speed,\n                loc.coords.latitude as latitude,\n                loc.coords.longitude as longitude,\n                loc.coords.floor as floor,\n                loc.coords.accuracy as accuracy,\n                loc.coords.altitude_accuracy as altitude_accuracy,\n                loc.coords.altitude as altitude,\n                loc.coords.heading as heading,\n                loc.is_moving as is_moving,\n                loc.odometer as odometer,\n                loc.uuid as event_uuid,\n                loc.activity.type as activity_type,\n                loc.activity.confidence as activity_confidence,\n                loc.battery.level as battery_level,\n                loc.battery.is_charging as battery_is_charging,\n                loc.extras\n            from\n                transient.geolocation\n            cross join\n                unnest(location) as t(loc)",
        "QueryExecutionContext": {},
        "QueryExecutionId": "aad00d9f-9137-4407-a6a2-dd41e3c9b79b",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/aad00d9f-9137-4407-a6a2-dd41e3c9b79b"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/aad00d9f-9137-4407-a6a2-dd41e3c9b79b-manifest.csv",
            "DataScannedInBytes": 27518933388,
            "EngineExecutionTimeInMillis": 30714,
            "QueryPlanningTimeInMillis": 1478,
            "QueryQueueTimeInMillis": 286,
            "TotalExecutionTimeInMillis": 30957
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 14:02:36.765000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 14:02:05.808000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"Consulta SQL personalizada\".\"app_install\" AS \"app_install\",\n  \"Consulta SQL personalizada\".\"auto_leads\" AS \"auto_leads\",\n  \"Consulta SQL personalizada\".\"auto_members\" AS \"auto_members\",\n  \"Consulta SQL personalizada\".\"cac_auto\" AS \"cac_auto\",\n  \"Consulta SQL personalizada\".\"cac_smartphone\" AS \"cac_smartphone\",\n  \"Consulta SQL personalizada\".\"campaign_name\" AS \"campaign_name\",\n  \"Consulta SQL personalizada\".\"campaign_state\" AS \"campaign_state\",\n  \"Consulta SQL personalizada\".\"clicks\" AS \"clicks\",\n  \"Consulta SQL personalizada\".\"cpc\" AS \"cpc\",\n  \"Consulta SQL personalizada\".\"cpi\" AS \"cpi\",\n  \"Consulta SQL personalizada\".\"cpm\" AS \"cpm\",\n  \"Consulta SQL personalizada\".\"cpv\" AS \"cpv\",\n  \"Consulta SQL personalizada\".\"ctr\" AS \"ctr\",\n  \"Consulta SQL personalizada\".\"day\" AS \"day\",\n  \"Consulta SQL personalizada\".\"impressions\" AS \"impressions\",\n  \"Consulta SQL personalizada\".\"kpi\" AS \"kpi\",\n  \"Consulta SQL personalizada\".\"lac_auto\" AS \"lac_auto\",\n  \"Consulta SQL personalizada\".\"lac_smartphone\" AS \"lac_smartphone\",\n  \"Consulta SQL personalizada\".\"lpvs\" AS \"lpvs\",\n  \"Consulta SQL personalizada\".\"objective\" AS \"objective\",\n  \"Consulta SQL personalizada\".\"product\" AS \"product\",\n  \"Consulta SQL personalizada\".\"reach\" AS \"reach\",\n  \"Consulta SQL personalizada\".\"smartphone_leads\" AS \"smartphone_leads\",\n  \"Consulta SQL personalizada\".\"smartphone_members\" AS \"smartphone_members\",\n  \"Consulta SQL personalizada\".\"source\" AS \"source\",\n  \"Consulta SQL personalizada\".\"spend\" AS \"spend\",\n  \"Consulta SQL personalizada\".\"views\" AS \"views\"\nFROM (\n  WITH facebook_ads_campaigns_insights AS(\n      SELECT \n          date_parse(date_start, '%Y-%m-%dT%H:%i:%sZ') as day,\n          date_start, -- acrescentando a coluna repetida s\u00f3 para dar UNION com google ads\n          date_parse(date_stop, '%Y-%m-%dT%H:%i:%sZ') as date_stop,\n          campaign_id,\n          campaign_name, \n          objective,\n          sum(reach) as reach,\n          cast(sum(impressions) as double) as impressions,\n          sum(reduce( filter(actions, x -> x.action_type = 'video_view'), 0.0, (s, x) -> s + cast(x.value as double), s -> s)) as views, -- filtra no array de actions tipos especificos\n          sum(clicks) as clicks,\n          sum(reduce( filter(actions, x -> x.action_type = 'omni_app_install'), 0.0, (s, x) -> s + cast(x.value as double), s -> s)) as app_install,\n          sum(spend) as spend\n      FROM(SELECT *,\n                  row_number() over (partition by campaign_id, adset_id, ad_id, date_start order by _sdc_received_at DESC) as rn\n          FROM raw.marketing_facebook_ads_insights)    \n      WHERE rn = 1\n      GROUP BY date_start, date_stop, campaign_id, campaign_name, objective\n  ),\n  \n  facebook_metrics AS(\n      SELECT *,\n          if(clicks <> 0.0, spend/clicks, 0.0) as cpc, -- try retorna double vazio\n          if(impressions <> 0.0, (spend/impressions) * 1000, 0.0) as cpm,\n          if(impressions <> 0.0, cast((clicks/impressions) * 100 as decimal(5, 2)), 0.0) as ctr,\n          if(app_install <> 0, spend/app_install, 0.0) as cpi,\n          if(views <> 0, spend/views, 0.0) as cpv\n      FROM facebook_ads_campaigns_insights\n  ),\n  \n  facebook_ads_campaigns AS(\n      SELECT\n              *\n      FROM(SELECT\n              id as campaign_id,\n              name as campaign,\n              effective_status,\n              row_number() over (partition by id order by updated_time DESC ) as rn\n          FROM raw.marketing_facebook_ads_campaigns)\n      WHERE rn = 1\n  ),\n  \n  gooogle_ads_campaigns_performance AS(\n      SELECT *,\n          row_number() over (partition by campaign, day order by _sdc_received_at DESC) as rn\n      FROM raw.marketing_google_ads_campaign_performance \n  ),\n  \n  google_filters AS (\n      SELECT \n          day,\n          campaignid,\n          campaign,\n          campaignstate,\n          startdate,\n          enddate,\n          network,\n          max(clicks) FILTER (WHERE  rn = 1) as first_part_clicks,\n          max(clicks) FILTER (WHERE  rn = 2) as second_part_clicks,\n          max(conversions) FILTER (WHERE  rn = 1) as first_part_conversions,\n          max(conversions) FILTER (WHERE  rn = 2) as second_part_conversions,\n          max(conversions) FILTER (WHERE  rn = 1 and campaign LIKE '%appinstall%') as first_part_installs, -- como n\u00e3o temos ainda nenhum exemplo de network p campanha de install, usamos o nome da campanha\n          max(conversions) FILTER (WHERE  rn = 2 and campaign LIKE '%appinstall%') as second_part_installs, -- como n\u00e3o temos ainda nenhum exemplo de network p campanha de install, usamos o nome da campanha\n          max(cost) FILTER (WHERE  rn = 1) as first_part_cost,\n          max(cost) FILTER (WHERE  rn = 2) as second_part_cost,\n          max(impressions) FILTER (WHERE  rn = 1) as first_part_impressions,\n          max(impressions) FILTER (WHERE  rn = 2) as second_part_impressions,\n          max(views) FILTER (WHERE  rn = 1) as first_part_views,\n          max(views) FILTER (WHERE  rn = 2) as second_part_views,\n          max(_sdc_received_at) FILTER (WHERE  rn = 1) as first_part_received,\n          max(_sdc_received_at) FILTER (WHERE  rn = 2) as second_part_received\n      FROM gooogle_ads_campaigns_performance\n      GROUP BY day, campaign, network, campaignid, campaignstate, startdate, enddate\n  ),\n  \n  google_metrics AS(\n     SELECT\n          *,\n          if(clicks <> 0.0, cost/clicks, 0.0) as cpc,\n          if(impressions <> 0.0, cost/(impressions/1000), 0.0) as cpm,\n          if(impressions <> 0.0, (clicks/impressions)*100, 0.0) as ctr,\n          if(app_install <> 0.0, cost/app_install, 0.0) as cpi,\n          if(views <> 0.0, cost/views, 0.0) as cpv\n     FROM(SELECT\n              date_parse(day, '%Y-%m-%dT%H:%i:%sZ') as day,\n              startdate,\n              date_parse(enddate, '%Y-%m-%dT%H:%i:%sZ') as enddate,\n              campaignid,\n              campaign,\n              network,\n              cast(first_part_impressions = null as double) as reach, -- google n\u00e3o tem alcance, acrescentando a coluna s\u00f3 para dar UNION\n              cast(if((first_part_impressions != second_part_impressions) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_impressions + second_part_impressions, first_part_impressions) as double) as impressions,\n              if((first_part_views != second_part_views) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_views + second_part_views, first_part_views) as views,\n              if((first_part_clicks != second_part_clicks) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_clicks + second_part_clicks, first_part_clicks) as clicks,\n              if((first_part_installs != second_part_installs) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_installs  + second_part_installs, first_part_installs) as app_install,\n              if((first_part_conversions != second_part_conversions) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_conversions + second_part_conversions, first_part_conversions) as conversions,\n              if((first_part_cost != second_part_cost) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), (first_part_cost+ second_part_cost)/1000000, (first_part_cost)/1000000) as cost,\n              campaignstate\n          FROM google_filters\n          )\n      GROUP BY day, campaign, clicks, conversions, cost, impressions, views, network, campaignstate, campaignid, startdate, enddate, reach, app_install\n  ),\n  \n  union_facebook_google AS (\n      SELECT \n          fm.*,\n          fac.effective_status as campaign_state,\n          case\n              when campaign_name like '%facebook-e-instagram%'\n              then 'facebook-e-instagram'\n              when (campaign_name like '%instagram%') and (campaign_name not like '%facebook%')\n              then 'instagram'\n              else 'facebook'\n          end as source\n      FROM facebook_metrics fm\n      JOIN facebook_ads_campaigns fac\n      ON fm.campaign_id = fac.campaign_id\n      UNION\n      SELECT \n          day,\n          startdate as date_start,\n          enddate as date_stop,\n          campaignid as campaign_id,\n          campaign as campaign_name,\n          network as objective,\n          reach,\n          impressions,\n          views,\n          clicks,\n          app_install,\n          cost as spend,\n          cpc,\n          cpm,\n          ctr,\n          cpi,\n          cpv,\n          campaignstate as campaign_state,\n          case\n              when network like '%Search%' OR campaign like '%search%'\n              then 'google-search'\n              when network like '%Display%' OR campaign like '%display%'\n              then 'google-display'\n              when network like '%ideo%' OR campaign like '%youtube%'\n              then 'youtube'\n              when campaign like '%install%' \n              then 'google-app'\n              else 'google'\n          end as source\n      FROM google_metrics\n  ),\n  \n  leads_members_auto AS(\n      SELECT \n          date_trunc('day', event_at) as day, \n          campaign,\n          source,\n          case \n              when event = 'created' then count(user_id) END as leads,\n          case\n              when event = 'approve_payment!' then count(user_id) END as members\n      FROM \n          trusted.quotes_auto_events \n      WHERE \n          event = 'created' \n          or event = 'approve_payment!'\n      GROUP BY \n          source, \n          campaign,\n          channel,\n          event_at,\n          event\n  ), \n  \n  auto_table AS (\n      SELECT \n          day,\n          campaign,\n          source,\n          'auto' as product,\n          max(leads) as leads,\n          max(members) as members\n      FROM \n          leads_members_auto\n      GROUP BY\n          day,\n          campaign,\n          source\n  ),\n  \n  smartphone_leads AS(\n      SELECT \n          date_trunc('day', requested_at) as day,\n          utm_campaign, \n          utm_source,\n          count(distinct user_id_ok) as leads\n      FROM \n          trusted.quotes_smartphone_leads \n      WHERE \n          rn = 1\n      GROUP BY \n          utm_campaign,\n          utm_source,\n          date_trunc('day', requested_at)\n  ),\n  \n  lrn AS(\n      SELECT \n          * \n      FROM \n          trusted.quotes_smartphone_leads \n      WHERE rn = 1\n  ),\n  \n  leads_and_events_smartphone AS(\n      SELECT \n          cev.*,\n          lrn.utm_campaign,\n          lrn.utm_source\n      FROM \n          trusted.quotes_customer_events as cev\n      left join\n          lrn\n      on \n          cev.user_id = lrn.user_id_ok\n  ), \n  \n  smartphone_members AS(\n      SELECT \n          date_trunc('day', event_at) as day,\n          utm_campaign,\n          utm_source,\n          count(user_id) as members\n      FROM \n          leads_and_events_smartphone\n      WHERE \n          event = 'Activation' and \n          rank_by_event = 1\n      GROUP BY\n          date_trunc('day', event_at),\n          utm_campaign,\n          utm_source\n  ),\n  \n  smartphone_leads_and_members AS(\n      SELECT \n          coalesce(sml.day, smm.day) as day,\n          coalesce(sml.utm_source, smm.utm_source) as source,\n          coalesce(sml.utm_campaign, smm.utm_campaign) as campaign,\n          'smartphone' as product,\n          leads, \n          members\n      FROM \n          smartphone_leads as sml\n      full join \n          smartphone_members as smm\n      on sml.day = smm.day\n      and sml.utm_source = smm.utm_source \n      and sml.utm_campaign = smm.utm_campaign\n  ),\n  \n  auto_and_smartphone AS(\n      SELECT \n          coalesce(sml.day, smm.day) as day,\n          if(coalesce(sml.source, smm.source) is not null, coalesce(sml.source, smm.source), 'other') as source,\n          coalesce(sml.campaign, smm.campaign) as campaign,\n          sml.product as smartphone,\n          smm.product as auto,\n          sml.leads as smartphone_leads,\n          smm.leads as auto_leads,\n          sml.members as smartphone_members,\n          smm.members as auto_members\n      FROM \n          smartphone_leads_and_members as sml\n      full join \n      auto_table as smm\n      on sml.day = smm.day\n      and sml.source = smm.source \n      and sml.campaign = smm.campaign\n  ),\n  \n  campaigns_auto_smartphone AS(\n      SELECT \n          coalesce(aas.day,ufb.day) as day,\n          case\n              when ((smartphone is not null) AND (auto is null)) OR (lower(substr(campaign_name, 1, 12)) like '%smartphone%')  OR (lower(substr(campaign, 1, 12)) like '%smartphone%')\n              then 'smartphone'\n              when ((smartphone is null) AND (auto is not null)) OR  (lower(substr(campaign_name, 1, 8)) like '%auto%') OR (lower(substr(campaign, 1, 8)) like '%auto%')\n              then 'auto'\n              else 'institucional' -- casos que caem aqui: n\u00e3o teve lead ou membro e o nome n\u00e3o diz se \u00e9 auto ou smartphone, teve lead ou membro de ambos produtos e nome n\u00e3o especifica\n          end as product,\n          coalesce(ufb.source,aas.source) as source,\n          coalesce(ufb.campaign_name,aas.campaign) as campaign_name,\n          objective,\n          campaign_state,\n          if(ufb.spend is not null, spend, 0.0) as spend, \n          smartphone_leads,\n          auto_leads,\n          smartphone_members,\n          auto_members,\n          reach,\n          impressions,\n          views,\n          clicks,\n          app_install,\n          cpc,\n          cpm,\n          ctr,\n          cpi,\n          cpv\n      FROM auto_and_smartphone aas\n      full join union_facebook_google ufb\n      on aas.day = ufb.day\n      and aas.campaign = ufb.campaign_name\n  ),\n  \n  campaigns_metrics AS(\n      SELECT *,\n          if(product = 'smartphone' and smartphone_leads <> 0.0, spend/smartphone_leads, 0.0) as lac_smartphone,\n          if(product = 'auto' and auto_leads <> 0.0, spend/auto_leads, 0.0) as lac_auto,\n          if(product = 'smartphone' and smartphone_members <> 0.0, spend/smartphone_members, 0.0) as cac_smartphone,\n          if(product = 'auto' and auto_members <> 0.0, spend/auto_members, 0.0) as cac_auto\n      FROM campaigns_auto_smartphone\n  ),\n  \n  lpv AS(\n      SELECT \n          date_trunc('day' , event_at) as day_lpv,\n          campaign_name,\n          source,\n          count(distinct_id) as lpvs\n      FROM (\n          SELECT\n              row_number() OVER (PARTITION BY properties.distinct_id, \n              date_trunc('day',cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP)) + interval '3' hour) as rn,\n              mix.properties.distinct_id,\n              event,\n              properties.last_utm_source as source,\n              properties.last_utm_campaign as campaign_name,\n              cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) + interval '3' hour as event_at\n          FROM    \n              raw.mixpanel mix\n          WHERE\n            event = 'Landing Page Screen Viewed' )\n      WHERE \n          rn = 1 \n      GROUP BY \n          date_trunc('day' , event_at),\n          campaign_name,\n          source\n  ),\n  \n  campaigns_lpv AS(\n      SELECT \n          cm.*,\n          lpv.lpvs,\n          CASE\n              WHEN (cm.campaign_name like '%lead%')\n              THEN 'lead'\n              WHEN (cm.campaign_name like '%install%')\n              THEN 'install'\n              WHEN (cm.campaign_name like '%conversao%')\n              THEN 'conversao'\n              WHEN (cm.campaign_name like '%trafego%')\n              THEN 'trafego'\n              WHEN (cm.campaign_name like '%visibilidade%')\n              THEN 'visibilidade'\n              WHEN (cm.campaign_name like '%view%')\n              THEN 'view'\n              ELSE 'other'\n          END as kpi\n      FROM  \n          campaigns_metrics cm\n      LEFT JOIN \n          lpv \n      on cm.day = lpv.day_lpv and\n          cm.source = lpv.source and\n          cm.campaign_name = lpv.campaign_name\n  )\n  \n  select *\n  from campaigns_lpv\n) \"Consulta SQL personalizada\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "6f11b2ff-4fad-4b23-925f-5ac1649dfab1",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/6f11b2ff-4fad-4b23-925f-5ac1649dfab1.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 8031518778,
            "EngineExecutionTimeInMillis": 24697,
            "QueryPlanningTimeInMillis": 2608,
            "QueryQueueTimeInMillis": 436,
            "TotalExecutionTimeInMillis": 25017
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 14:33:23.371000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 14:32:58.354000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"customer_cycles_1597507679_9333494\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/customer_cycles_1597507679_9333494'\n            ) as with first_contracts as (\n    select row_number() over (partition by user_id order by greatest(paired_at,created_at), suspended_at) as rn, user_id,\n        cast(substr(cast(greatest(paired_at,created_at) AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as time_of_activation,\n        cast(substr(cast(suspended_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as time_of_out,\n        cast(substr(cast(claimed_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as time_of_claim,\n        suspend_reason\n    from raw.quotes_smartphone_contracts\n    where (suspend_reason <> 'never_activated' or suspend_reason is null)\n    and paired_at is not null\n),\n\nchanged_contracts as (\n    select max(rn) as rn,\n    user_id, min(time_of_activation) as time_of_activation, max(time_of_out) as time_of_out\n    from (\n        select rn - row_number() over (partition by user_id order by time_of_activation) as rn1, *\n        from first_contracts\n        where suspend_reason like 'change%'\n    )\n    group by user_id, rn1\n),\n\ncycles as (\n    select f1.user_id, coalesce(f2.time_of_activation,f1.time_of_activation) as time_of_activation, f1.time_of_out,f1.time_of_claim, suspend_reason\n    from (select * from first_contracts\n    where suspend_reason not like 'change%' or suspend_reason is null) as f1\n    left join changed_contracts as f2\n    on f2.user_id = f1.user_id and f2.rn + 1 = f1.rn\n)\n\nselect\n    row_number() over (partition by user_id order by time_of_activation) as cycle_number,\n    user_id, time_of_activation, time_of_out,time_of_claim,\n    if(time_of_out is null, null, case\n        when suspend_reason = 'claim' then 'Claim'\n    else 'Churn' end) as out_reason, suspend_reason,\n    if(suspend_reason <> 'claim',1,0) as churned,\n    if(suspend_reason ='claim' or suspend_reason ='claim_after_churn' or (time_of_claim is not null and suspend_reason='churn'),1,0) as claimed\nfrom cycles",
        "QueryExecutionContext": {},
        "QueryExecutionId": "1ea2e228-ec2c-43df-bbf1-ede30ee09efa",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/1ea2e228-ec2c-43df-bbf1-ede30ee09efa"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/1ea2e228-ec2c-43df-bbf1-ede30ee09efa-manifest.csv",
            "DataScannedInBytes": 119495720,
            "EngineExecutionTimeInMillis": 5184,
            "QueryPlanningTimeInMillis": 722,
            "QueryQueueTimeInMillis": 5607,
            "TotalExecutionTimeInMillis": 10716
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:11.016000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:00.300000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  with initial as (\r\n      select\r\n          acon.user_id,\r\n          ev.publisher_id as contract_id,\r\n          adri.full_name,\r\n          ev.name as event, \r\n          ev.ts as event_at,\r\n          acon.state as contract_state,\r\n          lj.insured_value_cents,\r\n          lj.premium_value_cents,\r\n          lj.canceled_reason,\r\n          lj.canceled_at,\r\n          acer.make as make_acer,\r\n          acer.model as model_acer,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at,\r\n          user_email,\r\n          acon.quote_id as id_for_join,\r\n          row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\r\n          row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\r\n          row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\r\n      from\r\n          raw.quotes_events as ev\r\n      left join \r\n          raw.quotes_auto_contracts as acon\r\n      on\r\n          ev.publisher_id = acon.id\r\n      left join \r\n          raw.quotes_auto_certificates as acer \r\n      on \r\n          acon.id = acer.contract_id\r\n      left join \r\n          raw.quotes_auto_drivers as adri\r\n      on\r\n          acon.id = adri.contract_id\r\n      left join (\r\n          select\r\n              *\r\n          from (\r\n              select \r\n                  *, \r\n                  row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle \r\n              from  \r\n                  raw.quotes_auto_certificates as acer\r\n              left join\r\n                  raw.quotes_auto_certificate_cycles as acc         \r\n              on \r\n                  acer.id = acc.certificate_id ) \r\n          where \r\n              rn_cycle = 1) lj\r\n      on         \r\n       acon.id = lj.contract_id \r\n      where \r\n          NOT EXISTS (SELECT email as test_emails_count FROM trusted.pier_testers pt where pt.full_name = adri.full_name)\r\n          and user_email not like '%+test%' \r\n          and user_email not like '%tester%' \r\n          and user_email not like '%@pier.digital(opens in new tab)' \r\n      group by \r\n          user_id, \r\n          publisher_id, \r\n          full_name, \r\n          name, \r\n          ts, \r\n          acon.state, \r\n          insured_value_cents,\r\n          premium_value_cents, \r\n          lj.canceled_reason, \r\n          lj.canceled_at, \r\n          acer.make, \r\n          acer.model,\r\n          emitted_at, \r\n          user_email,\r\n          acon.quote_id,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at    \r\n      order by\r\n          contract_state asc,\r\n          user_id asc,\r\n          rank_by_user asc,\r\n          rank_by_event asc\r\n  ), \r\n  more_info as (\r\n      select \r\n          qaq.id as quote_id, \r\n          qaq.created_at,\r\n          driver_name, \r\n          license_plate, \r\n          qai.model,\r\n          name as make,\r\n          qai.model_year,\r\n          qai.fabrication_year,\r\n          qai.current_market_value_cents,\r\n          driver_gender, \r\n          driver_birthdate, \r\n          replace(home_zipcode, '-','') as home_zipcode,\r\n          row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\r\n      from \r\n          raw.quotes_auto_quotes qaq\r\n      left join \r\n          raw.quotes_auto_items qai\r\n      on \r\n          qaq.item_id = qai.id\r\n      left join\r\n          raw.quotes_auto_makes qam\r\n      on\r\n          qai.make_id = qam.id\r\n  ),\r\n  trusted_auto_final_join as (\r\n      select \r\n          *,\r\n          split(city, '/') as city_state_array\r\n      from \r\n          initial \r\n      left join \r\n          more_info\r\n          on initial.id_for_join = more_info.quote_id\r\n      left join \r\n          transient.cep_correio cep\r\n          on more_info.home_zipcode = cep.cep\r\n      order by event_at \r\n  ),\r\n  trusted_auto as (\r\n      select \r\n          user_id,\r\n          contract_id,\r\n          coalesce(full_name, driver_name) as full_name,\r\n          user_email,\r\n          event,\r\n          date_add('hour', -3, event_at) as event_at,\r\n          contract_state,\r\n          coalesce( make_acer, make) as make,\r\n          coalesce(model_acer, model) as model,\r\n          license_plate,\r\n          model_year,\r\n          fabrication_year,\r\n          insured_value_cents,\r\n          premium_value_cents,\r\n          current_market_value_cents,\r\n          driver_birthdate,\r\n          driver_gender,\r\n          home_zipcode,\r\n          trusted_auto_final_join.city_state_array[1] as city,\r\n          trusted_auto_final_join.city_state_array[2] as state,\r\n          neighborhood,\r\n          emitted_at,\r\n          emitted_remote_at,\r\n          canceled_at,\r\n          canceled_remote_at,\r\n          canceled_reason,\r\n          rank_by_event,\r\n          rank_by_user,\r\n          rank_by_user_desc\r\n      from \r\n          trusted_auto_final_join\r\n  ),\r\n  mp_quote_data as (\r\n      select \r\n          * \r\n      from \r\n          (select \r\n              user_distinct_id as id2,\r\n              event as signup_event,\r\n              user_pier_id as user_id, \r\n              coalesce(user_properties.email, event_properties.email) as email,\r\n              cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\r\n              event_properties.utm_campaign as utm_campaign,\r\n              event_properties.utm_source as utm_source,\r\n              event_properties.utm_content as utm_content,\r\n              event_properties.utm_medium as utm_medium,\r\n              event_properties.utm_term as utm_term,\r\n              event_properties.last_utm_source, \r\n              event_properties.last_utm_medium, \r\n              event_properties.last_utm_campaign, \r\n              event_properties.last_utm_content, \r\n              event_properties.last_utm_term,\r\n              event_properties.platform,\r\n              row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\r\n          from \r\n              trusted.mixpanel_general\r\n          where \r\n              event = 'UserSignup With Email Confirmed' \r\n              or event = 'UserSignup With email Confirmed'\r\n              or event = 'UserSignup With Facebook Confirmed'\r\n              or event = 'UserSignup With facebook Confirmed'\r\n              or event = '[Auto][APP] User SignUp With Email Button Clicked'\r\n          ) where rn = 1 \r\n  ), \r\n  web_sources as (\r\n      select \r\n          mqd.email,\r\n          mqd.user_id,\r\n          mqd.signup_event,\r\n          mqd.signup_at,\r\n          mqd.platform,\r\n          coalesce(last_utm_campaign, utm_campaign) as campaign,\r\n          coalesce(last_utm_source, utm_source) as source,\r\n          coalesce(last_utm_content, utm_content) as content,\r\n          coalesce(last_utm_medium, utm_medium) as medium,\r\n          coalesce(last_utm_term, utm_term) as term\r\n      from \r\n          mp_quote_data mqd\r\n  \r\n  ),\r\n  adjust_sources as (\r\n      select \r\n          ads.user_pier_id,\r\n          ads.network_name,\r\n          ads.campaign_name,\r\n          ads.adgroup_name,\r\n          ads.creative_name,\r\n          ads.device_manufacturer,\r\n          ads.installed_at\r\n      from \r\n          raw.vw_mixpanel_adjust_sources ads\r\n      where rn_uadid_asc = 1\r\n  ),\r\n  \r\n  final_sources_platform as (\r\n  select \r\n      ta.*,\r\n      case \r\n          when ws.platform is null AND qcc.user_id is not null then 'Cross Sell' \r\n          when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\r\n          else ws.platform END as platform,\r\n      ws.signup_event,\r\n      ws.signup_at,\r\n      ws.campaign,\r\n      ws.source,\r\n      ws.content,\r\n      ws.medium,\r\n      ws.term,\r\n      ads.network_name,\r\n      ads.campaign_name,\r\n      ads.adgroup_name,\r\n      ads.creative_name,\r\n      ads.device_manufacturer,\r\n      ads.installed_at\r\n  from \r\n      trusted_auto ta\r\n  left join \r\n      web_sources ws\r\n      on ta.user_id = ws.user_id\r\n      or ta.user_email = ws.email\r\n  left join \r\n      adjust_sources ads\r\n      on ta.user_id = ads.user_pier_id\r\n  left join\r\n      trusted.quotes_customer_contracts qcc  \r\n      on ta.user_id = qcc.user_id\r\n  ), \r\n  final_with_channels as (\r\n  select \r\n      *, \r\n           case \r\n          when platform = 'app' then 'App'\r\n          when platform =  'Cross Sell' then  'Cross Sell' \r\n          when medium = 'cpc' or medium = 'brand'  or medium = 'ocpm' or medium = 'bex' then 'Paid' \r\n          when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\r\n          when medium = 'referral' OR medium = 'referral' then 'Referral'\r\n          else 'organic' End as channel\r\n  from \r\n      final_sources_platform \r\n  ), \r\n  initial_referring_domain as (\r\n      select \r\n          * \r\n      from (\r\n          select \r\n              *,\r\n              row_number () over (partition by user_pier_id) as rn \r\n          from (\r\n              select \r\n                  distinct user_pier_id, \r\n                  user_distinct_id,\r\n                  event_properties._initial_referrer,\r\n                  event_properties._initial_referring_domain\r\n              from \r\n                  trusted.mixpanel_general\r\n              where\r\n                 event = 'Landing Page Screen Viewed' and\r\n                 user_pier_id is not null))\r\n      where rn = 1\r\n  ), \r\n  final_with_referrer as (\r\n  select \r\n      tae.*,\r\n      ird._initial_referrer as initial_referrer,\r\n      ird._initial_referring_domain as initial_referring_domain\r\n  from \r\n      final_with_channels as tae\r\n  left join \r\n      initial_referring_domain as ird\r\n  on tae.user_id = ird.user_pier_id\r\n  )\r\n  select * from final_with_referrer\n) \"Custom SQL Query\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "46324bb2-3c35-41bb-841e-bff5d2adf920",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/46324bb2-3c35-41bb-841e-bff5d2adf920.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 1498,
            "QueryQueueTimeInMillis": 63,
            "ServiceProcessingTimeInMillis": 31,
            "TotalExecutionTimeInMillis": 1592
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:33:13.675000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:33:12.083000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"Custom SQL Query\".\"adgroup_name\" AS \"adgroup_name\",\n  \"Custom SQL Query\".\"campaign\" AS \"campaign\",\n  \"Custom SQL Query\".\"campaign_name\" AS \"campaign_name\",\n  \"Custom SQL Query\".\"canceled_at\" AS \"canceled_at\",\n  \"Custom SQL Query\".\"canceled_reason\" AS \"canceled_reason\",\n  \"Custom SQL Query\".\"canceled_remote_at\" AS \"canceled_remote_at\",\n  \"Custom SQL Query\".\"channel\" AS \"channel\",\n  \"Custom SQL Query\".\"city\" AS \"city\",\n  \"Custom SQL Query\".\"content\" AS \"content\",\n  \"Custom SQL Query\".\"contract_id\" AS \"contract_id\",\n  \"Custom SQL Query\".\"contract_state\" AS \"contract_state\",\n  \"Custom SQL Query\".\"creative_name\" AS \"creative_name\",\n  \"Custom SQL Query\".\"current_market_value_cents\" AS \"current_market_value_cents\",\n  \"Custom SQL Query\".\"device_manufacturer\" AS \"device_manufacturer\",\n  \"Custom SQL Query\".\"driver_birthdate\" AS \"driver_birthdate\",\n  \"Custom SQL Query\".\"driver_gender\" AS \"driver_gender\",\n  \"Custom SQL Query\".\"emitted_at\" AS \"emitted_at\",\n  \"Custom SQL Query\".\"emitted_remote_at\" AS \"emitted_remote_at\",\n  \"Custom SQL Query\".\"event\" AS \"event\",\n  \"Custom SQL Query\".\"event_at\" AS \"event_at\",\n  \"Custom SQL Query\".\"fabrication_year\" AS \"fabrication_year\",\n  \"Custom SQL Query\".\"full_name\" AS \"full_name\",\n  \"Custom SQL Query\".\"home_zipcode\" AS \"home_zipcode\",\n  \"Custom SQL Query\".\"initial_referrer\" AS \"initial_referrer\",\n  \"Custom SQL Query\".\"initial_referring_domain\" AS \"initial_referring_domain\",\n  \"Custom SQL Query\".\"installed_at\" AS \"installed_at\",\n  \"Custom SQL Query\".\"insured_value_cents\" AS \"insured_value_cents\",\n  \"Custom SQL Query\".\"license_plate\" AS \"license_plate\",\n  \"Custom SQL Query\".\"make\" AS \"make\",\n  \"Custom SQL Query\".\"medium\" AS \"medium\",\n  \"Custom SQL Query\".\"model\" AS \"model\",\n  \"Custom SQL Query\".\"model_year\" AS \"model_year\",\n  \"Custom SQL Query\".\"neighborhood\" AS \"neighborhood\",\n  \"Custom SQL Query\".\"network_name\" AS \"network_name\",\n  \"Custom SQL Query\".\"platform\" AS \"platform\",\n  \"Custom SQL Query\".\"premium_value_cents\" AS \"premium_value_cents\",\n  \"Custom SQL Query\".\"rank_by_event\" AS \"rank_by_event\",\n  \"Custom SQL Query\".\"rank_by_user\" AS \"rank_by_user\",\n  \"Custom SQL Query\".\"rank_by_user_desc\" AS \"rank_by_user_desc\",\n  \"Custom SQL Query\".\"signup_at\" AS \"signup_at\",\n  \"Custom SQL Query\".\"signup_event\" AS \"signup_event\",\n  \"Custom SQL Query\".\"source\" AS \"source\",\n  \"Custom SQL Query\".\"state\" AS \"state\",\n  \"Custom SQL Query\".\"term\" AS \"term\",\n  \"Custom SQL Query\".\"user_email\" AS \"user_email\",\n  \"Custom SQL Query\".\"user_id\" AS \"user_id\"\nFROM (\n  with initial as (\r\n      select\r\n          acon.user_id,\r\n          ev.publisher_id as contract_id,\r\n          adri.full_name,\r\n          ev.name as event, \r\n          ev.ts as event_at,\r\n          acon.state as contract_state,\r\n          lj.insured_value_cents,\r\n          lj.premium_value_cents,\r\n          lj.canceled_reason,\r\n          lj.canceled_at,\r\n          acer.make as make_acer,\r\n          acer.model as model_acer,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at,\r\n          user_email,\r\n          acon.quote_id as id_for_join,\r\n          row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\r\n          row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\r\n          row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\r\n      from\r\n          raw.quotes_events as ev\r\n      left join \r\n          raw.quotes_auto_contracts as acon\r\n      on\r\n          ev.publisher_id = acon.id\r\n      left join \r\n          raw.quotes_auto_certificates as acer \r\n      on \r\n          acon.id = acer.contract_id\r\n      left join \r\n          raw.quotes_auto_drivers as adri\r\n      on\r\n          acon.id = adri.contract_id\r\n      left join (\r\n          select\r\n              *\r\n          from (\r\n              select \r\n                  *, \r\n                  row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle \r\n              from  \r\n                  raw.quotes_auto_certificates as acer\r\n              left join\r\n                  raw.quotes_auto_certificate_cycles as acc         \r\n              on \r\n                  acer.id = acc.certificate_id ) \r\n          where \r\n              rn_cycle = 1) lj\r\n      on         \r\n       acon.id = lj.contract_id \r\n      where \r\n          NOT EXISTS (SELECT email as test_emails_count FROM trusted.pier_testers pt where pt.full_name = adri.full_name)\r\n          and user_email not like '%+test%' \r\n          and user_email not like '%tester%' \r\n          and user_email not like '%@pier.digital(opens in new tab)' \r\n      group by \r\n          user_id, \r\n          publisher_id, \r\n          full_name, \r\n          name, \r\n          ts, \r\n          acon.state, \r\n          insured_value_cents,\r\n          premium_value_cents, \r\n          lj.canceled_reason, \r\n          lj.canceled_at, \r\n          acer.make, \r\n          acer.model,\r\n          emitted_at, \r\n          user_email,\r\n          acon.quote_id,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at    \r\n      order by\r\n          contract_state asc,\r\n          user_id asc,\r\n          rank_by_user asc,\r\n          rank_by_event asc\r\n  ), \r\n  more_info as (\r\n      select \r\n          qaq.id as quote_id, \r\n          qaq.created_at,\r\n          driver_name, \r\n          license_plate, \r\n          qai.model,\r\n          name as make,\r\n          qai.model_year,\r\n          qai.fabrication_year,\r\n          qai.current_market_value_cents,\r\n          driver_gender, \r\n          driver_birthdate, \r\n          replace(home_zipcode, '-','') as home_zipcode,\r\n          row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\r\n      from \r\n          raw.quotes_auto_quotes qaq\r\n      left join \r\n          raw.quotes_auto_items qai\r\n      on \r\n          qaq.item_id = qai.id\r\n      left join\r\n          raw.quotes_auto_makes qam\r\n      on\r\n          qai.make_id = qam.id\r\n  ),\r\n  trusted_auto_final_join as (\r\n      select \r\n          *,\r\n          split(city, '/') as city_state_array\r\n      from \r\n          initial \r\n      left join \r\n          more_info\r\n          on initial.id_for_join = more_info.quote_id\r\n      left join \r\n          transient.cep_correio cep\r\n          on more_info.home_zipcode = cep.cep\r\n      order by event_at \r\n  ),\r\n  trusted_auto as (\r\n      select \r\n          user_id,\r\n          contract_id,\r\n          coalesce(full_name, driver_name) as full_name,\r\n          user_email,\r\n          event,\r\n          date_add('hour', -3, event_at) as event_at,\r\n          contract_state,\r\n          coalesce( make_acer, make) as make,\r\n          coalesce(model_acer, model) as model,\r\n          license_plate,\r\n          model_year,\r\n          fabrication_year,\r\n          insured_value_cents,\r\n          premium_value_cents,\r\n          current_market_value_cents,\r\n          driver_birthdate,\r\n          driver_gender,\r\n          home_zipcode,\r\n          trusted_auto_final_join.city_state_array[1] as city,\r\n          trusted_auto_final_join.city_state_array[2] as state,\r\n          neighborhood,\r\n          emitted_at,\r\n          emitted_remote_at,\r\n          canceled_at,\r\n          canceled_remote_at,\r\n          canceled_reason,\r\n          rank_by_event,\r\n          rank_by_user,\r\n          rank_by_user_desc\r\n      from \r\n          trusted_auto_final_join\r\n  ),\r\n  mp_quote_data as (\r\n      select \r\n          * \r\n      from \r\n          (select \r\n              user_distinct_id as id2,\r\n              event as signup_event,\r\n              user_pier_id as user_id, \r\n              coalesce(user_properties.email, event_properties.email) as email,\r\n              cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\r\n              event_properties.utm_campaign as utm_campaign,\r\n              event_properties.utm_source as utm_source,\r\n              event_properties.utm_content as utm_content,\r\n              event_properties.utm_medium as utm_medium,\r\n              event_properties.utm_term as utm_term,\r\n              event_properties.last_utm_source, \r\n              event_properties.last_utm_medium, \r\n              event_properties.last_utm_campaign, \r\n              event_properties.last_utm_content, \r\n              event_properties.last_utm_term,\r\n              event_properties.platform,\r\n              row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\r\n          from \r\n              trusted.mixpanel_general\r\n          where \r\n              event = 'UserSignup With Email Confirmed' \r\n              or event = 'UserSignup With email Confirmed'\r\n              or event = 'UserSignup With Facebook Confirmed'\r\n              or event = 'UserSignup With facebook Confirmed'\r\n              or event = '[Auto][APP] User SignUp With Email Button Clicked'\r\n          ) where rn = 1 \r\n  ), \r\n  web_sources as (\r\n      select \r\n          mqd.email,\r\n          mqd.user_id,\r\n          mqd.signup_event,\r\n          mqd.signup_at,\r\n          mqd.platform,\r\n          coalesce(last_utm_campaign, utm_campaign) as campaign,\r\n          coalesce(last_utm_source, utm_source) as source,\r\n          coalesce(last_utm_content, utm_content) as content,\r\n          coalesce(last_utm_medium, utm_medium) as medium,\r\n          coalesce(last_utm_term, utm_term) as term\r\n      from \r\n          mp_quote_data mqd\r\n  \r\n  ),\r\n  adjust_sources as (\r\n      select \r\n          ads.user_pier_id,\r\n          ads.network_name,\r\n          ads.campaign_name,\r\n          ads.adgroup_name,\r\n          ads.creative_name,\r\n          ads.device_manufacturer,\r\n          ads.installed_at\r\n      from \r\n          raw.vw_mixpanel_adjust_sources ads\r\n      where rn_uadid_asc = 1\r\n  ),\r\n  \r\n  final_sources_platform as (\r\n  select \r\n      ta.*,\r\n      case \r\n          when ws.platform is null AND qcc.user_id is not null then 'Cross Sell' \r\n          when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\r\n          else ws.platform END as platform,\r\n      ws.signup_event,\r\n      ws.signup_at,\r\n      ws.campaign,\r\n      ws.source,\r\n      ws.content,\r\n      ws.medium,\r\n      ws.term,\r\n      ads.network_name,\r\n      ads.campaign_name,\r\n      ads.adgroup_name,\r\n      ads.creative_name,\r\n      ads.device_manufacturer,\r\n      ads.installed_at\r\n  from \r\n      trusted_auto ta\r\n  left join \r\n      web_sources ws\r\n      on ta.user_id = ws.user_id\r\n      or ta.user_email = ws.email\r\n  left join \r\n      adjust_sources ads\r\n      on ta.user_id = ads.user_pier_id\r\n  left join\r\n      trusted.quotes_customer_contracts qcc  \r\n      on ta.user_id = qcc.user_id\r\n  ), \r\n  final_with_channels as (\r\n  select \r\n      *, \r\n           case \r\n          when platform = 'app' then 'App'\r\n          when platform =  'Cross Sell' then  'Cross Sell' \r\n          when medium = 'cpc' or medium = 'brand'  or medium = 'ocpm' or medium = 'bex' then 'Paid' \r\n          when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\r\n          when medium = 'referral' OR medium = 'referral' then 'Referral'\r\n          else 'organic' End as channel\r\n  from \r\n      final_sources_platform \r\n  ), \r\n  initial_referring_domain as (\r\n      select \r\n          * \r\n      from (\r\n          select \r\n              *,\r\n              row_number () over (partition by user_pier_id) as rn \r\n          from (\r\n              select \r\n                  distinct user_pier_id, \r\n                  user_distinct_id,\r\n                  event_properties._initial_referrer,\r\n                  event_properties._initial_referring_domain\r\n              from \r\n                  trusted.mixpanel_general\r\n              where\r\n                 event = 'Landing Page Screen Viewed' and\r\n                 user_pier_id is not null))\r\n      where rn = 1\r\n  ), \r\n  final_with_referrer as (\r\n  select \r\n      tae.*,\r\n      ird._initial_referrer as initial_referrer,\r\n      ird._initial_referring_domain as initial_referring_domain\r\n  from \r\n      final_with_channels as tae\r\n  left join \r\n      initial_referring_domain as ird\r\n  on tae.user_id = ird.user_pier_id\r\n  )\r\n  select * from final_with_referrer\n) \"Custom SQL Query\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "5106aa87-ef7d-4638-a25e-cdf09a2ab8d5",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/5106aa87-ef7d-4638-a25e-cdf09a2ab8d5.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 9107502110,
            "EngineExecutionTimeInMillis": 85995,
            "QueryPlanningTimeInMillis": 4125,
            "QueryQueueTimeInMillis": 295,
            "TotalExecutionTimeInMillis": 86207
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 14:35:43.823000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 14:34:17.616000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"marketing_mailchimp_campaigns\".\"archive_url\" AS \"archive_url\",\n  \"marketing_mailchimp_campaigns\".\"authenticate\" AS \"authenticate\",\n  \"marketing_mailchimp_campaigns\".\"auto_footer\" AS \"auto_footer\",\n  \"marketing_mailchimp_campaigns\".\"auto_tweet\" AS \"auto_tweet\",\n  \"marketing_mailchimp_campaigns\".\"click_rate\" AS \"click_rate\",\n  \"marketing_mailchimp_campaigns\".\"clicks\" AS \"clicks\",\n  \"marketing_mailchimp_campaigns\".\"clicktale\" AS \"clicktale\",\n  \"marketing_mailchimp_campaigns\".\"content_type\" AS \"content_type\",\n  \"marketing_mailchimp_campaigns\".\"create_time\" AS \"create_time\",\n  \"marketing_mailchimp_campaigns\".\"delivery_status\" AS \"delivery_status\",\n  \"marketing_mailchimp_campaigns\".\"drag_and_drop\" AS \"drag_and_drop\",\n  \"marketing_mailchimp_campaigns\".\"ecomm360\" AS \"ecomm360\",\n  \"marketing_mailchimp_campaigns\".\"emails_sent\" AS \"emails_sent\",\n  \"marketing_mailchimp_campaigns\".\"fb_comments\" AS \"fb_comments\",\n  \"marketing_mailchimp_campaigns\".\"folder_id\" AS \"folder_id\",\n  \"marketing_mailchimp_campaigns\".\"from_name\" AS \"from_name\",\n  \"marketing_mailchimp_campaigns\".\"goal_tracking\" AS \"goal_tracking\",\n  \"marketing_mailchimp_campaigns\".\"google_analytics\" AS \"google_analytics\",\n  \"marketing_mailchimp_campaigns\".\"html_clicks\" AS \"html_clicks\",\n  \"marketing_mailchimp_campaigns\".\"id\" AS \"id\",\n  \"marketing_mailchimp_campaigns\".\"inline_css\" AS \"inline_css\",\n  \"marketing_mailchimp_campaigns\".\"long_archive_url\" AS \"long_archive_url\",\n  \"marketing_mailchimp_campaigns\".\"needs_block_refresh\" AS \"needs_block_refresh\",\n  \"marketing_mailchimp_campaigns\".\"open_rate\" AS \"open_rate\",\n  \"marketing_mailchimp_campaigns\".\"opens\" AS \"opens\",\n  \"marketing_mailchimp_campaigns\".\"preview_text\" AS \"preview_text\",\n  \"marketing_mailchimp_campaigns\".\"reply_to\" AS \"reply_to\",\n  \"marketing_mailchimp_campaigns\".\"resendable\" AS \"resendable\",\n  \"marketing_mailchimp_campaigns\".\"send_time\" AS \"send_time\",\n  \"marketing_mailchimp_campaigns\".\"status\" AS \"status\",\n  \"marketing_mailchimp_campaigns\".\"subject_line\" AS \"subject_line\",\n  \"marketing_mailchimp_campaigns\".\"subscriber_clicks\" AS \"subscriber_clicks\",\n  \"marketing_mailchimp_campaigns\".\"template_id\" AS \"template_id\",\n  \"marketing_mailchimp_campaigns\".\"text_clicks\" AS \"text_clicks\",\n  \"marketing_mailchimp_campaigns\".\"timewarp\" AS \"timewarp\",\n  \"marketing_mailchimp_campaigns\".\"title\" AS \"title\",\n  \"marketing_mailchimp_campaigns\".\"to_name\" AS \"to_name\",\n  \"marketing_mailchimp_campaigns\".\"total_opens\" AS \"total_opens\",\n  \"marketing_mailchimp_campaigns\".\"total_orders\" AS \"total_orders\",\n  \"marketing_mailchimp_campaigns\".\"total_revenue\" AS \"total_revenue\",\n  \"marketing_mailchimp_campaigns\".\"total_spent\" AS \"total_spent\",\n  \"marketing_mailchimp_campaigns\".\"type\" AS \"type\",\n  \"marketing_mailchimp_campaigns\".\"unique_opens\" AS \"unique_opens\",\n  \"marketing_mailchimp_campaigns\".\"use_conversation\" AS \"use_conversation\",\n  \"marketing_mailchimp_campaigns\".\"web_id\" AS \"web_id\"\nFROM \"trusted\".\"marketing_mailchimp_campaigns\" \"marketing_mailchimp_campaigns\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "634d5d8b-09c5-4251-8827-9684dd544849",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/634d5d8b-09c5-4251-8827-9684dd544849.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 43427,
            "EngineExecutionTimeInMillis": 1369,
            "QueryPlanningTimeInMillis": 706,
            "QueryQueueTimeInMillis": 335,
            "ServiceProcessingTimeInMillis": 10,
            "TotalExecutionTimeInMillis": 1714
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:33.429000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:31.715000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"customer contracts trusted\".\"active\" AS \"active\",\n  \"customer contracts trusted\".\"age\" AS \"age\",\n  \"customer contracts trusted\".\"bairro\" AS \"bairro\",\n  \"customer contracts trusted\".\"birthdate\" AS \"birthdate\",\n  \"customer contracts trusted\".\"certificate_uid\" AS \"certificate_uid\",\n  \"customer contracts trusted\".\"city\" AS \"city\",\n  \"customer contracts trusted\".\"cpf_score\" AS \"cpf_score\",\n  \"customer contracts trusted\".\"current_contract_started_at\" AS \"current_contract_started_at\",\n  \"customer contracts trusted\".\"customer_cpf_cnpj\" AS \"customer_cpf_cnpj\",\n  \"customer contracts trusted\".\"customer_email\" AS \"customer_email\",\n  \"customer contracts trusted\".\"customer_full_name\" AS \"customer_full_name\",\n  \"customer contracts trusted\".\"deductible_percentage\" AS \"deductible_percentage\",\n  \"customer contracts trusted\".\"device_name\" AS \"device_name\",\n  \"customer contracts trusted\".\"device_type\" AS \"device_type\",\n  \"customer contracts trusted\".\"emailage_score\" AS \"emailage_score\",\n  \"customer contracts trusted\".\"friends_in_base\" AS \"friends_in_base\",\n  \"customer contracts trusted\".\"imei\" AS \"imei\",\n  \"customer contracts trusted\".\"imei_secondary\" AS \"imei_secondary\",\n  \"customer contracts trusted\".\"inactive_on\" AS \"inactive_on\",\n  \"customer contracts trusted\".\"insured_value_cents\" AS \"insured_value_cents\",\n  \"customer contracts trusted\".\"invitations_sent\" AS \"invitations_sent\",\n  \"customer contracts trusted\".\"invitations_sent_approved\" AS \"invitations_sent_approved\",\n  \"customer contracts trusted\".\"invited_at\" AS \"invited_at\",\n  \"customer contracts trusted\".\"item_manufacturer\" AS \"item_manufacturer\",\n  \"customer contracts trusted\".\"item_model\" AS \"item_model\",\n  \"customer contracts trusted\".\"last_churn_at\" AS \"last_churn_at\",\n  \"customer contracts trusted\".\"last_churn_reason\" AS \"last_churn_reason\",\n  \"customer contracts trusted\".\"last_claim_value\" AS \"last_claim_value\",\n  \"customer contracts trusted\".\"last_claimed_at\" AS \"last_claimed_at\",\n  \"customer contracts trusted\".\"last_reactivation_at\" AS \"last_reactivation_at\",\n  \"customer contracts trusted\".\"model_identifier_list\" AS \"model_identifier_list\",\n  \"customer contracts trusted\".\"paid_first_time_at\" AS \"paid_first_time_at\",\n  \"customer contracts trusted\".\"paired_first_time_at\" AS \"paired_first_time_at\",\n  \"customer contracts trusted\".\"premium_value_cents\" AS \"premium_value_cents\",\n  \"customer contracts trusted\".\"requested_invite_at\" AS \"requested_invite_at\",\n  \"customer contracts trusted\".\"sex\" AS \"sex\",\n  \"customer contracts trusted\".\"state\" AS \"state\",\n  \"customer contracts trusted\".\"suspend_reason\" AS \"suspend_reason\",\n  \"customer contracts trusted\".\"suspended_at\" AS \"suspended_at\",\n  \"customer contracts trusted\".\"user_id\" AS \"user_id\"\nFROM (\n  select * from trusted.quotes_customer_contracts\n) \"customer contracts trusted\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "f22013af-f4b7-4fdf-b965-34d73c7e6759",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/f22013af-f4b7-4fdf-b965-34d73c7e6759.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 9342812,
            "EngineExecutionTimeInMillis": 2107,
            "QueryPlanningTimeInMillis": 202,
            "QueryQueueTimeInMillis": 109,
            "TotalExecutionTimeInMillis": 2212
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:31:52.073000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:31:49.861000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"Consulta SQL personalizada\".\"archive_url\" AS \"archive_url\",\n  \"Consulta SQL personalizada\".\"authenticate\" AS \"authenticate\",\n  \"Consulta SQL personalizada\".\"auto_footer\" AS \"auto_footer\",\n  \"Consulta SQL personalizada\".\"auto_tweet\" AS \"auto_tweet\",\n  \"Consulta SQL personalizada\".\"click_rate\" AS \"click_rate\",\n  \"Consulta SQL personalizada\".\"clicks\" AS \"clicks\",\n  \"Consulta SQL personalizada\".\"clicktale\" AS \"clicktale\",\n  \"Consulta SQL personalizada\".\"content_type\" AS \"content_type\",\n  \"Consulta SQL personalizada\".\"create_time\" AS \"create_time\",\n  \"Consulta SQL personalizada\".\"delivery_status\" AS \"delivery_status\",\n  \"Consulta SQL personalizada\".\"drag_and_drop\" AS \"drag_and_drop\",\n  \"Consulta SQL personalizada\".\"ecomm360\" AS \"ecomm360\",\n  \"Consulta SQL personalizada\".\"emails_sent\" AS \"emails_sent\",\n  \"Consulta SQL personalizada\".\"fb_comments\" AS \"fb_comments\",\n  \"Consulta SQL personalizada\".\"folder_id\" AS \"folder_id\",\n  \"Consulta SQL personalizada\".\"from_name\" AS \"from_name\",\n  \"Consulta SQL personalizada\".\"goal_tracking\" AS \"goal_tracking\",\n  \"Consulta SQL personalizada\".\"google_analytics\" AS \"google_analytics\",\n  \"Consulta SQL personalizada\".\"html_clicks\" AS \"html_clicks\",\n  \"Consulta SQL personalizada\".\"id\" AS \"id\",\n  \"Consulta SQL personalizada\".\"inline_css\" AS \"inline_css\",\n  \"Consulta SQL personalizada\".\"long_archive_url\" AS \"long_archive_url\",\n  \"Consulta SQL personalizada\".\"needs_block_refresh\" AS \"needs_block_refresh\",\n  \"Consulta SQL personalizada\".\"open_rate\" AS \"open_rate\",\n  \"Consulta SQL personalizada\".\"opens\" AS \"opens\",\n  \"Consulta SQL personalizada\".\"preview_text\" AS \"preview_text\",\n  \"Consulta SQL personalizada\".\"reply_to\" AS \"reply_to\",\n  \"Consulta SQL personalizada\".\"resendable\" AS \"resendable\",\n  \"Consulta SQL personalizada\".\"rn\" AS \"rn\",\n  \"Consulta SQL personalizada\".\"send_time\" AS \"send_time\",\n  \"Consulta SQL personalizada\".\"status\" AS \"status\",\n  \"Consulta SQL personalizada\".\"subject_line\" AS \"subject_line\",\n  \"Consulta SQL personalizada\".\"subscriber_clicks\" AS \"subscriber_clicks\",\n  \"Consulta SQL personalizada\".\"template_id\" AS \"template_id\",\n  \"Consulta SQL personalizada\".\"text_clicks\" AS \"text_clicks\",\n  \"Consulta SQL personalizada\".\"timewarp\" AS \"timewarp\",\n  \"Consulta SQL personalizada\".\"title\" AS \"title\",\n  \"Consulta SQL personalizada\".\"to_name\" AS \"to_name\",\n  \"Consulta SQL personalizada\".\"total_opens\" AS \"total_opens\",\n  \"Consulta SQL personalizada\".\"total_orders\" AS \"total_orders\",\n  \"Consulta SQL personalizada\".\"total_revenue\" AS \"total_revenue\",\n  \"Consulta SQL personalizada\".\"total_spent\" AS \"total_spent\",\n  \"Consulta SQL personalizada\".\"type\" AS \"type\",\n  \"Consulta SQL personalizada\".\"unique_opens\" AS \"unique_opens\",\n  \"Consulta SQL personalizada\".\"use_conversation\" AS \"use_conversation\",\n  \"Consulta SQL personalizada\".\"web_id\" AS \"web_id\"\nFROM (\n  SELECT *\r\n  FROM(SELECT  id, \r\n              status,\r\n              emails_sent,\r\n              date_parse(send_time, '%Y-%m-%dT%H:%i:%sZ') as send_time,\r\n              date_parse(create_time, '%Y-%m-%dT%H:%i:%sZ') as create_time,\r\n              settings.template_id AS template_id,\r\n              settings.fb_comments AS fb_comments,\r\n              settings.preview_text AS preview_text,\r\n              settings.authenticate AS authenticate,\r\n              settings.inline_css AS inline_css,\r\n              settings.folder_id AS folder_id,\r\n              settings.reply_to AS reply_to,\r\n              settings.subject_line AS subject_line,\r\n              settings.auto_footer AS auto_footer,\r\n              settings.timewarp AS timewarp,\r\n              settings.to_name AS to_name,\r\n              settings.title AS title,\r\n              settings.drag_and_drop AS drag_and_drop,\r\n              settings.auto_tweet AS auto_tweet,\r\n              settings.use_conversation AS use_conversation,\r\n              settings.from_name AS from_name,\r\n              report_summary.unique_opens AS unique_opens,\r\n              report_summary.ecommerce.total_revenue AS total_revenue,\r\n              report_summary.ecommerce.total_spent AS total_spent,\r\n              report_summary.ecommerce.total_orders AS total_orders,\r\n              report_summary.clicks AS clicks,\r\n              report_summary.subscriber_clicks AS subscriber_clicks,\r\n              report_summary.opens AS total_opens,\r\n              report_summary.open_rate AS open_rate,\r\n              report_summary.click_rate AS click_rate,\r\n              tracking.goal_tracking AS goal_tracking,\r\n              tracking.html_clicks AS html_clicks,\r\n              tracking.ecomm360 AS ecomm360,\r\n              tracking.clicktale AS clicktale,\r\n              tracking.opens AS opens,\r\n              tracking.google_analytics AS google_analytics,\r\n              tracking.text_clicks AS text_clicks,\r\n              resendable,\r\n              needs_block_refresh,\r\n              long_archive_url,\r\n              archive_url,\r\n              web_id,\r\n              type,\r\n              content_type,\r\n              delivery_status.enabled as delivery_status,\r\n              row_number() over (partition by id order by report_summary.open_rate desc) as rn\r\n      FROM raw.vendors_mailchimp_campaigns\r\n  )\r\n  WHERE rn = 1\n) \"Consulta SQL personalizada\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "cfa546df-a6ac-4e66-8d0c-8dc47d166607",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/cfa546df-a6ac-4e66-8d0c-8dc47d166607.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 36396072,
            "EngineExecutionTimeInMillis": 1657,
            "QueryPlanningTimeInMillis": 447,
            "QueryQueueTimeInMillis": 129,
            "TotalExecutionTimeInMillis": 1776
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:37.350000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:35.574000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "WITH last_cycle AS (\n            SELECT\n                qcy.user_id,\n                COALESCE(qcy.time_of_claim, NOW()) AS last_active_time\n            FROM (\n                SELECT\n                    *,\n                    -- Invert cycle number to get the last cycle only\n                    ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY cycle_number DESC) AS inverted_cycle_number\n                FROM trusted.quotes_customer_cycles\n            ) qcy\n            WHERE inverted_cycle_number = 1\n        )\n\n        , change_location AS (\n            SELECT\n                user_pier_id AS \"user_id\",\n                CAST(\"substr\"(CAST(\"from_unixtime\"(CAST(\"m\".\"event_properties\".\"time\" AS double)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) AS \"event_at\"\n            FROM trusted.mixpanel_general m\n            WHERE m.event = '[APP] Location Permission Changed'\n                AND event_properties.level = 'never'\n        )\n\n        , change_location_last_10_days AS (\n            -- Over the last 3 days (before his claim, or before NOW()), how many times the user read the FAQ?\n            SELECT\n                lc.user_id,\n                COUNT(cl.event_at) AS change_location\n            FROM last_cycle lc\n            LEFT JOIN change_location cl\n                ON lc.user_id = cl.user_id\n            WHERE\n                cl.event_at IS NULL OR DATE_DIFF('day', lc.last_active_time, cl.event_at) < 10\n            GROUP BY lc.user_id\n        )\n\n        SELECT * FROM change_location_last_10_days",
        "QueryExecutionContext": {},
        "QueryExecutionId": "21911f06-9991-4c29-be88-eaf832e179a2",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/21911f06-9991-4c29-be88-eaf832e179a2.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 2926550020,
            "EngineExecutionTimeInMillis": 61782,
            "QueryPlanningTimeInMillis": 272,
            "QueryQueueTimeInMillis": 114,
            "ServiceProcessingTimeInMillis": 9,
            "TotalExecutionTimeInMillis": 61905
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:12:54.424000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:11:52.519000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  With base as (\r\n  select\r\n      row_number() OVER (PARTITION BY properties.distinct_id,\r\n                                                  date_trunc('day',cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP))) as rn,\r\n      mix.properties.distinct_id,\r\n      event,\r\n      properties.product,\r\n      cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as event_at\r\n  from\r\n      raw.mixpanel mix\r\n  where\r\n      event = 'Landing Page Viewed' or\r\n      event = 'Landing Page Screen Viewed' \r\n  ),\r\n  \r\n  semi as (select \r\n      date_trunc('day', event_at) as day,\r\n      event,\r\n      product,\r\n      count(distinct_id) as LPVs\r\n  from \r\n      base\r\n  where rn = 1 \r\n  group by \r\n      date_trunc('day', event_at),\r\n      product,\r\n      event\r\n  ),\r\n  final as (\r\n  select \r\n      day,\r\n      case when event = 'Landing Page Screen Viewed'  and product = 'general' Then LPVs ELSe 0 END as Institucional,\r\n      case when event = 'Landing Page Screen Viewed'  and product = 'auto' Then LPVs else 0 end as Auto,\r\n      case when event = 'Landing Page Viewed'  Then LPVs else 0 end as Smartphone\r\n  from semi \r\n  order by day desc\r\n  )\r\n  select \r\n      day,\r\n      sum(Institucional) as Institucional,\r\n      sum(Auto) as Auto,\r\n      Sum(Smartphone) as Smartphone\r\n  from \r\n      final\r\n  group by day\n) \"unique lpvs\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "d502a536-f75e-4d41-98f1-66621e2a19b6",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/d502a536-f75e-4d41-98f1-66621e2a19b6.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 205,
            "QueryQueueTimeInMillis": 66,
            "ServiceProcessingTimeInMillis": 28,
            "TotalExecutionTimeInMillis": 299
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:31:52.485000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:31:52.186000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"facebook_name_1597507681_0702088\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-antifraud/facebook_name_1597507681_0702088'\n            ) as select\n    first_name as name,\n    last_name as last_name,\n    facebook_data.first_name as fb_name,\n    facebook_data.last_name as fb_last_name\nfrom\n    raw.spreadsheets_leads\nwhere\n    facebook_data.first_name is not null\nand\n    REGEXP_REPLACE(NORMALIZE(lower(split(first_name,' ')[1]), NFD), '[\\u0300-\\u036f]', '') != REGEXP_REPLACE(NORMALIZE(lower(split(facebook_data.first_name,' ')[1]), NFD), '[\\u0300-\\u036f]', '')",
        "QueryExecutionContext": {},
        "QueryExecutionId": "5e722eb7-f835-48bf-81f2-b25016d9c3db",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/5e722eb7-f835-48bf-81f2-b25016d9c3db"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/5e722eb7-f835-48bf-81f2-b25016d9c3db-manifest.csv",
            "DataScannedInBytes": 206202470,
            "EngineExecutionTimeInMillis": 5617,
            "QueryPlanningTimeInMillis": 1471,
            "QueryQueueTimeInMillis": 27599,
            "TotalExecutionTimeInMillis": 33104
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:34.475000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:01.371000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"quotes_smartphone_leads\".\"age\" AS \"age\",\n  \"quotes_smartphone_leads\".\"bairro\" AS \"bairro\",\n  \"quotes_smartphone_leads\".\"birthdate\" AS \"birthdate\",\n  \"quotes_smartphone_leads\".\"channel\" AS \"channel\",\n  \"quotes_smartphone_leads\".\"cidade\" AS \"cidade\",\n  \"quotes_smartphone_leads\".\"cpf\" AS \"cpf\",\n  \"quotes_smartphone_leads\".\"credit_score\" AS \"credit_score\",\n  \"quotes_smartphone_leads\".\"device_memory\" AS \"device_memory\",\n  \"quotes_smartphone_leads\".\"device_model\" AS \"device_model\",\n  \"quotes_smartphone_leads\".\"emailage_score\" AS \"emailage_score\",\n  \"quotes_smartphone_leads\".\"estado\" AS \"estado\",\n  \"quotes_smartphone_leads\".\"invitation_id\" AS \"invitation_id\",\n  \"quotes_smartphone_leads\".\"lead_email\" AS \"lead_email\",\n  \"quotes_smartphone_leads\".\"plan_name\" AS \"plan_name\",\n  \"quotes_smartphone_leads\".\"requested_at\" AS \"requested_at\",\n  \"quotes_smartphone_leads\".\"rn\" AS \"rn\",\n  \"quotes_smartphone_leads\".\"sexo\" AS \"sexo\",\n  \"quotes_smartphone_leads\".\"situacao_cadastral_name\" AS \"situacao_cadastral_name\",\n  \"quotes_smartphone_leads\".\"status\" AS \"status\",\n  \"quotes_smartphone_leads\".\"user_id_ok\" AS \"user_id_ok\",\n  \"quotes_smartphone_leads\".\"utm_campaign\" AS \"utm_campaign\",\n  \"quotes_smartphone_leads\".\"utm_content\" AS \"utm_content\",\n  \"quotes_smartphone_leads\".\"utm_medium\" AS \"utm_medium\",\n  \"quotes_smartphone_leads\".\"utm_source\" AS \"utm_source\",\n  \"quotes_smartphone_leads\".\"utm_term\" AS \"utm_term\"\nFROM \"trusted\".\"quotes_smartphone_leads\" \"quotes_smartphone_leads\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "5ba47dcb-a680-4a5c-879e-a8fc9a2637fa",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/5ba47dcb-a680-4a5c-879e-a8fc9a2637fa.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 12425625,
            "EngineExecutionTimeInMillis": 3224,
            "QueryPlanningTimeInMillis": 727,
            "QueryQueueTimeInMillis": 207,
            "TotalExecutionTimeInMillis": 3421
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 14:31:53.281000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 14:31:49.860000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "WITH last_cycle AS (\n            SELECT\n                qcy.user_id,\n                COALESCE(qcy.time_of_claim, NOW()) AS last_active_time\n            FROM (\n                SELECT\n                    *,\n                    -- Invert cycle number to get the last cycle only\n                    ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY cycle_number DESC) AS inverted_cycle_number\n                FROM trusted.quotes_customer_cycles\n            ) qcy\n            WHERE inverted_cycle_number = 1\n        )\n\n        , terms_viewed AS (\n            SELECT\n                user_pier_id AS \"user_id\",\n                CAST(\"substr\"(CAST(\"from_unixtime\"(CAST(\"m\".\"event_properties\".\"time\" AS double)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) AS \"event_at\"\n            FROM trusted.mixpanel_general m\n            WHERE m.event = '[APP] Terms Screen Viewed'\n        )\n\n        , terms_viewed_last_3_days AS (\n            -- Over the last 3 days (before his claim, or before NOW()), how many times the user looked the terms?\n            SELECT\n                lc.user_id,\n                COUNT(tv.event_at) AS terms_viewed -- Count the non-null event_at\n            FROM last_cycle lc\n            LEFT JOIN terms_viewed tv\n                ON lc.user_id = tv.user_id\n            WHERE\n                tv.event_at IS NULL OR DATE_DIFF('day', lc.last_active_time, tv.event_at) < 3\n            GROUP BY lc.user_id\n        )\n\n        SELECT * FROM terms_viewed_last_3_days",
        "QueryExecutionContext": {},
        "QueryExecutionId": "41a26d94-d5ed-4535-8f1a-8095ee83fe73",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/41a26d94-d5ed-4535-8f1a-8095ee83fe73.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 2926550020,
            "EngineExecutionTimeInMillis": 60318,
            "QueryPlanningTimeInMillis": 307,
            "QueryQueueTimeInMillis": 103,
            "ServiceProcessingTimeInMillis": 15,
            "TotalExecutionTimeInMillis": 60436
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:10:51.083000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:09:50.647000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table raw.\"full_1597507308_2359328\" with\n            (\n                format='parquet',\n                external_location='s3://pier-data-lake-raw-geolocation/full_1597507308_2359328'\n            ) as \n            select\n                user_id,\n                device_id,\n                cast(from_iso8601_timestamp(loc.timestamp) as timestamp) as device_timestamp_utc,\n                loc.coords.speed as speed,\n                loc.coords.latitude as latitude,\n                loc.coords.longitude as longitude,\n                loc.coords.floor as floor,\n                loc.coords.accuracy as accuracy,\n                loc.coords.altitude_accuracy as altitude_accuracy,\n                loc.coords.altitude as altitude,\n                loc.coords.heading as heading,\n                loc.is_moving as is_moving,\n                loc.odometer as odometer,\n                loc.uuid as event_uuid,\n                loc.activity.type as activity_type,\n                loc.activity.confidence as activity_confidence,\n                loc.battery.level as battery_level,\n                loc.battery.is_charging as battery_is_charging,\n                loc.extras\n            from\n                transient.geolocation\n            cross join\n                unnest(location) as t(loc)",
        "QueryExecutionContext": {},
        "QueryExecutionId": "630c36f7-a768-43ec-8295-23909064880a",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/630c36f7-a768-43ec-8295-23909064880a"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/630c36f7-a768-43ec-8295-23909064880a-manifest.csv",
            "DataScannedInBytes": 27505144616,
            "EngineExecutionTimeInMillis": 33674,
            "QueryPlanningTimeInMillis": 1738,
            "QueryQueueTimeInMillis": 2483,
            "TotalExecutionTimeInMillis": 36085
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:02:24.438000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:01:48.353000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"graph_nodes_1597507978_4608161\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-risk/graph_nodes_1597507978_4608161'\n            ) as WITH\ndeduplicated_qcc AS (\n    SELECT\n        *\n    FROM (\n            SELECT\n                *,\n                ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY user_id DESC) rn\n            FROM trusted.quotes_customer_contracts\n        )\n    WHERE\n        rn = 1\n),\n\ninfo AS (\n    SELECT\n        upf.user_id,\n        upper(full_name_from_cpf) AS name,\n        IF(deductible_percentage = 0, 'premium', 'economic') AS plan,\n        device_name,\n        insured_value_cents / 100 AS insured_value,\n        premium_value_cents / 100 AS premium_value,\n        suspend_reason,\n        date_format(suspended_at, '%d/%m/%y %T') AS suspended_at,\n        date_format(coalesce(last_reactivation_at,paired_first_time_at), '%d/%m/%y %T') AS last_activation,\n        inactive_on,\n        imei,\n        imei_secondary,\n        date_format(current_contract_started_at, '%d/%m/%y %T') AS current_contract_started_at,\n        last_churn_reason,\n        CAST(last_churn_at AS VARCHAR) AS last_churn_at,\n        emailage_score,\n        cpf_score / 1000 AS cpf_score,\n        CAST(birthdate AS VARCHAR) AS birthdate,\n        age,\n        sex,\n        state,\n        city,\n        bairro,\n        date_format(paid_first_time_at, '%d/%m/%y %T') AS paid_first_time_at,\n        date_format(paired_first_time_at, '%d/%m/%y %T') AS paired_first_time_at,\n        -- date_format(qcc.requested_invite_at, '%d/%m/%y %T') AS requested_invite_at,\n        -- TODO: Fix this bug in the quotes_customer_contracts\n        -- I am coalescing it with `paired_first_time_at` because `requested_invite_at` is NULL for the \"recently_active\" folks.\n        -- CAST(COALESCE(qcc.requested_invite_at, qcc.paired_first_time_at) AS VARCHAR) AS requested_invite_at,\n        CAST(qcc.requested_invite_at AS VARCHAR) AS requested_invite_at,\n        -- date_format(invited_at, '%d/%m/%y %T') AS invited_at,\n        CAST(invited_at AS VARCHAR) AS invited_at,\n        invitations_sent,\n        invitations_sent_approved,\n        friends_in_base,\n        date_format(last_reactivation_at, '%d/%m/%y %T') AS last_reactivation_at,\n        date_format(last_claimed_at, '%d/%m/%y %T') AS last_claimed_at,\n        last_claim_value / 100 AS last_claim_value,\n        COALESCE(last_reactivation_at, paired_first_time_at) AS time_of_activation,\n        last_claimed_at AS time_of_claim,\n        CASE \n            WHEN DATE_DIFF('day', COALESCE(last_reactivation_at,paired_first_time_at), last_claimed_at) BETWEEN 1 AND 30 then 'Fast Claimed'\n            WHEN not active AND (last_claimed_at is not null) then 'Claimed'\n            WHEN suspend_reason = 'suspect_fraud' then 'Suspect Fraud'\n            WHEN active AND (last_claimed_at is not null) then 'Claimed and Active'\n            WHEN active AND (last_churn_reason IN ('expired', 'defaulting_churn', 'churn')) then 'Churned and Active'\n            WHEN active AND date_diff('day', coalesce(last_reactivation_at, paired_first_time_at), NOW()) <= 30 then 'Recently Active'\n            WHEN active then 'Active'\n            WHEN paired_first_time_at IS NULL THEN 'Never Activated'\n            ELSE 'Churned'\n        END AS status\n    FROM raw.users_profiles AS upf\n    LEFT JOIN deduplicated_qcc AS qcc \n    ON qcc.user_id = upf.user_id\n),\n\nunique_reproved_leads AS (\n    -- TODO: Maybe we shouldn't remove the rn here. Instead, we could concatenate it with the id, and create multiple nodes for them.\n    SELECT invitation_id, lead_email, situacao_cadastral_name, sexo, credit_score, age, cpf, device_model, device_memory, plan_name, requested_at, estado, cidade, bairro FROM (\n        SELECT\n            invitation_id,\n            lead_email,\n            situacao_cadastral_name,\n            sexo,\n            credit_score,\n            age,\n            regexp_replace(cpf, '-|\\.') AS cpf,\n            device_model,\n            device_memory,\n            plan_name,\n            requested_at,\n            estado,\n            cidade,\n            bairro,\n            --  I want to get only the last time the user was reproved\n            -- TODO: understand what is going on with users that have multiple reproved status\n            ROW_NUMBER() OVER (PARTITION BY regexp_replace(cpf, '-|\\.') ORDER BY requested_at DESC) AS rn\n        FROM trusted.quotes_smartphone_leads\n        WHERE   status = 'reproved'\n            -- Remove the folks with bureau problems, but keep the NULL `age`\n            -- AND (age IS NULL OR age NOT LIKE '%,')\n     ) WHERE rn = 1\n),\n\nuw_info AS (\n    -- TODO: Add the mother name (from iFaro) to the approved leads\n    SELECT\n        sl.invitation_id,\n        sl.situacao_cadastral_name AS name,\n        element_at(ssp.score_history, -1).datanascimento AS ifaro_datanascimento,\n        sl.lead_email,\n        sl.cpf,\n        age AS age,\n        sse.score AS sse_eage_score,\n        sl.credit_score AS credit_score,\n        sl.estado AS state,\n        sl.cidade AS city,\n        sl.bairro AS bairro,\n        sl.sexo AS sex,\n        sl.device_model,\n        sl.device_memory AS memory,\n        sl.plan_name AS plan,\n        sl.requested_at\n    FROM unique_reproved_leads sl\n    LEFT JOIN raw.scores_score_personalinformation ssp\n        ON sl.cpf = ssp.cpf\n    -- TODO: Need to remove this after adding emailage to the trusted.quotes_smartphone_leads\n    LEFT JOIN raw.scores_score_emailage sse\n        ON sl.lead_email = sse.email\n),\n\nleads_reproved AS (\n    SELECT\n        invitation_id AS \"id\",\n        '00000000-0000-0000-0000-000000000000' AS user_id,\n        -- id AS user_id,\n        ui.name AS name,\n        ui.plan AS plan,\n        ui.device_model AS device_name, -- TODO Still need to concatenate this with the Memory\n        NULL AS insured_value, -- TODO\n        NULL AS premium_value, -- TODO\n        '-' AS suspend_reason,\n        '-' AS suspended_at,\n        '-' AS last_activation,\n        NULL AS inactive_on,\n        '-' AS imei,\n        '-' AS imei_secondary,\n        '-' AS current_contract_started_at,\n        '-' AS last_churn_reason,\n        '-' AS last_churn_at,\n        ui.sse_eage_score AS emailage_score,\n        ui.credit_score AS cpf_score,\n        ui.ifaro_datanascimento AS birthdate,\n        age AS age,\n        ui.sex AS sex,\n        ui.state AS state,\n        ui.city AS city,\n        ui.bairro AS bairro,\n        '-' AS paid_first_time_at,\n        '-' AS paired_first_time_at,\n        CAST(ui.requested_at AS VARCHAR) AS requested_invite_at,\n        '-' AS invited_at,\n        -1 AS invitations_sent,\n        -1 AS invitations_sent_approved,\n        NULL AS friends_in_base, -- TODO: compute this\n        '-' AS last_reactivation_at, -- TODO: maybe we should use this\n        '-' AS last_claimed_at,\n        -1 AS last_claim_value,\n        ui.requested_at AS time_of_activation, -- TODO check this\n        NULL AS time_of_claim,\n        'Reproved' AS status\n    FROM uw_info AS ui\n)\n\nSELECT\n    *,\n    CASE \n        WHEN status = 'Claimed' THEN 'red'\n        WHEN status = 'Suspect Fraud' THEN 'purple'\n        WHEN status = 'Fast Claimed' THEN 'magenta'\n        WHEN status = 'Claimed and Active' THEN 'orange'\n        WHEN status = 'Churned and Active' THEN 'blue'\n        WHEN status = 'Recently Active' THEN 'turquoise'\n        WHEN status = 'Active' THEN 'darkgreen'\n        WHEN status = 'Never Activated' THEN 'gray'\n        WHEN status = 'Reproved' THEN 'brown'\n        ELSE 'gold'\n    END AS color\nFROM (\n    (SELECT user_id AS id, * FROM info)\n    UNION\n    (SELECT * FROM leads_reproved)\n)\nORDER BY time_of_activation",
        "QueryExecutionContext": {},
        "QueryExecutionId": "d3e86c7a-c141-4ecb-8837-8b2013aa1046",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/d3e86c7a-c141-4ecb-8837-8b2013aa1046"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/d3e86c7a-c141-4ecb-8837-8b2013aa1046-manifest.csv",
            "DataScannedInBytes": 433033160,
            "EngineExecutionTimeInMillis": 8483,
            "QueryPlanningTimeInMillis": 2525,
            "QueryQueueTimeInMillis": 349,
            "TotalExecutionTimeInMillis": 8712
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:13:07.314000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:12:58.602000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "/* Username: Scheduled, Task ID: 793264b3-343e-4292-ba16-266d5623f5cf, Scheduled: True, Query Hash: 9082744235da1042fa3e0f3387ebd972, Queue: scheduled_queries, Query ID: 645 */ with user_charge as (\n    select\n        qsc.user_id as user_id,\n        qps.day_of_charge as day_of_charge,\n        piv.id as invoice_id,\n        piv.created_at as invoice_created_at,\n        max(piv.created_at) over(partition by qsc.user_id order by piv.created_at desc) as last_invoice_created_at,\n        --last_invoice_created_at = MAX(piv.created_at),\n        piv.status as status,\n        qsc.life_cycle_stage,\n        qsc.inactive_on\n    from\n        raw.quotes_smartphone_contracts as qsc\n    left join\n        raw.quotes_plan_subscriptions as qps\n    on\n        qsc.user_id = qps.user_id\n    left join\n        raw.pay_subscriptions as pss\n    on\n        qps.user_id = pss.user_id\n    left join\n        raw.pay_invoices as piv\n    on\n        pss.id = piv.subscription_id\n    where\n        qps.day_of_charge = day(current_date - interval '1' day)                     and\n        qsc.life_cycle_stage = 'contract'                                            and\n        (qsc.inactive_on is null OR qsc.inactive_on > (current_date - interval '1' day))\n    ),\nlast_update_user_charge as (\n    select\n        *\n    from\n        user_charge\n    where\n        last_invoice_created_at = invoice_created_at\n)\n\nselect\n    count(user_id) as users_with_no_invoice\nfrom\n    last_update_user_charge\nwhere\n    date(last_invoice_created_at) < current_date - interval '1' day and\n    (status <> 'paid' and status <> 'cancelled_by_low_amount')",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "8fa7d090-c2bb-4840-8679-0885281be0ad",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/8fa7d090-c2bb-4840-8679-0885281be0ad.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 173109410,
            "EngineExecutionTimeInMillis": 4916,
            "QueryPlanningTimeInMillis": 1980,
            "QueryQueueTimeInMillis": 278,
            "TotalExecutionTimeInMillis": 5116
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:01:01.598000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:00:56.482000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "with wallet as\n        (select qpc.*,\n            qcy_min.first_activation,\n            time_of_activation,\n            coalesce(time_of_claim,time_of_out) as time_of_out,\n            out_reason,\n            churned,\n            claimed\n        from trusted.quotes_payment_cycles as qpc\n        left join trusted.quotes_customer_cycles as qcy on qpc.user_id = qcy.user_id\n        and starts_at >= time_of_activation\n        and ( starts_at <= time_of_out\n            or time_of_out is null)\n        left join\n            (select user_id,\n                min(time_of_activation) as first_activation\n            from trusted.quotes_customer_cycles\n            group by user_id) as qcy_min on qcy_min.user_id = qcy.user_id),\n        all_months as\n        (select reference_month,\n            max(months_after) as months_after_array\n        from\n            (select date_trunc('month', time_of_activation) as reference_month,\n                sequence(0, date_diff('month',time_of_activation,now())) as months_after\n            from trusted.quotes_customer_cycles as qcy\n            group by date_trunc('month', time_of_activation),\n                    date_diff('month',time_of_activation,now()))\n        group by reference_month\n        ),\n        cohort_grid as\n        (select m.reference_month,\n            t.months_after,\n            date_add('month',t.months_after,m.reference_month) as portifolio_month\n        from all_months as m\n        cross join unnest(m.months_after_array) as t (months_after)),\n        grid_fill as\n            (select cg.*,\n                count(distinct user_id) as actives,\n                count(distinct if(churned=1\n                                and time_of_out = ends_at\n                                and date_diff('month', first_activation, time_of_out) = cg.months_after,user_id,null)) as churns,\n                count(distinct if(claimed=1\n                                and time_of_out = ends_at\n                                and date_diff('month', first_activation, time_of_out) = cg.months_after,user_id,null)) as claims,\n                sum(if(claimed=1\n                    and time_of_out = ends_at\n                    and date_diff('month', first_activation, time_of_out) = cg.months_after,insured_value,0)) as claims_value,\n                avg(premium_value) as avg_ticket_value\n            from cohort_grid as cg\n            join wallet on date_trunc('month', first_activation) = cg.reference_month\n            and date_diff('month', first_activation, starts_at) <= cg.months_after\n            and (ends_at is null\n                or date_diff('month', first_activation, ends_at) >= cg.months_after)\n            group by\n                cg.reference_month,\n                cg.months_after,\n                cg.portifolio_month\n            order by\n                cg.reference_month desc, cg.months_after),\n        activations as\n            (select reference_month,\n                    actives as activations\n            from grid_fill\n            where months_after = 0),\n        upper_triangle_simple as\n            (select gf.reference_month,\n                    gf.months_after,\n                    gf.portifolio_month,\n                    gf.avg_ticket_value as avg_ticket_value,\n                    activations.activations,\n                    gf.claims_value/cast(0.9313*gf.avg_ticket_value*gf.actives as double) as obs_LR,\n                    gf.claims as obs_Claims,\n                    sum(gfs.claims_value)/cast(0.9313*sum(gfs.avg_ticket_value*gfs.actives) as double) as agg_LR,\n                    sum(gfs.claims)/cast(activations.activations as double) as agg_Frequency,\n                    (gf.actives-coalesce(gf.churns,0))/cast(activations.activations as double) AS Retention\n            from grid_fill as gf\n            left join activations on activations.reference_month = gf.reference_month\n            left join grid_fill as gfs on gf.reference_month = gfs.reference_month\n            and gf.months_after >= gfs.months_after\n            where gf.reference_month >= cast('2018-07-01' as date)\n                and gf.portifolio_month between cast('2018-11-01' as date) and date_add('month',-1, date_trunc('month',now()))\n            group by\n                gf.reference_month,\n                gf.months_after,\n                gf.portifolio_month,\n                gf.avg_ticket_value,\n                activations.activations,\n                gf.actives,\n                gf.churns,\n                gf.claims,\n                gf.claims_value\n            order by gf.reference_month desc,\n                gf.months_after),\n        upper_triangle as (\n            select up.*,\n                (coalesce(upb.Retention, 1) - up.Retention) / coalesce(upb.Retention, 1) as obs_Churn\n            from upper_triangle_simple as up\n            left join upper_triangle_simple as upb on upb.reference_month = up.reference_month\n            and up.months_after = upb.months_after + 1),\n        increments as (\n            select av2.months_after,\n                coalesce(avg(av2.agg_Frequency-av3.agg_Frequency), 0) as agg_F_sum,\n                coalesce(avg(av2.agg_LR-av3.agg_LR), 0) as agg_LR_sum,\n                coalesce(avg(av2.Retention-av1.Retention),1) as Retention_sum,\n                coalesce(avg(av2.obs_Claims-av3.obs_Claims),0) as obs_F_sum,\n                coalesce(avg(av2.obs_LR-av3.obs_LR),0) as obs_LR_sum,\n                coalesce(avg(av2.avg_ticket_value/cast(av3.avg_ticket_value as double)),1) as Ticket_inc\n            from upper_triangle as av2\n            left join upper_triangle as av1 on av2.months_after = av1.months_after + 1\n                and av1.reference_month = av2.reference_month\n            left join upper_triangle as av3 on av2.months_after = av3.months_after + 1\n                and av3.reference_month = av2.reference_month\n                and av3.portifolio_month between date_add('month',-3, date_trunc('month', date_trunc('month',now()))) and date_add('month',-2, date_trunc('month', date_trunc('month',now())))\n            group by av2.months_after),\n        ghost_months as (\n            select reference_month,\n                max(months_after) as months_after_array\n            from (\n                select date_trunc('month', time_of_activation) as reference_month,\n                    sequence(1 + date_diff('month',time_of_activation, date_trunc('month',now())), date_diff('month',cast('2018-07-01' as date), date_trunc('month',now()))) as months_after\n                from trusted.quotes_customer_cycles as qcy\n                where time_of_activation >= cast('2018-07-01' as date)\n                group by date_trunc('month', time_of_activation),\n                    date_diff('month',time_of_activation, date_trunc('month',now())))\n            group by reference_month),\n        ghost_grid as\n            (select m.reference_month,\n                t.months_after,\n                date_add('month',t.months_after,m.reference_month) as portifolio_month\n            from ghost_months as m\n            cross join unnest(m.months_after_array) as t (months_after)),\n        running_sum as (\n            select gd.reference_month,\n                gd.months_after,\n                gd.fm,\n                coalesce(SUM(inc.agg_F_sum),0) as agg_F_sum,\n                coalesce(SUM(inc.agg_LR_sum),0) as agg_LR_sum,\n                coalesce(SUM(inc.Retention_sum),0) as Retention_sum,\n                coalesce(SUM(inc.obs_F_sum),1) as obs_F_sum,\n                coalesce(SUM(inc.obs_LR_sum),1) as obs_LR_sum,\n                coalesce(exp(SUM(ln(inc.Ticket_inc))),1) as Ticket_inc\n            from\n                (select g1.reference_month,\n                        g1.months_after, min(g2.months_after) as fm\n                from ghost_grid as g1\n                join ghost_grid as g2 on g2.reference_month = g1.reference_month\n                group by g1.reference_month,g1.months_after) as gd\n            left join increments as inc on inc.months_after between gd.fm and gd.months_after\n            group by gd.reference_month,\n                    gd.months_after,\n                    gd.fm),\n        lower_triangle as (\n            select gd.*,\n                activations.activations,\n                NULL as agg_Frequency,\n                NULL as agg_LR,\n                NULL as Retention,\n                NULL as obs_Claims,\n                NULL as obs_LR,\n                NULL as avg_ticket_value,\n                NULL as obs_Churn\n            from ghost_grid as gd\n            left join upper_triangle as ut on ut.reference_month = gd.reference_month\n            and ut.portifolio_month = date_add('month',-1, date_trunc('month', date_trunc('month',now())))\n            left join running_sum as rp on rp.months_after = gd.months_after\n            and rp.reference_month = gd.reference_month\n            left join activations on activations.reference_month = gd.reference_month),\n        rectangle as (\n            (select cast(reference_month as date) as reference_month,\n                months_after,\n                portifolio_month,\n                activations,\n                agg_Frequency,\n                agg_LR,\n                Retention,\n                obs_Claims,\n                obs_LR,\n                avg_ticket_value,\n                obs_Churn,\n                'Upper' as triangle\n            from upper_triangle)\n        union (select cast(reference_month as date) as reference_month,\n                    months_after,\n                    portifolio_month,\n                    activations,\n                    agg_Frequency,\n                    agg_LR,\n                    Retention,\n                    obs_Claims,obs_LR,\n                    avg_ticket_value,\n                    obs_Churn,\n                    'Lower' as triangle\n                from lower_triangle))\n\n        select r1.*,\n            SUM(r2.activations*r2.Retention*0.9313*r2.avg_ticket_value)*(1-r1.agg_LR) as Margin\n        from rectangle as r1\n        left join rectangle as r2 on r1.reference_month = r2.reference_month\n        and r1.months_after >= r2.months_after\n        where r1.months_after <= date_diff('month', cast('2018-07-01' as date), date_trunc('month',now())) - 1\n        group by r1.reference_month,\n                r1.months_after,\n                r1.portifolio_month,\n                r1.activations,\n                r1.agg_Frequency,\n                r1.agg_LR,\n                r1.Retention,\n                r1.avg_ticket_value,\n                r1.obs_Claims,\n                r1.obs_LR,\n                r1.obs_Churn,\n                r1.triangle\n        order by r1.reference_month,\n                r1.months_after",
        "QueryExecutionContext": {},
        "QueryExecutionId": "c0f33733-010d-4d0d-b525-65828d555e19",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/c0f33733-010d-4d0d-b525-65828d555e19.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 105868100,
            "EngineExecutionTimeInMillis": 38240,
            "QueryPlanningTimeInMillis": 25512,
            "QueryQueueTimeInMillis": 303,
            "TotalExecutionTimeInMillis": 38451
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:38.580000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:00.129000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"auto_events_1597507681_036931\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/auto_events_1597507681_036931'\n            ) as with initial as (\n    select\n        acon.user_id,\n        ev.publisher_id as contract_id,\n        adri.full_name,\n        ev.name as event,\n        ev.ts as event_at,\n        acon.state as contract_state,\n        lj.insured_value_cents,\n        lj.premium_value_cents,\n        lj.canceled_reason,\n        lj.canceled_at,\n        acer.make as make_acer,\n        acer.model as model_acer,\n        lj.emitted_at,\n        lj.emitted_remote_at,\n        lj.canceled_remote_at,\n        user_email,\n        acon.quote_id as id_for_join,\n        row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\n        row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\n        row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\n    from\n        raw.quotes_events as ev\n    left join\n        raw.quotes_auto_contracts as acon\n    on\n        ev.publisher_id = acon.id\n    left join\n        raw.quotes_auto_certificates as acer\n    on\n        acon.id = acer.contract_id\n    left join\n        raw.quotes_auto_drivers as adri\n    on\n        acon.id = adri.contract_id\n    left join (\n        select\n            *\n        from (\n            select\n                *,\n                row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle\n            from\n                raw.quotes_auto_certificates as acer\n            left join\n                raw.quotes_auto_certificate_cycles as acc\n            on\n                acer.id = acc.certificate_id )\n        where\n            rn_cycle = 1) lj\n    on\n     acon.id = lj.contract_id\n    where\n        not exists (select * from trusted.pier_testers pt where lower(pt.full_name) = lower(adri.full_name))\n        and not exists (select * from trusted.pier_testers pt where pt.email = user_email)\n        and user_email not like '%+test%'\n        and user_email not like '%tester%'\n        and user_email not like '%@pier.digital'\n    group by\n        user_id,\n        publisher_id,\n        full_name,\n        name,\n        ts,\n        acon.state,\n        insured_value_cents,\n        premium_value_cents,\n        lj.canceled_reason,\n        lj.canceled_at,\n        acer.make,\n        acer.model,\n        emitted_at,\n        user_email,\n        acon.quote_id,\n        lj.emitted_at,\n        lj.emitted_remote_at,\n        lj.canceled_remote_at\n    order by\n        contract_state asc,\n        user_id asc,\n        rank_by_user asc,\n        rank_by_event asc\n),\n\nmore_info as (\n    select\n        qaq.id as quote_id,\n        qaq.created_at,\n        driver_name,\n        license_plate,\n        qai.model,\n        name as make,\n        qai.model_year,\n        qai.fabrication_year,\n        qai.current_market_value_cents,\n        driver_gender,\n        driver_birthdate,\n        replace(home_zipcode, '-','') as home_zipcode,\n        row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\n    from\n        raw.quotes_auto_quotes qaq\n    left join\n        raw.quotes_auto_items qai\n    on\n        qaq.item_id = qai.id\n    left join\n        raw.quotes_auto_makes qam\n    on\n        qai.make_id = qam.id\n),\n\ntrusted_auto_final_join as (\n    select\n        *,\n        split(city, '/') as city_state_array\n    from\n        initial\n    left join\n        more_info\n        on initial.id_for_join = more_info.quote_id\n    left join\n        transient.cep_correio cep\n        on more_info.home_zipcode = cep.cep\n    order by event_at\n),\n\ntrusted_auto as (\n    select\n        user_id,\n        contract_id,\n        coalesce(full_name, driver_name) as full_name,\n        user_email,\n        event,\n        date_add('hour', -3, event_at) as event_at,\n        contract_state,\n        coalesce( make_acer, make) as make,\n        coalesce(model_acer, model) as model,\n        license_plate,\n        model_year,\n        fabrication_year,\n        insured_value_cents,\n        premium_value_cents,\n        current_market_value_cents,\n        driver_birthdate,\n        driver_gender,\n        home_zipcode,\n        trusted_auto_final_join.city_state_array[1] as city,\n        trusted_auto_final_join.city_state_array[2] as state,\n        neighborhood,\n        emitted_at,\n        emitted_remote_at,\n        canceled_at,\n        canceled_remote_at,\n        canceled_reason,\n        rank_by_event,\n        rank_by_user,\n        rank_by_user_desc\n    from\n        trusted_auto_final_join\n),\n\nmp_quote_data as (\n    select\n        *\n    from (\n        select\n            user_distinct_id as id2,\n            event as signup_event,\n            user_pier_id as user_id,\n            coalesce(user_properties.email, event_properties.email) as email,\n            cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\n            event_properties.utm_campaign as utm_campaign,\n            event_properties.utm_source as utm_source,\n            event_properties.utm_content as utm_content,\n            event_properties.utm_medium as utm_medium,\n            event_properties.utm_term as utm_term,\n            event_properties.last_utm_source,\n            event_properties.last_utm_medium,\n            event_properties.last_utm_campaign,\n            event_properties.last_utm_content,\n            event_properties.last_utm_term,\n            event_properties.platform,\n            row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\n        from\n            trusted.mixpanel_general\n        where\n            event = '[Auto][Web] Signup with Email submitted'\n            or event = 'UserSignup With Email Confirmed'\n            or event = 'UserSignup With email Confirmed'\n            or event = 'UserSignup With Facebook Confirmed'\n            or event = 'UserSignup With facebook Confirmed'\n        ) where rn = 1\n),\n\nweb_sources as (\n    select\n        mqd.email,\n        mqd.user_id,\n        mqd.signup_event,\n        mqd.signup_at,\n        mqd.platform,\n        coalesce(last_utm_campaign, utm_campaign) as campaign,\n        coalesce(last_utm_source, utm_source) as source,\n        coalesce(last_utm_content, utm_content) as content,\n        coalesce(last_utm_medium, utm_medium) as medium,\n        coalesce(last_utm_term, utm_term) as term\n    from\n        mp_quote_data mqd\n),\n\nuser_adid_mixpanel as (\n    select\n        *\n    from (\n        select\n            distinct user_pier_id,\n            event_properties.adid\n        from\n            trusted.mixpanel_general)\n    where\n        adid is not null\n        and user_pier_id is not null\n),\n\nadid_sources as (\n    select\n        *\n    from (\n        select\n            adid,\n            network_name,\n            campaign_name,\n            adgroup_name,\n            creative_name,\n            device_manufacturer,\n            installed_at\n        from\n            raw.vendors_adjust\n        where activity_kind = 'install')\n),\n\nmixpanel_adjust_sources_auxiliaries as (\n    select\n        mix.user_pier_id,\n        mix.adid,\n        ad.network_name,\n        ad.campaign_name,\n        ad.adgroup_name,\n        ad.creative_name,\n        ad.device_manufacturer,\n        ad.installed_at\n    from\n        user_adid_mixpanel mix\n    left join\n        adid_sources ad\n        on  mix.adid = ad.adid\n),\n\nmixpanel_adjust_sources_final_selection as (\n    select\n        *,\n        row_number () over (partition by user_pier_id order by installed_at) as rn_uadid_asc,\n        row_number () over (partition by user_pier_id order by installed_at desc) as rn_uadid_desc\n    from\n        mixpanel_adjust_sources_auxiliaries\n    where network_name is not null\n),\n\nmixpanel_adjust_sources as (\n    select\n        *\n    from\n        mixpanel_adjust_sources_final_selection\n),\n\nadjust_sources as (\n        select\n            ads.user_pier_id,\n            ads.network_name,\n            ads.campaign_name,\n            ads.adgroup_name,\n            ads.creative_name,\n            ads.device_manufacturer,\n            ads.installed_at\n        from\n            mixpanel_adjust_sources ads\n        where rn_uadid_asc = 1\n),\n\nfinal_sources_platform as (\n    select\n        ta.*,\n        case\n            when ws.platform is null AND qcc.user_id is not null then 'Cross Sell'\n            when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\n            else ws.platform END as platform,\n        ws.signup_event,\n        ws.signup_at,\n        ws.campaign,\n        ws.source,\n        ws.content,\n        ws.medium,\n        ws.term,\n        ads.network_name,\n        ads.campaign_name,\n        ads.adgroup_name,\n        ads.creative_name,\n        ads.device_manufacturer,\n        ads.installed_at\n    from\n        trusted_auto ta\n    left join\n        web_sources ws\n        on ta.user_id = ws.user_id\n        or ta.user_email = ws.email\n    left join\n        adjust_sources ads\n        on ta.user_id = ads.user_pier_id\n    left join\n        trusted.quotes_customer_contracts qcc\n        on ta.user_id = qcc.user_id\n),\n\nfinal_with_channels as (\n    select\n        *,\n        case\n            when platform = 'app' then 'App'\n            when platform = 'Cross Sell' then 'Cross Sell'\n            when medium = 'cpc' or medium = 'brand' or medium = 'ocpm' or medium = 'bex' then 'Paid'\n            when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\n            when medium = 'referral' OR medium = 'referral' then 'Referral'\n            else 'organic' End as channel\n    from\n        final_sources_platform\n)\n\nselect * from final_with_channels",
        "QueryExecutionContext": {},
        "QueryExecutionId": "ff24dd15-b7bd-4d96-8eb4-d92b47ded1e4",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/ff24dd15-b7bd-4d96-8eb4-d92b47ded1e4"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/ff24dd15-b7bd-4d96-8eb4-d92b47ded1e4-manifest.csv",
            "DataScannedInBytes": 6182180906,
            "EngineExecutionTimeInMillis": 80237,
            "QueryPlanningTimeInMillis": 2953,
            "QueryQueueTimeInMillis": 15441,
            "TotalExecutionTimeInMillis": 95496
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:09:36.769000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:01.273000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "select * from trusted.nps_trends",
        "QueryExecutionContext": {},
        "QueryExecutionId": "b6d892f7-ef45-4329-bf68-7523ac6534ac",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/b6d892f7-ef45-4329-bf68-7523ac6534ac.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 178,
            "EngineExecutionTimeInMillis": 1738,
            "QueryPlanningTimeInMillis": 936,
            "QueryQueueTimeInMillis": 180,
            "TotalExecutionTimeInMillis": 1914
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:01:05.341000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:01:03.427000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT \"marketing_google_analytics_blog\".\"avgtimeonpage\" AS \"avgtimeonpage\",\n  \"marketing_google_analytics_blog\".\"bouncerate\" AS \"bouncerate\",\n  \"marketing_google_analytics_blog\".\"channel\" AS \"channel\",\n  \"marketing_google_analytics_blog\".\"day\" AS \"day\",\n  \"marketing_google_analytics_blog\".\"entrances\" AS \"entrances\",\n  \"marketing_google_analytics_blog\".\"newusers\" AS \"newusers\",\n  \"marketing_google_analytics_blog\".\"pagepath\" AS \"pagepath\",\n  \"marketing_google_analytics_blog\".\"pagetitle\" AS \"pagetitle\",\n  \"marketing_google_analytics_blog\".\"pageviews\" AS \"pageviews\",\n  \"marketing_google_analytics_blog\".\"pageviewspersession\" AS \"pageviewspersession\",\n  \"marketing_google_analytics_blog\".\"sessionduration\" AS \"sessionduration\",\n  \"marketing_google_analytics_blog\".\"sessions\" AS \"sessions\",\n  \"marketing_google_analytics_blog\".\"source\" AS \"source\",\n  \"marketing_google_analytics_blog\".\"uniquepageviews\" AS \"uniquepageviews\",\n  \"marketing_google_analytics_blog\".\"users\" AS \"users\"\nFROM \"trusted\".\"marketing_google_analytics_blog\" \"marketing_google_analytics_blog\"",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "ecf9fb68-5d10-4870-a280-9d63268031c9",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/ecf9fb68-5d10-4870-a280-9d63268031c9.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 168826,
            "EngineExecutionTimeInMillis": 1475,
            "QueryPlanningTimeInMillis": 707,
            "QueryQueueTimeInMillis": 261,
            "TotalExecutionTimeInMillis": 1733
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 12:02:23.668000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 12:02:21.935000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  select * from trusted.quotes_customer_contracts\n) \"customer contracts trusted\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "6624dc40-cc82-4a8a-8a09-de58c34494ab",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/6624dc40-cc82-4a8a-8a09-de58c34494ab.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 282,
            "QueryQueueTimeInMillis": 53,
            "ServiceProcessingTimeInMillis": 31,
            "TotalExecutionTimeInMillis": 366
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:31:49.533000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:31:49.167000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"customer_events_1597507680_9491968\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/customer_events_1597507680_9491968'\n            ) as with contracts as (\n    select\n        sc.*,\n        split(smd.name, ' - Plano')[1] as device_name,\n        smd.model_identifier_list,\n        ic.insured_value_cents,\n        ic.premium_value_cents,\n        ic.certificate_uid,\n        ic.item_manufacturer,\n        ic.item_model,\n        cast(substr(cast(ic.starts_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as certificate_starts_at,\n        cast(substr(cast(ic.emitted_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as emitted_at,\n        ic.customer_full_name,\n        ic.customer_cpf_cnpj,\n        ic.customer_email,\n        ic.previous_certificate_uid,\n        row_number() over (partition by sc.user_id order by sc.created_at desc) as rn\n    from\n        raw.quotes_smartphone_contracts sc\n    left join\n        raw.quotes_smartphone_device_models smd\n    on\n        sc.smartphone_device_model_id = smd.id\n    left join (\n        select\n            row_number() over (partition by ic.id order by icc.starts_at) as rn_ic,\n            icc.*,\n            ic.smartphone_contract_id,\n            ic.certificate_uid,\n            ic.item_manufacturer,\n            ic.item_model,\n            ic.customer_full_name,\n            ic.customer_cpf_cnpj,\n            ic.customer_email,\n            ic.previous_certificate_uid\n        from\n            raw.quotes_insurance_certificates ic\n        left join\n            raw.quotes_insurance_certificate_cycles icc\n        on\n            icc.certificate_id = cast(ic.id as varchar(20))\n        where\n            ic.current = true\n        ) ic\n    on\n        sc.id = ic.smartphone_contract_id\n        and rn_ic = 1\n    where\n        suspend_reason is null\n        or substr(suspend_reason, 1, 5) <> 'wrong'\n),\n\nactivations as (\n    with a as (\n        select\n            ic.*,\n            sc.user_id ,\n            row_number() over (partition by user_id order by sc.created_at) as rn\n        from\n            (\n            select\n                row_number() over (partition by ic.id order by icc.starts_at) as rn_ic,\n                icc.*,\n                ic.smartphone_contract_id,\n                ic.certificate_uid,\n                ic.item_manufacturer,\n                ic.item_model,\n                ic.customer_full_name,\n                ic.customer_cpf_cnpj,\n                ic.customer_email,\n                ic.previous_certificate_uid\n            from\n                raw.quotes_insurance_certificates ic\n            left join\n                raw.quotes_insurance_certificate_cycles icc\n            on\n                icc.certificate_id = cast(ic.id as varchar(20))\n            where\n                ic.current = true\n            ) ic\n        join\n            raw.quotes_smartphone_contracts sc\n        on\n            ic.smartphone_contract_id = sc.id\n            and rn_ic = 1\n        where\n            sc.suspend_reason is null or (\n                sc.suspend_reason <> 'wrong_emission'\n                and (ic.canceled_reason is null or ic.canceled_reason <> 'wrong_emission'))\n    ),\n\n    b as ( -- needed to remove guys with no previous\n        select\n            a2.certificate_uid\n        from\n            a a1\n        join\n            a a2\n        on\n            a1.user_id = a2.user_id\n            and a1.rn = a2.rn - 1\n            and substr(a1.canceled_reason, 1, 6) = 'change'\n            and a2.previous_certificate_uid is null\n    )\n\n    select -- activations\n        con.user_id,\n        con.imei,\n        con.imei_secondary,\n        con.deductible_percentage,\n        con.payment_subscription_id,\n        con.payment_subscription_gateway,\n        null as suspend_reason,\n        null inactive_on,\n        coalesce(con.emitted_at, cast(substr(cast(con.paid_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp)) as event_at, -- THIS SHOULD NOT BE COALESCED, but backend still inconsistent (bc98326c-9aca-4b04-89f6-0bf2c9a3c9ad changed plan WITH previous_certificate_uid)\n        con.device_name,\n        con.model_identifier_list,\n        con.insured_value_cents,\n        con.premium_value_cents,\n        con.certificate_uid,\n        con.item_manufacturer,\n        con.item_model,\n        con.certificate_starts_at,\n        con.emitted_at,\n        con.customer_cpf_cnpj,\n        con.customer_email,\n        'Activation' as event\n    from\n        contracts con\n    left join\n        b\n    on\n        con.certificate_uid = b.certificate_uid\n    where\n        con.previous_certificate_uid is null\n        and b.certificate_uid is null\n        and paid_at is not null\n),\n\nclaims as (\n    select -- claims\n        user_id,\n        imei,\n        imei_secondary,\n        deductible_percentage,\n        payment_subscription_id,\n        payment_subscription_gateway,\n        suspend_reason,\n        inactive_on,\n        cast(substr(cast(coalesce(claimed_at, suspended_at) AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as event_at,\n        device_name,\n        model_identifier_list,\n        insured_value_cents,\n        premium_value_cents,\n        certificate_uid,\n        item_manufacturer,\n        item_model,\n        certificate_starts_at,\n        emitted_at,\n        customer_cpf_cnpj,\n        customer_email,\n        'Claim' as event\n    from\n        contracts\n    where\n        suspend_reason = 'claim'\n        or suspend_reason = 'claim_after_churn'\n        or (claimed_at is not null -- Update on December 13th: this last one can be removed in future\n        and suspend_reason = 'churn')\n), -- since now we have 'claim_after_churn'\n\ninstant_churn as (\n    select -- instant churn\n        user_id,\n        imei,\n        imei_secondary,\n        deductible_percentage,\n        payment_subscription_id,\n        payment_subscription_gateway,\n        suspend_reason,\n        inactive_on,\n        cast(substr(cast(suspended_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as event_at,\n        device_name,\n        model_identifier_list,\n        insured_value_cents,\n        premium_value_cents,\n        certificate_uid,\n        item_manufacturer,\n        item_model,\n        certificate_starts_at,\n        emitted_at,\n        customer_cpf_cnpj,\n        customer_email,\n        'Churn' as event\n    from\n        contracts\n    where\n        suspend_reason not in ('change_device', 'change_plan', 'claim')\n),\n\nchanges as (\n    select -- changes\n        user_id,\n        imei,\n        imei_secondary,\n        deductible_percentage,\n        payment_subscription_id,\n        payment_subscription_gateway,\n        suspend_reason,\n        inactive_on,\n        cast(substr(cast(suspended_at AT TIME ZONE 'America/Sao_Paulo' as varchar), 1, 23) as timestamp) as event_at,\n        device_name,\n        model_identifier_list,\n        insured_value_cents,\n        premium_value_cents,\n        certificate_uid,\n        item_manufacturer,\n        item_model,\n        certificate_starts_at,\n        emitted_at,\n        customer_cpf_cnpj,\n        customer_email,\n        'Change' as event\n    from\n        contracts\n    where\n        substr(suspend_reason, 1, 6) = 'change'\n),\n\nchurned_claims as (\n    select\n        cl.user_id,\n        cl.imei,\n        cl.imei_secondary,\n        cl.deductible_percentage,\n        cl.payment_subscription_id,\n        cl.payment_subscription_gateway,\n        cl.suspend_reason,\n        cl.inactive_on,\n        cl.event_at,\n        cl.device_name,\n        cl.model_identifier_list,\n        cl.insured_value_cents,\n        cl.premium_value_cents,\n        cl.certificate_uid,\n        cl.item_manufacturer,\n        cl.item_model,\n        cl.certificate_starts_at,\n        cl.emitted_at,\n        cl.customer_cpf_cnpj,\n        cl.customer_email,\n        'Churn' as event\n    from\n        claims cl\n    left join\n        activations ac\n    on\n        cl.user_id = ac.user_id\n        and ac.event_at > cl.event_at\n        and ac.event_at < cl.event_at + interval '30' day\n    where\n        ac.user_id is null\n        and cast(cl.event_at as date) < current_date - interval '30' day\n),\n\nunified as (\n    select\n        *\n    from\n        activations\n    union all\n    select\n        *\n    from\n        claims\n    union all\n    select\n        *\n    from\n        instant_churn\n    union all\n    select\n        *\n    from\n        changes\n    union all\n    select\n        *\n    from\n        churned_claims\n)\n\nselect\n    *,\n    rank() over (partition by user_id order by event_at, event desc) as rank_by_user,\n    rank() over (partition by user_id, event order by event_at) as rank_by_event\nfrom\n    unified\norder by\n    user_id, rank_by_user",
        "QueryExecutionContext": {},
        "QueryExecutionId": "b5deb76c-a6d6-4697-85d9-83534e1782e6",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/b5deb76c-a6d6-4697-85d9-83534e1782e6"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/b5deb76c-a6d6-4697-85d9-83534e1782e6-manifest.csv",
            "DataScannedInBytes": 2065396884,
            "EngineExecutionTimeInMillis": 10244,
            "QueryPlanningTimeInMillis": 3664,
            "QueryQueueTimeInMillis": 50862,
            "TotalExecutionTimeInMillis": 60942
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:09:02.143000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:01.201000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  WITH facebook_ads_campaigns_insights AS(\n      SELECT \n          date_parse(date_start, '%Y-%m-%dT%H:%i:%sZ') as day,\n          date_start, -- acrescentando a coluna repetida s\u00f3 para dar UNION com google ads\n          date_parse(date_stop, '%Y-%m-%dT%H:%i:%sZ') as date_stop,\n          campaign_id,\n          campaign_name, \n          objective,\n          sum(reach) as reach,\n          cast(sum(impressions) as double) as impressions,\n          sum(reduce( filter(actions, x -> x.action_type = 'video_view'), 0.0, (s, x) -> s + cast(x.value as double), s -> s)) as views, -- filtra no array de actions tipos especificos\n          sum(clicks) as clicks,\n          sum(reduce( filter(actions, x -> x.action_type = 'omni_app_install'), 0.0, (s, x) -> s + cast(x.value as double), s -> s)) as app_install,\n          sum(spend) as spend\n      FROM(SELECT *,\n                  row_number() over (partition by campaign_id, adset_id, ad_id, date_start order by _sdc_received_at DESC) as rn\n          FROM raw.marketing_facebook_ads_insights)    \n      WHERE rn = 1\n      GROUP BY date_start, date_stop, campaign_id, campaign_name, objective\n  ),\n  \n  facebook_metrics AS(\n      SELECT *,\n          if(clicks <> 0.0, spend/clicks, 0.0) as cpc, -- try retorna double vazio\n          if(impressions <> 0.0, (spend/impressions) * 1000, 0.0) as cpm,\n          if(impressions <> 0.0, cast((clicks/impressions) * 100 as decimal(5, 2)), 0.0) as ctr,\n          if(app_install <> 0, spend/app_install, 0.0) as cpi,\n          if(views <> 0, spend/views, 0.0) as cpv\n      FROM facebook_ads_campaigns_insights\n  ),\n  \n  facebook_ads_campaigns AS(\n      SELECT\n              *\n      FROM(SELECT\n              id as campaign_id,\n              name as campaign,\n              effective_status,\n              row_number() over (partition by id order by updated_time DESC ) as rn\n          FROM raw.marketing_facebook_ads_campaigns)\n      WHERE rn = 1\n  ),\n  \n  gooogle_ads_campaigns_performance AS(\n      SELECT *,\n          row_number() over (partition by campaign, day order by _sdc_received_at DESC) as rn\n      FROM raw.marketing_google_ads_campaign_performance \n  ),\n  \n  google_filters AS (\n      SELECT \n          day,\n          campaignid,\n          campaign,\n          campaignstate,\n          startdate,\n          enddate,\n          network,\n          max(clicks) FILTER (WHERE  rn = 1) as first_part_clicks,\n          max(clicks) FILTER (WHERE  rn = 2) as second_part_clicks,\n          max(conversions) FILTER (WHERE  rn = 1) as first_part_conversions,\n          max(conversions) FILTER (WHERE  rn = 2) as second_part_conversions,\n          max(conversions) FILTER (WHERE  rn = 1 and campaign LIKE '%appinstall%') as first_part_installs, -- como n\u00e3o temos ainda nenhum exemplo de network p campanha de install, usamos o nome da campanha\n          max(conversions) FILTER (WHERE  rn = 2 and campaign LIKE '%appinstall%') as second_part_installs, -- como n\u00e3o temos ainda nenhum exemplo de network p campanha de install, usamos o nome da campanha\n          max(cost) FILTER (WHERE  rn = 1) as first_part_cost,\n          max(cost) FILTER (WHERE  rn = 2) as second_part_cost,\n          max(impressions) FILTER (WHERE  rn = 1) as first_part_impressions,\n          max(impressions) FILTER (WHERE  rn = 2) as second_part_impressions,\n          max(views) FILTER (WHERE  rn = 1) as first_part_views,\n          max(views) FILTER (WHERE  rn = 2) as second_part_views,\n          max(_sdc_received_at) FILTER (WHERE  rn = 1) as first_part_received,\n          max(_sdc_received_at) FILTER (WHERE  rn = 2) as second_part_received\n      FROM gooogle_ads_campaigns_performance\n      GROUP BY day, campaign, network, campaignid, campaignstate, startdate, enddate\n  ),\n  \n  google_metrics AS(\n     SELECT\n          *,\n          if(clicks <> 0.0, cost/clicks, 0.0) as cpc,\n          if(impressions <> 0.0, cost/(impressions/1000), 0.0) as cpm,\n          if(impressions <> 0.0, (clicks/impressions)*100, 0.0) as ctr,\n          if(app_install <> 0.0, cost/app_install, 0.0) as cpi,\n          if(views <> 0.0, cost/views, 0.0) as cpv\n     FROM(SELECT\n              date_parse(day, '%Y-%m-%dT%H:%i:%sZ') as day,\n              startdate,\n              date_parse(enddate, '%Y-%m-%dT%H:%i:%sZ') as enddate,\n              campaignid,\n              campaign,\n              network,\n              cast(first_part_impressions = null as double) as reach, -- google n\u00e3o tem alcance, acrescentando a coluna s\u00f3 para dar UNION\n              cast(if((first_part_impressions != second_part_impressions) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_impressions + second_part_impressions, first_part_impressions) as double) as impressions,\n              if((first_part_views != second_part_views) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_views + second_part_views, first_part_views) as views,\n              if((first_part_clicks != second_part_clicks) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_clicks + second_part_clicks, first_part_clicks) as clicks,\n              if((first_part_installs != second_part_installs) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_installs  + second_part_installs, first_part_installs) as app_install,\n              if((first_part_conversions != second_part_conversions) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), first_part_conversions + second_part_conversions, first_part_conversions) as conversions,\n              if((first_part_cost != second_part_cost) and (day(cast(date_parse(first_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp)) = day(cast(date_parse(second_part_received, '%Y-%m-%dT%H:%i:%sZ') as timestamp))), (first_part_cost+ second_part_cost)/1000000, (first_part_cost)/1000000) as cost,\n              campaignstate\n          FROM google_filters\n          )\n      GROUP BY day, campaign, clicks, conversions, cost, impressions, views, network, campaignstate, campaignid, startdate, enddate, reach, app_install\n  ),\n  \n  union_facebook_google AS (\n      SELECT \n          fm.*,\n          fac.effective_status as campaign_state,\n          case\n              when campaign_name like '%facebook-e-instagram%'\n              then 'facebook-e-instagram'\n              when (campaign_name like '%instagram%') and (campaign_name not like '%facebook%')\n              then 'instagram'\n              else 'facebook'\n          end as source\n      FROM facebook_metrics fm\n      JOIN facebook_ads_campaigns fac\n      ON fm.campaign_id = fac.campaign_id\n      UNION\n      SELECT \n          day,\n          startdate as date_start,\n          enddate as date_stop,\n          campaignid as campaign_id,\n          campaign as campaign_name,\n          network as objective,\n          reach,\n          impressions,\n          views,\n          clicks,\n          app_install,\n          cost as spend,\n          cpc,\n          cpm,\n          ctr,\n          cpi,\n          cpv,\n          campaignstate as campaign_state,\n          case\n              when network like '%Search%' OR campaign like '%search%'\n              then 'google-search'\n              when network like '%Display%' OR campaign like '%display%'\n              then 'google-display'\n              when network like '%ideo%' OR campaign like '%youtube%'\n              then 'youtube'\n              when campaign like '%install%' \n              then 'google-app'\n              else 'google'\n          end as source\n      FROM google_metrics\n  ),\n  \n  leads_members_auto AS(\n      SELECT \n          date_trunc('day', event_at) as day, \n          campaign,\n          source,\n          case \n              when event = 'created' then count(user_id) END as leads,\n          case\n              when event = 'approve_payment!' then count(user_id) END as members\n      FROM \n          trusted.quotes_auto_events \n      WHERE \n          event = 'created' \n          or event = 'approve_payment!'\n      GROUP BY \n          source, \n          campaign,\n          channel,\n          event_at,\n          event\n  ), \n  \n  auto_table AS (\n      SELECT \n          day,\n          campaign,\n          source,\n          'auto' as product,\n          max(leads) as leads,\n          max(members) as members\n      FROM \n          leads_members_auto\n      GROUP BY\n          day,\n          campaign,\n          source\n  ),\n  \n  smartphone_leads AS(\n      SELECT \n          date_trunc('day', requested_at) as day,\n          utm_campaign, \n          utm_source,\n          count(distinct user_id_ok) as leads\n      FROM \n          trusted.quotes_smartphone_leads \n      WHERE \n          rn = 1\n      GROUP BY \n          utm_campaign,\n          utm_source,\n          date_trunc('day', requested_at)\n  ),\n  \n  lrn AS(\n      SELECT \n          * \n      FROM \n          trusted.quotes_smartphone_leads \n      WHERE rn = 1\n  ),\n  \n  leads_and_events_smartphone AS(\n      SELECT \n          cev.*,\n          lrn.utm_campaign,\n          lrn.utm_source\n      FROM \n          trusted.quotes_customer_events as cev\n      left join\n          lrn\n      on \n          cev.user_id = lrn.user_id_ok\n  ), \n  \n  smartphone_members AS(\n      SELECT \n          date_trunc('day', event_at) as day,\n          utm_campaign,\n          utm_source,\n          count(user_id) as members\n      FROM \n          leads_and_events_smartphone\n      WHERE \n          event = 'Activation' and \n          rank_by_event = 1\n      GROUP BY\n          date_trunc('day', event_at),\n          utm_campaign,\n          utm_source\n  ),\n  \n  smartphone_leads_and_members AS(\n      SELECT \n          coalesce(sml.day, smm.day) as day,\n          coalesce(sml.utm_source, smm.utm_source) as source,\n          coalesce(sml.utm_campaign, smm.utm_campaign) as campaign,\n          'smartphone' as product,\n          leads, \n          members\n      FROM \n          smartphone_leads as sml\n      full join \n          smartphone_members as smm\n      on sml.day = smm.day\n      and sml.utm_source = smm.utm_source \n      and sml.utm_campaign = smm.utm_campaign\n  ),\n  \n  auto_and_smartphone AS(\n      SELECT \n          coalesce(sml.day, smm.day) as day,\n          if(coalesce(sml.source, smm.source) is not null, coalesce(sml.source, smm.source), 'other') as source,\n          coalesce(sml.campaign, smm.campaign) as campaign,\n          sml.product as smartphone,\n          smm.product as auto,\n          sml.leads as smartphone_leads,\n          smm.leads as auto_leads,\n          sml.members as smartphone_members,\n          smm.members as auto_members\n      FROM \n          smartphone_leads_and_members as sml\n      full join \n      auto_table as smm\n      on sml.day = smm.day\n      and sml.source = smm.source \n      and sml.campaign = smm.campaign\n  ),\n  \n  campaigns_auto_smartphone AS(\n      SELECT \n          coalesce(aas.day,ufb.day) as day,\n          case\n              when ((smartphone is not null) AND (auto is null)) OR (lower(substr(campaign_name, 1, 12)) like '%smartphone%')  OR (lower(substr(campaign, 1, 12)) like '%smartphone%')\n              then 'smartphone'\n              when ((smartphone is null) AND (auto is not null)) OR  (lower(substr(campaign_name, 1, 8)) like '%auto%') OR (lower(substr(campaign, 1, 8)) like '%auto%')\n              then 'auto'\n              else 'institucional' -- casos que caem aqui: n\u00e3o teve lead ou membro e o nome n\u00e3o diz se \u00e9 auto ou smartphone, teve lead ou membro de ambos produtos e nome n\u00e3o especifica\n          end as product,\n          coalesce(ufb.source,aas.source) as source,\n          coalesce(ufb.campaign_name,aas.campaign) as campaign_name,\n          objective,\n          campaign_state,\n          if(ufb.spend is not null, spend, 0.0) as spend, \n          smartphone_leads,\n          auto_leads,\n          smartphone_members,\n          auto_members,\n          reach,\n          impressions,\n          views,\n          clicks,\n          app_install,\n          cpc,\n          cpm,\n          ctr,\n          cpi,\n          cpv\n      FROM auto_and_smartphone aas\n      full join union_facebook_google ufb\n      on aas.day = ufb.day\n      and aas.campaign = ufb.campaign_name\n  ),\n  \n  campaigns_metrics AS(\n      SELECT *,\n          if(product = 'smartphone' and smartphone_leads <> 0.0, spend/smartphone_leads, 0.0) as lac_smartphone,\n          if(product = 'auto' and auto_leads <> 0.0, spend/auto_leads, 0.0) as lac_auto,\n          if(product = 'smartphone' and smartphone_members <> 0.0, spend/smartphone_members, 0.0) as cac_smartphone,\n          if(product = 'auto' and auto_members <> 0.0, spend/auto_members, 0.0) as cac_auto\n      FROM campaigns_auto_smartphone\n  ),\n  \n  lpv AS(\n      SELECT \n          date_trunc('day' , event_at) as day_lpv,\n          campaign_name,\n          source,\n          count(distinct_id) as lpvs\n      FROM (\n          SELECT\n              row_number() OVER (PARTITION BY properties.distinct_id, \n              date_trunc('day',cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP)) + interval '3' hour) as rn,\n              mix.properties.distinct_id,\n              event,\n              properties.last_utm_source as source,\n              properties.last_utm_campaign as campaign_name,\n              cast(substr(cast(from_unixtime(cast(properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) + interval '3' hour as event_at\n          FROM    \n              raw.mixpanel mix\n          WHERE\n            event = 'Landing Page Screen Viewed' )\n      WHERE \n          rn = 1 \n      GROUP BY \n          date_trunc('day' , event_at),\n          campaign_name,\n          source\n  ),\n  \n  campaigns_lpv AS(\n      SELECT \n          cm.*,\n          lpv.lpvs,\n          CASE\n              WHEN (cm.campaign_name like '%lead%')\n              THEN 'lead'\n              WHEN (cm.campaign_name like '%install%')\n              THEN 'install'\n              WHEN (cm.campaign_name like '%conversao%')\n              THEN 'conversao'\n              WHEN (cm.campaign_name like '%trafego%')\n              THEN 'trafego'\n              WHEN (cm.campaign_name like '%visibilidade%')\n              THEN 'visibilidade'\n              WHEN (cm.campaign_name like '%view%')\n              THEN 'view'\n              ELSE 'other'\n          END as kpi\n      FROM  \n          campaigns_metrics cm\n      LEFT JOIN \n          lpv \n      on cm.day = lpv.day_lpv and\n          cm.source = lpv.source and\n          cm.campaign_name = lpv.campaign_name\n  )\n  \n  select *\n  from campaigns_lpv\n) \"Consulta SQL personalizada\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "e79d9212-a0da-48f1-8c46-37de9c73c481",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/e79d9212-a0da-48f1-8c46-37de9c73c481.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 899,
            "QueryQueueTimeInMillis": 66,
            "ServiceProcessingTimeInMillis": 35,
            "TotalExecutionTimeInMillis": 1000
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 14:32:57.118000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 14:32:56.118000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "SELECT * FROM (SELECT *\nFROM (\n  with initial as (\r\n      select\r\n          acon.user_id,\r\n          ev.publisher_id as contract_id,\r\n          adri.full_name,\r\n          ev.name as event, \r\n          ev.ts as event_at,\r\n          acon.state as contract_state,\r\n          lj.insured_value_cents,\r\n          lj.premium_value_cents,\r\n          lj.canceled_reason,\r\n          lj.canceled_at,\r\n          acer.make as make_acer,\r\n          acer.model as model_acer,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at,\r\n          user_email,\r\n          acon.quote_id as id_for_join,\r\n          row_number() over (partition by acon.user_id, ev.name order by ev.ts) as rank_by_event,\r\n          row_number() over (partition by acon.user_id order by ev.ts) as rank_by_user,\r\n          row_number() over (partition by acon.user_id order by ev.ts DESC) as rank_by_user_desc\r\n      from\r\n          raw.quotes_events as ev\r\n      left join \r\n          raw.quotes_auto_contracts as acon\r\n      on\r\n          ev.publisher_id = acon.id\r\n      left join \r\n          raw.quotes_auto_certificates as acer \r\n      on \r\n          acon.id = acer.contract_id\r\n      left join \r\n          raw.quotes_auto_drivers as adri\r\n      on\r\n          acon.id = adri.contract_id\r\n      left join (\r\n          select\r\n              *\r\n          from (\r\n              select \r\n                  *, \r\n                  row_number () over (partition by certificate_id ORDER by acer.created_at DESC) as rn_cycle \r\n              from  \r\n                  raw.quotes_auto_certificates as acer\r\n              left join\r\n                  raw.quotes_auto_certificate_cycles as acc         \r\n              on \r\n                  acer.id = acc.certificate_id ) \r\n          where \r\n              rn_cycle = 1) lj\r\n      on         \r\n       acon.id = lj.contract_id \r\n      where \r\n          NOT EXISTS (SELECT email as test_emails_count FROM trusted.pier_testers pt where pt.full_name = adri.full_name)\r\n          and user_email not like '%+test%' \r\n          and user_email not like '%tester%' \r\n          and user_email not like '%@pier.digital(opens in new tab)' \r\n      group by \r\n          user_id, \r\n          publisher_id, \r\n          full_name, \r\n          name, \r\n          ts, \r\n          acon.state, \r\n          insured_value_cents,\r\n          premium_value_cents, \r\n          lj.canceled_reason, \r\n          lj.canceled_at, \r\n          acer.make, \r\n          acer.model,\r\n          emitted_at, \r\n          user_email,\r\n          acon.quote_id,\r\n          lj.emitted_at,\r\n          lj.emitted_remote_at,\r\n          lj.canceled_remote_at    \r\n      order by\r\n          contract_state asc,\r\n          user_id asc,\r\n          rank_by_user asc,\r\n          rank_by_event asc\r\n  ), \r\n  more_info as (\r\n      select \r\n          qaq.id as quote_id, \r\n          qaq.created_at,\r\n          driver_name, \r\n          license_plate, \r\n          qai.model,\r\n          name as make,\r\n          qai.model_year,\r\n          qai.fabrication_year,\r\n          qai.current_market_value_cents,\r\n          driver_gender, \r\n          driver_birthdate, \r\n          replace(home_zipcode, '-','') as home_zipcode,\r\n          row_number () over (partition by driver_name order by qaq.created_at DESC) as rn_quote\r\n      from \r\n          raw.quotes_auto_quotes qaq\r\n      left join \r\n          raw.quotes_auto_items qai\r\n      on \r\n          qaq.item_id = qai.id\r\n      left join\r\n          raw.quotes_auto_makes qam\r\n      on\r\n          qai.make_id = qam.id\r\n  ),\r\n  trusted_auto_final_join as (\r\n      select \r\n          *,\r\n          split(city, '/') as city_state_array\r\n      from \r\n          initial \r\n      left join \r\n          more_info\r\n          on initial.id_for_join = more_info.quote_id\r\n      left join \r\n          transient.cep_correio cep\r\n          on more_info.home_zipcode = cep.cep\r\n      order by event_at \r\n  ),\r\n  trusted_auto as (\r\n      select \r\n          user_id,\r\n          contract_id,\r\n          coalesce(full_name, driver_name) as full_name,\r\n          user_email,\r\n          event,\r\n          date_add('hour', -3, event_at) as event_at,\r\n          contract_state,\r\n          coalesce( make_acer, make) as make,\r\n          coalesce(model_acer, model) as model,\r\n          license_plate,\r\n          model_year,\r\n          fabrication_year,\r\n          insured_value_cents,\r\n          premium_value_cents,\r\n          current_market_value_cents,\r\n          driver_birthdate,\r\n          driver_gender,\r\n          home_zipcode,\r\n          trusted_auto_final_join.city_state_array[1] as city,\r\n          trusted_auto_final_join.city_state_array[2] as state,\r\n          neighborhood,\r\n          emitted_at,\r\n          emitted_remote_at,\r\n          canceled_at,\r\n          canceled_remote_at,\r\n          canceled_reason,\r\n          rank_by_event,\r\n          rank_by_user,\r\n          rank_by_user_desc\r\n      from \r\n          trusted_auto_final_join\r\n  ),\r\n  mp_quote_data as (\r\n      select \r\n          * \r\n      from \r\n          (select \r\n              user_distinct_id as id2,\r\n              event as signup_event,\r\n              user_pier_id as user_id, \r\n              coalesce(user_properties.email, event_properties.email) as email,\r\n              cast(substr(cast(from_unixtime(cast(event_properties.time AS DOUBLE)) AT TIME ZONE 'America/Sao_Paulo' AS varchar), 1, 23) AS TIMESTAMP) as signup_at,\r\n              event_properties.utm_campaign as utm_campaign,\r\n              event_properties.utm_source as utm_source,\r\n              event_properties.utm_content as utm_content,\r\n              event_properties.utm_medium as utm_medium,\r\n              event_properties.utm_term as utm_term,\r\n              event_properties.last_utm_source, \r\n              event_properties.last_utm_medium, \r\n              event_properties.last_utm_campaign, \r\n              event_properties.last_utm_content, \r\n              event_properties.last_utm_term,\r\n              event_properties.platform,\r\n              row_number() over (partition by event_properties.distinct_id order by event_properties.time) as rn\r\n          from \r\n              trusted.mixpanel_general\r\n          where \r\n              event = 'UserSignup With Email Confirmed' \r\n              or event = 'UserSignup With email Confirmed'\r\n              or event = 'UserSignup With Facebook Confirmed'\r\n              or event = 'UserSignup With facebook Confirmed'\r\n              or event = '[Auto][APP] User SignUp With Email Button Clicked'\r\n          ) where rn = 1 \r\n  ), \r\n  web_sources as (\r\n      select \r\n          mqd.email,\r\n          mqd.user_id,\r\n          mqd.signup_event,\r\n          mqd.signup_at,\r\n          mqd.platform,\r\n          coalesce(last_utm_campaign, utm_campaign) as campaign,\r\n          coalesce(last_utm_source, utm_source) as source,\r\n          coalesce(last_utm_content, utm_content) as content,\r\n          coalesce(last_utm_medium, utm_medium) as medium,\r\n          coalesce(last_utm_term, utm_term) as term\r\n      from \r\n          mp_quote_data mqd\r\n  \r\n  ),\r\n  adjust_sources as (\r\n      select \r\n          ads.user_pier_id,\r\n          ads.network_name,\r\n          ads.campaign_name,\r\n          ads.adgroup_name,\r\n          ads.creative_name,\r\n          ads.device_manufacturer,\r\n          ads.installed_at\r\n      from \r\n          raw.vw_mixpanel_adjust_sources ads\r\n      where rn_uadid_asc = 1\r\n  ),\r\n  \r\n  final_sources_platform as (\r\n  select \r\n      ta.*,\r\n      case \r\n          when ws.platform is null AND qcc.user_id is not null then 'Cross Sell' \r\n          when ws.platform is null AND qcc.user_id is null then 'Old/Not Found'\r\n          else ws.platform END as platform,\r\n      ws.signup_event,\r\n      ws.signup_at,\r\n      ws.campaign,\r\n      ws.source,\r\n      ws.content,\r\n      ws.medium,\r\n      ws.term,\r\n      ads.network_name,\r\n      ads.campaign_name,\r\n      ads.adgroup_name,\r\n      ads.creative_name,\r\n      ads.device_manufacturer,\r\n      ads.installed_at\r\n  from \r\n      trusted_auto ta\r\n  left join \r\n      web_sources ws\r\n      on ta.user_id = ws.user_id\r\n      or ta.user_email = ws.email\r\n  left join \r\n      adjust_sources ads\r\n      on ta.user_id = ads.user_pier_id\r\n  left join\r\n      trusted.quotes_customer_contracts qcc  \r\n      on ta.user_id = qcc.user_id\r\n  ), \r\n  final_with_channels as (\r\n  select \r\n      *, \r\n           case \r\n          when platform = 'app' then 'App'\r\n          when platform =  'Cross Sell' then  'Cross Sell' \r\n          when medium = 'cpc' or medium = 'brand'  or medium = 'ocpm' or medium = 'bex' then 'Paid' \r\n          when medium = 'social' or medium = 'email' or medium = 'blog' then 'B&C'\r\n          when medium = 'referral' OR medium = 'referral' then 'Referral'\r\n          else 'organic' End as channel\r\n  from \r\n      final_sources_platform \r\n  ), \r\n  initial_referring_domain as (\r\n      select \r\n          * \r\n      from (\r\n          select \r\n              *,\r\n              row_number () over (partition by user_pier_id) as rn \r\n          from (\r\n              select \r\n                  distinct user_pier_id, \r\n                  user_distinct_id,\r\n                  event_properties._initial_referrer,\r\n                  event_properties._initial_referring_domain\r\n              from \r\n                  trusted.mixpanel_general\r\n              where\r\n                 event = 'Landing Page Screen Viewed' and\r\n                 user_pier_id is not null))\r\n      where rn = 1\r\n  ), \r\n  final_with_referrer as (\r\n  select \r\n      tae.*,\r\n      ird._initial_referrer as initial_referrer,\r\n      ird._initial_referring_domain as initial_referring_domain\r\n  from \r\n      final_with_channels as tae\r\n  left join \r\n      initial_referring_domain as ird\r\n  on tae.user_id = ird.user_pier_id\r\n  )\r\n  select * from final_with_referrer\n) \"Custom SQL Query\"\nLIMIT 0) T LIMIT 0",
        "QueryExecutionContext": {
            "Database": "default"
        },
        "QueryExecutionId": "f9efee1a-3bac-4ad8-9560-c45e4dd12c13",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/f9efee1a-3bac-4ad8-9560-c45e4dd12c13.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 0,
            "EngineExecutionTimeInMillis": 1505,
            "QueryQueueTimeInMillis": 59,
            "ServiceProcessingTimeInMillis": 32,
            "TotalExecutionTimeInMillis": 1596
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 14:34:16.284000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 14:34:14.688000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table raw.\"full_1597514481_7156632\" with\n            (\n                format='parquet',\n                external_location='s3://pier-data-lake-raw-geolocation/full_1597514481_7156632'\n            ) as \n            select\n                user_id,\n                device_id,\n                cast(from_iso8601_timestamp(loc.timestamp) as timestamp) as device_timestamp_utc,\n                loc.coords.speed as speed,\n                loc.coords.latitude as latitude,\n                loc.coords.longitude as longitude,\n                loc.coords.floor as floor,\n                loc.coords.accuracy as accuracy,\n                loc.coords.altitude_accuracy as altitude_accuracy,\n                loc.coords.altitude as altitude,\n                loc.coords.heading as heading,\n                loc.is_moving as is_moving,\n                loc.odometer as odometer,\n                loc.uuid as event_uuid,\n                loc.activity.type as activity_type,\n                loc.activity.confidence as activity_confidence,\n                loc.battery.level as battery_level,\n                loc.battery.is_charging as battery_is_charging,\n                loc.extras\n            from\n                transient.geolocation\n            cross join\n                unnest(location) as t(loc)",
        "QueryExecutionContext": {},
        "QueryExecutionId": "685d7320-231f-4a40-8aac-b631e0772e07",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/685d7320-231f-4a40-8aac-b631e0772e07"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/685d7320-231f-4a40-8aac-b631e0772e07-manifest.csv",
            "DataScannedInBytes": 27518063073,
            "EngineExecutionTimeInMillis": 31661,
            "QueryPlanningTimeInMillis": 1637,
            "QueryQueueTimeInMillis": 231,
            "ServiceProcessingTimeInMillis": 11,
            "TotalExecutionTimeInMillis": 31903
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 15:01:53.713000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 15:01:21.810000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "WITH users_activation AS (\n        SELECT\n            user_id,\n            time_of_activation,\n            time_of_out,\n            time_of_claim,\n            out_reason,\n            suspend_reason,\n            churned,\n            claimed,\n            days_protected\n            FROM (\n            SELECT\n                user_id,\n                time_of_activation,\n                time_of_out,\n                time_of_claim,\n                out_reason,\n                suspend_reason,\n                churned,\n                claimed,\n                -- If the user hasn't claimed yet, compute the days_protected using the actual timestamp\n                date_diff('day', time_of_activation, COALESCE(time_of_claim, now())) AS days_protected,\n                -- Invert cycle number to get the last cycle only\n                ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY cycle_number DESC) AS inverted_cycle_number\n                FROM trusted.quotes_customer_cycles\n            ) WHERE inverted_cycle_number = 1\n        )\n\n        SELECT\n        user_id,\n        days_protected\n        FROM users_activation\n        ORDER BY user_id",
        "QueryExecutionContext": {},
        "QueryExecutionId": "c6423fad-9174-45cf-a6ac-f299966d07cb",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/c6423fad-9174-45cf-a6ac-f299966d07cb.csv"
        },
        "StatementType": "DML",
        "Statistics": {
            "DataScannedInBytes": 1184890,
            "EngineExecutionTimeInMillis": 1870,
            "QueryPlanningTimeInMillis": 885,
            "QueryQueueTimeInMillis": 199,
            "TotalExecutionTimeInMillis": 2051
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:34.358000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:32.307000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"auto_funnel_1597507712_2395766\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-quotes/auto_funnel_1597507712_2395766'\n            ) as with\nquote_contract_link as (\n    -- TODO: There are quote_id with more than one contract on this table. Here we are \n    -- removing duplicates by select the newest contract associated with it, but it might \n    -- be a bad heuristics. We should revisit it in the future.\n    select \n        quote_id,\n        max_by(id, created_at) as contract_id\n    from \n        raw.quotes_auto_contracts\n    group by\n        quote_id\n),\nauto_events as (\n    select \n        quote_contract_link.quote_id,\n        qe.publisher_id as contract_id,\n        ts as event_at,\n        name as event,\n        row_number() over (partition by quote_contract_link.quote_id, qe.name order by qe.ts ) as rank_by_event_quote\n    from \n        raw.quotes_events as qe\n    left join \n        quote_contract_link\n        on quote_contract_link.contract_id = qe.publisher_id\n    where\n        qe.publisher_type='Auto::Contract'\n),\nauto_events_unstacked as (\n    select\n        quote_id,\n        contract_id,\n        min(event_at) filter (where event='created')          as contract_create_at,\n        min(event_at) filter (where event='approve_lead!')    as contract_approved_at,\n        min(event_at) filter (where event='reject_lead!')     as contract_rejected_at,\n        min(event_at) filter (where event='approve_payment!') as payment_approved_at,\n        min(event_at) filter (where event='churn_requested!') as churn_requested_at,\n        min(event_at) filter (where event='churn_completed!') as churn_completed_at\n    from\n        auto_events\n    where\n        rank_by_event_quote=1\n    group by\n        quote_id,\n        contract_id\n),\ninsp_events as (\n    select\n        publisher_id,\n        ts as event_at,\n        name as event,\n        changed_fields.state[2] as next_state,\n        row_number() over (partition by publisher_id, name order by ts) as rank_by_event_pub,\n        row_number() over (partition by publisher_id, changed_fields.state[2] order by ts) as rank_by_nextstate_pub\n    from\n        raw.inspections_events\n    where\n        publisher_type='Inspection'\n),\ninsp_events_unstacked as (\n    select\n        publisher_id,\n        min(event_at) filter (where event='user_start!' and rank_by_event_pub=1) as inspection_started_at,\n        min(event_at) filter (where next_state='being_reviewed' and rank_by_nextstate_pub=1) as inspection_submitted_at,\n        min(event_at) filter (where event='admin_accept!' and rank_by_event_pub=1) as inspection_approved_at\n    from\n        insp_events\n    group by\n        publisher_id\n),\nauto_funil as (\n    select \n        qainfo.id as quote_id,\n        aeu.contract_id,\n        \n        qainfo.driver_identification as cpf,\n        qainfo.proposed_premium_cents,\n        qainfo.idade,\n        qainfo.sexo,\n        qainfo.birthdate,\n        qainfo.fipe_code,\n        qainfo.model_year,\n        qainfo.model_name,\n        qainfo.grupo as model_group,\n        qainfo.cod_grupo as model_group_code,\n        qainfo.maker,\n        qainfo.license_plate,\n        qainfo.insured_value,\n        qainfo.cep,\n        qainfo.city,\n        qainfo.uf,\n        qainfo.is_auctioned,\n        \n        -- Status\n        qainfo.completed_quote,\n        qainfo.refusal_reasons as quote_refusal_reasons,\n        qainfo.status_funnel as quote_status_funnel,\n        qainfo.approved as quote_approved,\n        \n        -- Datetimes\n        qainfo.created_at as quote_created_at,\n        aeu.contract_create_at,\n        ieu.inspection_started_at,\n        ieu.inspection_submitted_at,\n        ieu.inspection_approved_at,\n        aeu.contract_approved_at,\n        aeu.contract_rejected_at,\n        aeu.payment_approved_at,\n        aeu.churn_requested_at,\n        aeu.churn_completed_at,\n\n        -- Row number for quotation only\n        qainfo.rn_day as rank_by_quote_day\n    from \n        trusted.quotes_auto_quotes_info as qainfo\n    left join\n        auto_events_unstacked as aeu\n        on aeu.quote_id = qainfo.id\n    left join\n        insp_events_unstacked as ieu\n        on ieu.publisher_id = aeu.contract_id\n)\n\nselect *\nfrom auto_funil",
        "QueryExecutionContext": {},
        "QueryExecutionId": "9ef6d17e-5002-434f-b894-d12300fc065e",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/9ef6d17e-5002-434f-b894-d12300fc065e"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/9ef6d17e-5002-434f-b894-d12300fc065e-manifest.csv",
            "DataScannedInBytes": 25700596,
            "EngineExecutionTimeInMillis": 5390,
            "QueryPlanningTimeInMillis": 993,
            "QueryQueueTimeInMillis": 3181,
            "TotalExecutionTimeInMillis": 8551
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:40.878000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:08:32.327000-03:00"
        },
        "WorkGroup": "primary"
    },
    {
        "Query": "create table trusted.\"responses_1597507678_7356253\" with\n            (\n                format='json',\n                external_location='s3://pier-data-lake-trusted-nps/responses_1597507678_7356253'\n            ) as select\n    coalesce(event_data.person_properties.name, event_data.person.name) as name,\n    event_data.person_properties.customer_full_name,\n    coalesce(event_data.person_properties.customer_email, event_data.person.email) as customer_email,\n    event_data.score,\n    event_data.comment,\n    event_data.person_properties.product,\n    event_data.person_properties.plan,\n    event_data.person_properties.item_manufacturer,\n    event_data.person_properties.device_type,\n    case\n        when event_data.person_properties.product = 'Auto' then event_data.person_properties.model\n        when event_data.person_properties.product = 'Celular' then event_data.person_properties.item_model End as model,\n    event_data.person_properties.model_year,\n    event_data.person_properties.fabrication_year,\n    event_data.person_properties.city,\n    event_data.person_properties.state,\n    event_data.person_properties.bairro,\n    event_data.person_properties.status,\n    event_data.person_properties.safra,\n    event_data.person_properties.age,\n    event_data.person_properties.sex,\n    event_data.person_properties.last_claimed_at,\n    event_data.person_properties.current_contract_started_at,\n    event_data.person_properties.last_churn_at,\n    event_data.person_properties.last_churn_reason,\n    event_data.person_properties.inactive_on,\n    _sdc_received_at as response_received_at\nfrom\n    transient.nps_responses",
        "QueryExecutionContext": {},
        "QueryExecutionId": "915dd071-9d32-45fe-894a-2736d9911172",
        "ResultConfiguration": {
            "OutputLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/915dd071-9d32-45fe-894a-2736d9911172"
        },
        "StatementType": "DDL",
        "Statistics": {
            "DataManifestLocation": "s3://aws-athena-query-results-721052151405-us-west-2/tables/915dd071-9d32-45fe-894a-2736d9911172-manifest.csv",
            "DataScannedInBytes": 10992524,
            "EngineExecutionTimeInMillis": 5329,
            "QueryPlanningTimeInMillis": 1373,
            "QueryQueueTimeInMillis": 275,
            "ServiceProcessingTimeInMillis": 328,
            "TotalExecutionTimeInMillis": 5932
        },
        "Status": {
            "CompletionDateTime": "2020-08-15 13:08:05.314000-03:00",
            "State": "SUCCEEDED",
            "SubmissionDateTime": "2020-08-15 13:07:59.382000-03:00"
        },
        "WorkGroup": "primary"
    }
]